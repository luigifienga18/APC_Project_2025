
Nodo_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001548  0800502c  0800502c  0000602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006574  08006574  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006574  08006574  00008010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006574  08006574  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006574  08006574  00007574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006578  08006578  00007578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800657c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008010  2**0
                  CONTENTS
 10 .bss          0000085c  20000010  20000010  00008010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000086c  2000086c  00008010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e94  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b90  00000000  00000000  0001bed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  0001ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c14  00000000  00000000  0001fa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb6c  00000000  00000000  00020614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001575b  00000000  00000000  0003f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4c82  00000000  00000000  000548db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010955d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000411c  00000000  00000000  001095a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0010d6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005014 	.word	0x08005014

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005014 	.word	0x08005014

080001c8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  if (huart->Instance == UART5)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000210 <HAL_UART_RxCpltCallback+0x48>)
 80001d6:	4293      	cmp	r3, r2
 80001d8:	d115      	bne.n	8000206 <HAL_UART_RxCpltCallback+0x3e>
  {
	  received =
	      (uint32_t)buffer_rx[0]       |
 80001da:	4b0e      	ldr	r3, [pc, #56]	@ (8000214 <HAL_UART_RxCpltCallback+0x4c>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	461a      	mov	r2, r3
	      ((uint32_t)buffer_rx[1] << 8)  |
 80001e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000214 <HAL_UART_RxCpltCallback+0x4c>)
 80001e2:	785b      	ldrb	r3, [r3, #1]
 80001e4:	021b      	lsls	r3, r3, #8
	      (uint32_t)buffer_rx[0]       |
 80001e6:	431a      	orrs	r2, r3
	      ((uint32_t)buffer_rx[2] << 16) |
 80001e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000214 <HAL_UART_RxCpltCallback+0x4c>)
 80001ea:	789b      	ldrb	r3, [r3, #2]
 80001ec:	041b      	lsls	r3, r3, #16
	      ((uint32_t)buffer_rx[1] << 8)  |
 80001ee:	431a      	orrs	r2, r3
	      ((uint32_t)buffer_rx[3] << 24);
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <HAL_UART_RxCpltCallback+0x4c>)
 80001f2:	78db      	ldrb	r3, [r3, #3]
 80001f4:	061b      	lsls	r3, r3, #24
	      ((uint32_t)buffer_rx[2] << 16) |
 80001f6:	4313      	orrs	r3, r2
	  received =
 80001f8:	4a07      	ldr	r2, [pc, #28]	@ (8000218 <HAL_UART_RxCpltCallback+0x50>)
 80001fa:	6013      	str	r3, [r2, #0]


      HAL_UART_Receive_IT(&huart5, buffer_rx, sizeof(buffer_rx));
 80001fc:	2204      	movs	r2, #4
 80001fe:	4905      	ldr	r1, [pc, #20]	@ (8000214 <HAL_UART_RxCpltCallback+0x4c>)
 8000200:	4806      	ldr	r0, [pc, #24]	@ (800021c <HAL_UART_RxCpltCallback+0x54>)
 8000202:	f003 fcca 	bl	8003b9a <HAL_UART_Receive_IT>


  }
}
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40005000 	.word	0x40005000
 8000214:	20000440 	.word	0x20000440
 8000218:	20000444 	.word	0x20000444
 800021c:	200000e4 	.word	0x200000e4

08000220 <Calculate_Level>:

void Calculate_Level()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	 if (received < (max_value+1) ){
 8000224:	4b1c      	ldr	r3, [pc, #112]	@ (8000298 <Calculate_Level+0x78>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	1c5a      	adds	r2, r3, #1
 800022a:	4b1c      	ldr	r3, [pc, #112]	@ (800029c <Calculate_Level+0x7c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d907      	bls.n	8000242 <Calculate_Level+0x22>
		 rimanente = max_value - received;
 8000232:	4b19      	ldr	r3, [pc, #100]	@ (8000298 <Calculate_Level+0x78>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b19      	ldr	r3, [pc, #100]	@ (800029c <Calculate_Level+0x7c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	4a18      	ldr	r2, [pc, #96]	@ (80002a0 <Calculate_Level+0x80>)
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	e003      	b.n	800024a <Calculate_Level+0x2a>
	 }
	 else {
		 rimanente= max_value;
 8000242:	4b15      	ldr	r3, [pc, #84]	@ (8000298 <Calculate_Level+0x78>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a16      	ldr	r2, [pc, #88]	@ (80002a0 <Calculate_Level+0x80>)
 8000248:	6013      	str	r3, [r2, #0]
	 }


	 memset(stato, 0, sizeof(stato));
 800024a:	2214      	movs	r2, #20
 800024c:	2100      	movs	r1, #0
 800024e:	4815      	ldr	r0, [pc, #84]	@ (80002a4 <Calculate_Level+0x84>)
 8000250:	f004 feb3 	bl	8004fba <memset>



	 if (rimanente >= 7) {
 8000254:	4b12      	ldr	r3, [pc, #72]	@ (80002a0 <Calculate_Level+0x80>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b06      	cmp	r3, #6
 800025a:	d907      	bls.n	800026c <Calculate_Level+0x4c>
		 strcpy(stato, "ALTO");
 800025c:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <Calculate_Level+0x84>)
 800025e:	4a12      	ldr	r2, [pc, #72]	@ (80002a8 <Calculate_Level+0x88>)
 8000260:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000264:	6018      	str	r0, [r3, #0]
 8000266:	3304      	adds	r3, #4
 8000268:	7019      	strb	r1, [r3, #0]
	 } else{
		 strcpy(stato, "BASSO");
	 }


}
 800026a:	e012      	b.n	8000292 <Calculate_Level+0x72>
	 } else if (rimanente >= 3) {
 800026c:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <Calculate_Level+0x80>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b02      	cmp	r3, #2
 8000272:	d907      	bls.n	8000284 <Calculate_Level+0x64>
		 strcpy(stato, "MEDIO");
 8000274:	4b0b      	ldr	r3, [pc, #44]	@ (80002a4 <Calculate_Level+0x84>)
 8000276:	4a0d      	ldr	r2, [pc, #52]	@ (80002ac <Calculate_Level+0x8c>)
 8000278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800027c:	6018      	str	r0, [r3, #0]
 800027e:	3304      	adds	r3, #4
 8000280:	8019      	strh	r1, [r3, #0]
}
 8000282:	e006      	b.n	8000292 <Calculate_Level+0x72>
		 strcpy(stato, "BASSO");
 8000284:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <Calculate_Level+0x84>)
 8000286:	4a0a      	ldr	r2, [pc, #40]	@ (80002b0 <Calculate_Level+0x90>)
 8000288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800028c:	6018      	str	r0, [r3, #0]
 800028e:	3304      	adds	r3, #4
 8000290:	8019      	strh	r1, [r3, #0]
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000000 	.word	0x20000000
 800029c:	20000444 	.word	0x20000444
 80002a0:	2000045c 	.word	0x2000045c
 80002a4:	20000448 	.word	0x20000448
 80002a8:	0800502c 	.word	0x0800502c
 80002ac:	08005034 	.word	0x08005034
 80002b0:	0800503c 	.word	0x0800503c

080002b4 <Show_On_Display>:
void Show_On_Display()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af02      	add	r7, sp, #8

	 ssd1306_SetCursor(10, 0);
 80002ba:	2100      	movs	r1, #0
 80002bc:	200a      	movs	r0, #10
 80002be:	f000 fde7 	bl	8000e90 <ssd1306_SetCursor>
	 ssd1306_WriteString("APC25", Font_11x18, White);
 80002c2:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <Show_On_Display+0x6c>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	9200      	str	r2, [sp, #0]
 80002c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80002ca:	4816      	ldr	r0, [pc, #88]	@ (8000324 <Show_On_Display+0x70>)
 80002cc:	f000 fdba 	bl	8000e44 <ssd1306_WriteString>


	 ssd1306_SetCursor(10, 22);
 80002d0:	2116      	movs	r1, #22
 80002d2:	200a      	movs	r0, #10
 80002d4:	f000 fddc 	bl	8000e90 <ssd1306_SetCursor>
	 ssd1306_WriteString("il livello e'", Font_7x10, White);
 80002d8:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <Show_On_Display+0x74>)
 80002da:	2201      	movs	r2, #1
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80002e0:	4812      	ldr	r0, [pc, #72]	@ (800032c <Show_On_Display+0x78>)
 80002e2:	f000 fdaf 	bl	8000e44 <ssd1306_WriteString>


	 ssd1306_FillRectangle(10, 38, 10 + 11 * 10, 38 + 18, Black);
 80002e6:	2300      	movs	r3, #0
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2338      	movs	r3, #56	@ 0x38
 80002ec:	2278      	movs	r2, #120	@ 0x78
 80002ee:	2126      	movs	r1, #38	@ 0x26
 80002f0:	200a      	movs	r0, #10
 80002f2:	f000 fde5 	bl	8000ec0 <ssd1306_FillRectangle>
	 ssd1306_SetCursor(10, 38);
 80002f6:	2126      	movs	r1, #38	@ 0x26
 80002f8:	200a      	movs	r0, #10
 80002fa:	f000 fdc9 	bl	8000e90 <ssd1306_SetCursor>
	 ssd1306_WriteString(stato, Font_11x18, White);
 80002fe:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <Show_On_Display+0x6c>)
 8000300:	2201      	movs	r2, #1
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000306:	480a      	ldr	r0, [pc, #40]	@ (8000330 <Show_On_Display+0x7c>)
 8000308:	f000 fd9c 	bl	8000e44 <ssd1306_WriteString>


	 ssd1306_UpdateScreen();
 800030c:	f000 fc8c 	bl	8000c28 <ssd1306_UpdateScreen>
	 HAL_Delay(1000);
 8000310:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000314:	f000 feba 	bl	800108c <HAL_Delay>

}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	08006548 	.word	0x08006548
 8000324:	08005044 	.word	0x08005044
 8000328:	0800653c 	.word	0x0800653c
 800032c:	0800504c 	.word	0x0800504c
 8000330:	20000448 	.word	0x20000448

08000334 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == UART5)
  {


  }
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034c:	f000 fe38 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000350:	f000 f822 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000354:	f000 f950 	bl	80005f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000358:	f000 f87e 	bl	8000458 <MX_I2C1_Init>
  MX_SPI1_Init();
 800035c:	f000 f8bc 	bl	80004d8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000360:	f000 f928 	bl	80005b4 <MX_USB_PCD_Init>
  MX_UART5_Init();
 8000364:	f000 f8f6 	bl	8000554 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8000368:	f000 fbdc 	bl	8000b24 <ssd1306_Init>

  HAL_UART_Receive_IT(&huart5, buffer_rx, sizeof(buffer_rx));
 800036c:	2204      	movs	r2, #4
 800036e:	4908      	ldr	r1, [pc, #32]	@ (8000390 <main+0x48>)
 8000370:	4808      	ldr	r0, [pc, #32]	@ (8000394 <main+0x4c>)
 8000372:	f003 fc12 	bl	8003b9a <HAL_UART_Receive_IT>

  HAL_Delay(200);
 8000376:	20c8      	movs	r0, #200	@ 0xc8
 8000378:	f000 fe88 	bl	800108c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    Calculate_Level();
 800037c:	f7ff ff50 	bl	8000220 <Calculate_Level>
		Show_On_Display();
 8000380:	f7ff ff98 	bl	80002b4 <Show_On_Display>

		HAL_Delay(200);
 8000384:	20c8      	movs	r0, #200	@ 0xc8
 8000386:	f000 fe81 	bl	800108c <HAL_Delay>
	    Calculate_Level();
 800038a:	bf00      	nop
 800038c:	e7f6      	b.n	800037c <main+0x34>
 800038e:	bf00      	nop
 8000390:	20000440 	.word	0x20000440
 8000394:	200000e4 	.word	0x200000e4

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b09e      	sub	sp, #120	@ 0x78
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003a2:	2228      	movs	r2, #40	@ 0x28
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f004 fe07 	bl	8004fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003bc:	463b      	mov	r3, r7
 80003be:	223c      	movs	r2, #60	@ 0x3c
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f004 fdf9 	bl	8004fba <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c8:	2301      	movs	r3, #1
 80003ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003d0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d6:	2301      	movs	r3, #1
 80003d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003da:	2302      	movs	r3, #2
 80003dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003e2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80003e8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 ff0c 	bl	800220c <HAL_RCC_OscConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003fa:	f000 f987 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	230f      	movs	r3, #15
 8000400:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000402:	2302      	movs	r3, #2
 8000404:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800040a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800040e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000414:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000418:	2101      	movs	r1, #1
 800041a:	4618      	mov	r0, r3
 800041c:	f002 ff04 	bl	8003228 <HAL_RCC_ClockConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000426:	f000 f971 	bl	800070c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART5;
 800042a:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <SystemClock_Config+0xbc>)
 800042c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800042e:	2300      	movs	r3, #0
 8000430:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000432:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000436:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000438:	463b      	mov	r3, r7
 800043a:	4618      	mov	r0, r3
 800043c:	f003 f906 	bl	800364c <HAL_RCCEx_PeriphCLKConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000446:	f000 f961 	bl	800070c <Error_Handler>
  }
}
 800044a:	bf00      	nop
 800044c:	3778      	adds	r7, #120	@ 0x78
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	00020010 	.word	0x00020010

08000458 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800045c:	4b1b      	ldr	r3, [pc, #108]	@ (80004cc <MX_I2C1_Init+0x74>)
 800045e:	4a1c      	ldr	r2, [pc, #112]	@ (80004d0 <MX_I2C1_Init+0x78>)
 8000460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000462:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <MX_I2C1_Init+0x74>)
 8000464:	4a1b      	ldr	r2, [pc, #108]	@ (80004d4 <MX_I2C1_Init+0x7c>)
 8000466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <MX_I2C1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800046e:	4b17      	ldr	r3, [pc, #92]	@ (80004cc <MX_I2C1_Init+0x74>)
 8000470:	2201      	movs	r2, #1
 8000472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000474:	4b15      	ldr	r3, [pc, #84]	@ (80004cc <MX_I2C1_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800047a:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <MX_I2C1_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000480:	4b12      	ldr	r3, [pc, #72]	@ (80004cc <MX_I2C1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000486:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <MX_I2C1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800048c:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <MX_I2C1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000492:	480e      	ldr	r0, [pc, #56]	@ (80004cc <MX_I2C1_Init+0x74>)
 8000494:	f001 f93e 	bl	8001714 <HAL_I2C_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800049e:	f000 f935 	bl	800070c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004a2:	2100      	movs	r1, #0
 80004a4:	4809      	ldr	r0, [pc, #36]	@ (80004cc <MX_I2C1_Init+0x74>)
 80004a6:	f001 fd53 	bl	8001f50 <HAL_I2CEx_ConfigAnalogFilter>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004b0:	f000 f92c 	bl	800070c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004b4:	2100      	movs	r1, #0
 80004b6:	4805      	ldr	r0, [pc, #20]	@ (80004cc <MX_I2C1_Init+0x74>)
 80004b8:	f001 fd95 	bl	8001fe6 <HAL_I2CEx_ConfigDigitalFilter>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004c2:	f000 f923 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	2000002c 	.word	0x2000002c
 80004d0:	40005400 	.word	0x40005400
 80004d4:	2000090e 	.word	0x2000090e

080004d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004dc:	4b1b      	ldr	r3, [pc, #108]	@ (800054c <MX_SPI1_Init+0x74>)
 80004de:	4a1c      	ldr	r2, [pc, #112]	@ (8000550 <MX_SPI1_Init+0x78>)
 80004e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004e2:	4b1a      	ldr	r3, [pc, #104]	@ (800054c <MX_SPI1_Init+0x74>)
 80004e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004ea:	4b18      	ldr	r3, [pc, #96]	@ (800054c <MX_SPI1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004f0:	4b16      	ldr	r3, [pc, #88]	@ (800054c <MX_SPI1_Init+0x74>)
 80004f2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80004f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004f8:	4b14      	ldr	r3, [pc, #80]	@ (800054c <MX_SPI1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004fe:	4b13      	ldr	r3, [pc, #76]	@ (800054c <MX_SPI1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000504:	4b11      	ldr	r3, [pc, #68]	@ (800054c <MX_SPI1_Init+0x74>)
 8000506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800050a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800050c:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <MX_SPI1_Init+0x74>)
 800050e:	2208      	movs	r2, #8
 8000510:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000512:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <MX_SPI1_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000518:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <MX_SPI1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800051e:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <MX_SPI1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000524:	4b09      	ldr	r3, [pc, #36]	@ (800054c <MX_SPI1_Init+0x74>)
 8000526:	2207      	movs	r2, #7
 8000528:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800052a:	4b08      	ldr	r3, [pc, #32]	@ (800054c <MX_SPI1_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <MX_SPI1_Init+0x74>)
 8000532:	2208      	movs	r2, #8
 8000534:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000536:	4805      	ldr	r0, [pc, #20]	@ (800054c <MX_SPI1_Init+0x74>)
 8000538:	f003 fa36 	bl	80039a8 <HAL_SPI_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000542:	f000 f8e3 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000080 	.word	0x20000080
 8000550:	40013000 	.word	0x40013000

08000554 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000558:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_UART5_Init+0x58>)
 800055a:	4a15      	ldr	r2, [pc, #84]	@ (80005b0 <MX_UART5_Init+0x5c>)
 800055c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800055e:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <MX_UART5_Init+0x58>)
 8000560:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000564:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000566:	4b11      	ldr	r3, [pc, #68]	@ (80005ac <MX_UART5_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <MX_UART5_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <MX_UART5_Init+0x58>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <MX_UART5_Init+0x58>)
 800057a:	220c      	movs	r2, #12
 800057c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057e:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <MX_UART5_Init+0x58>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000584:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <MX_UART5_Init+0x58>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800058a:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <MX_UART5_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <MX_UART5_Init+0x58>)
 8000592:	2200      	movs	r2, #0
 8000594:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000596:	4805      	ldr	r0, [pc, #20]	@ (80005ac <MX_UART5_Init+0x58>)
 8000598:	f003 fab1 	bl	8003afe <HAL_UART_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80005a2:	f000 f8b3 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000e4 	.word	0x200000e4
 80005b0:	40005000 	.word	0x40005000

080005b4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005b8:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <MX_USB_PCD_Init+0x3c>)
 80005ba:	4a0e      	ldr	r2, [pc, #56]	@ (80005f4 <MX_USB_PCD_Init+0x40>)
 80005bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80005be:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <MX_USB_PCD_Init+0x3c>)
 80005c0:	2208      	movs	r2, #8
 80005c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	@ (80005f0 <MX_USB_PCD_Init+0x3c>)
 80005c6:	2202      	movs	r2, #2
 80005c8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <MX_USB_PCD_Init+0x3c>)
 80005cc:	2202      	movs	r2, #2
 80005ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <MX_USB_PCD_Init+0x3c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <MX_USB_PCD_Init+0x3c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80005dc:	4804      	ldr	r0, [pc, #16]	@ (80005f0 <MX_USB_PCD_Init+0x3c>)
 80005de:	f001 fd4e 	bl	800207e <HAL_PCD_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80005e8:	f000 f890 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000016c 	.word	0x2000016c
 80005f4:	40005c00 	.word	0x40005c00

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	@ 0x30
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800060e:	4b3d      	ldr	r3, [pc, #244]	@ (8000704 <MX_GPIO_Init+0x10c>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a3c      	ldr	r2, [pc, #240]	@ (8000704 <MX_GPIO_Init+0x10c>)
 8000614:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <MX_GPIO_Init+0x10c>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000622:	61bb      	str	r3, [r7, #24]
 8000624:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b37      	ldr	r3, [pc, #220]	@ (8000704 <MX_GPIO_Init+0x10c>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a36      	ldr	r2, [pc, #216]	@ (8000704 <MX_GPIO_Init+0x10c>)
 800062c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <MX_GPIO_Init+0x10c>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063e:	4b31      	ldr	r3, [pc, #196]	@ (8000704 <MX_GPIO_Init+0x10c>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a30      	ldr	r2, [pc, #192]	@ (8000704 <MX_GPIO_Init+0x10c>)
 8000644:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b2e      	ldr	r3, [pc, #184]	@ (8000704 <MX_GPIO_Init+0x10c>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <MX_GPIO_Init+0x10c>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a2a      	ldr	r2, [pc, #168]	@ (8000704 <MX_GPIO_Init+0x10c>)
 800065c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <MX_GPIO_Init+0x10c>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <MX_GPIO_Init+0x10c>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a24      	ldr	r2, [pc, #144]	@ (8000704 <MX_GPIO_Init+0x10c>)
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <MX_GPIO_Init+0x10c>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <MX_GPIO_Init+0x10c>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a1e      	ldr	r2, [pc, #120]	@ (8000704 <MX_GPIO_Init+0x10c>)
 800068c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <MX_GPIO_Init+0x10c>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800069e:	2200      	movs	r2, #0
 80006a0:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80006a4:	4818      	ldr	r0, [pc, #96]	@ (8000708 <MX_GPIO_Init+0x110>)
 80006a6:	f001 f81d 	bl	80016e4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80006aa:	2337      	movs	r3, #55	@ 0x37
 80006ac:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4812      	ldr	r0, [pc, #72]	@ (8000708 <MX_GPIO_Init+0x110>)
 80006c0:	f000 fe96 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006c4:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80006c8:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	480a      	ldr	r0, [pc, #40]	@ (8000708 <MX_GPIO_Init+0x110>)
 80006de:	f000 fe87 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f8:	f000 fe7a 	bl	80013f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006fc:	bf00      	nop
 80006fe:	3730      	adds	r7, #48	@ 0x30
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	48001000 	.word	0x48001000

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <Error_Handler+0x8>

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <HAL_MspInit+0x44>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a0e      	ldr	r2, [pc, #56]	@ (800075c <HAL_MspInit+0x44>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <HAL_MspInit+0x44>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <HAL_MspInit+0x44>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a08      	ldr	r2, [pc, #32]	@ (800075c <HAL_MspInit+0x44>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <HAL_MspInit+0x44>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800074e:	2007      	movs	r0, #7
 8000750:	f000 fd90 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a17      	ldr	r2, [pc, #92]	@ (80007dc <HAL_I2C_MspInit+0x7c>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d127      	bne.n	80007d2 <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_I2C_MspInit+0x80>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a16      	ldr	r2, [pc, #88]	@ (80007e0 <HAL_I2C_MspInit+0x80>)
 8000788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <HAL_I2C_MspInit+0x80>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800079a:	23c0      	movs	r3, #192	@ 0xc0
 800079c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079e:	2312      	movs	r3, #18
 80007a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007aa:	2304      	movs	r3, #4
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	480b      	ldr	r0, [pc, #44]	@ (80007e4 <HAL_I2C_MspInit+0x84>)
 80007b6:	f000 fe1b 	bl	80013f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <HAL_I2C_MspInit+0x80>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <HAL_I2C_MspInit+0x80>)
 80007c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_I2C_MspInit+0x80>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	@ 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40005400 	.word	0x40005400
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000400 	.word	0x48000400

080007e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a17      	ldr	r2, [pc, #92]	@ (8000864 <HAL_SPI_MspInit+0x7c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d128      	bne.n	800085c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800080a:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <HAL_SPI_MspInit+0x80>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a16      	ldr	r2, [pc, #88]	@ (8000868 <HAL_SPI_MspInit+0x80>)
 8000810:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <HAL_SPI_MspInit+0x80>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <HAL_SPI_MspInit+0x80>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a10      	ldr	r2, [pc, #64]	@ (8000868 <HAL_SPI_MspInit+0x80>)
 8000828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <HAL_SPI_MspInit+0x80>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800083a:	23e0      	movs	r3, #224	@ 0xe0
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800084a:	2305      	movs	r3, #5
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000858:	f000 fdca 	bl	80013f0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	@ 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40013000 	.word	0x40013000
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	@ 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a29      	ldr	r2, [pc, #164]	@ (8000930 <HAL_UART_MspInit+0xc4>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d14c      	bne.n	8000928 <HAL_UART_MspInit+0xbc>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800088e:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <HAL_UART_MspInit+0xc8>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a28      	ldr	r2, [pc, #160]	@ (8000934 <HAL_UART_MspInit+0xc8>)
 8000894:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <HAL_UART_MspInit+0xc8>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b23      	ldr	r3, [pc, #140]	@ (8000934 <HAL_UART_MspInit+0xc8>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a22      	ldr	r2, [pc, #136]	@ (8000934 <HAL_UART_MspInit+0xc8>)
 80008ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <HAL_UART_MspInit+0xc8>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <HAL_UART_MspInit+0xc8>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <HAL_UART_MspInit+0xc8>)
 80008c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <HAL_UART_MspInit+0xc8>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80008e8:	2305      	movs	r3, #5
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4811      	ldr	r0, [pc, #68]	@ (8000938 <HAL_UART_MspInit+0xcc>)
 80008f4:	f000 fd7c 	bl	80013f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008f8:	2304      	movs	r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000908:	2305      	movs	r3, #5
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	480a      	ldr	r0, [pc, #40]	@ (800093c <HAL_UART_MspInit+0xd0>)
 8000914:	f000 fd6c 	bl	80013f0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2035      	movs	r0, #53	@ 0x35
 800091e:	f000 fcb4 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000922:	2035      	movs	r0, #53	@ 0x35
 8000924:	f000 fccd 	bl	80012c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	@ 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40005000 	.word	0x40005000
 8000934:	40021000 	.word	0x40021000
 8000938:	48000800 	.word	0x48000800
 800093c:	48000c00 	.word	0x48000c00

08000940 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	@ 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a18      	ldr	r2, [pc, #96]	@ (80009c0 <HAL_PCD_MspInit+0x80>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d129      	bne.n	80009b6 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <HAL_PCD_MspInit+0x84>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a17      	ldr	r2, [pc, #92]	@ (80009c4 <HAL_PCD_MspInit+0x84>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <HAL_PCD_MspInit+0x84>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800097a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800098c:	230e      	movs	r3, #14
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099a:	f000 fd29 	bl	80013f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <HAL_PCD_MspInit+0x84>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a08      	ldr	r2, [pc, #32]	@ (80009c4 <HAL_PCD_MspInit+0x84>)
 80009a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_PCD_MspInit+0x84>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	@ 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40005c00 	.word	0x40005c00
 80009c4:	40021000 	.word	0x40021000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <NMI_Handler+0x4>

080009d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <MemManage_Handler+0x4>

080009e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <UsageFault_Handler+0x4>

080009f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1e:	f000 fb15 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <UART5_IRQHandler+0x10>)
 8000a2e:	f003 f8f9 	bl	8003c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000e4 	.word	0x200000e4

08000a3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a98 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a64:	f7ff ffea 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	@ (8000aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa4 <LoopForever+0xe>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	@ (8000aac <LoopForever+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f004 fa9d 	bl	8004fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a92:	f7ff fc59 	bl	8000348 <main>

08000a96 <LoopForever>:

LoopForever:
    b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a98:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000aa4:	0800657c 	.word	0x0800657c
  ldr r2, =_sbss
 8000aa8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000aac:	2000086c 	.word	0x2000086c

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>

08000ab2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af04      	add	r7, sp, #16
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	9302      	str	r3, [sp, #8]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	2200      	movs	r2, #0
 8000adc:	2178      	movs	r1, #120	@ 0x78
 8000ade:	4803      	ldr	r0, [pc, #12]	@ (8000aec <ssd1306_WriteCommand+0x2c>)
 8000ae0:	f000 feb4 	bl	800184c <HAL_I2C_Mem_Write>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000002c 	.word	0x2000002c

08000af0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af04      	add	r7, sp, #16
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	f04f 32ff 	mov.w	r2, #4294967295
 8000b02:	9202      	str	r2, [sp, #8]
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	2240      	movs	r2, #64	@ 0x40
 8000b0e:	2178      	movs	r1, #120	@ 0x78
 8000b10:	4803      	ldr	r0, [pc, #12]	@ (8000b20 <ssd1306_WriteData+0x30>)
 8000b12:	f000 fe9b 	bl	800184c <HAL_I2C_Mem_Write>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000002c 	.word	0x2000002c

08000b24 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b28:	f7ff ffc3 	bl	8000ab2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b2c:	2064      	movs	r0, #100	@ 0x64
 8000b2e:	f000 faad 	bl	800108c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 fa26 	bl	8000f84 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b38:	2020      	movs	r0, #32
 8000b3a:	f7ff ffc1 	bl	8000ac0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff ffbe 	bl	8000ac0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b44:	20b0      	movs	r0, #176	@ 0xb0
 8000b46:	f7ff ffbb 	bl	8000ac0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b4a:	20c8      	movs	r0, #200	@ 0xc8
 8000b4c:	f7ff ffb8 	bl	8000ac0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff ffb5 	bl	8000ac0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000b56:	2010      	movs	r0, #16
 8000b58:	f7ff ffb2 	bl	8000ac0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000b5c:	2040      	movs	r0, #64	@ 0x40
 8000b5e:	f7ff ffaf 	bl	8000ac0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000b62:	20ff      	movs	r0, #255	@ 0xff
 8000b64:	f000 f9fa 	bl	8000f5c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000b68:	20a1      	movs	r0, #161	@ 0xa1
 8000b6a:	f7ff ffa9 	bl	8000ac0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000b6e:	20a6      	movs	r0, #166	@ 0xa6
 8000b70:	f7ff ffa6 	bl	8000ac0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000b74:	20a8      	movs	r0, #168	@ 0xa8
 8000b76:	f7ff ffa3 	bl	8000ac0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000b7a:	203f      	movs	r0, #63	@ 0x3f
 8000b7c:	f7ff ffa0 	bl	8000ac0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b80:	20a4      	movs	r0, #164	@ 0xa4
 8000b82:	f7ff ff9d 	bl	8000ac0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000b86:	20d3      	movs	r0, #211	@ 0xd3
 8000b88:	f7ff ff9a 	bl	8000ac0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f7ff ff97 	bl	8000ac0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b92:	20d5      	movs	r0, #213	@ 0xd5
 8000b94:	f7ff ff94 	bl	8000ac0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000b98:	20f0      	movs	r0, #240	@ 0xf0
 8000b9a:	f7ff ff91 	bl	8000ac0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000b9e:	20d9      	movs	r0, #217	@ 0xd9
 8000ba0:	f7ff ff8e 	bl	8000ac0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000ba4:	2022      	movs	r0, #34	@ 0x22
 8000ba6:	f7ff ff8b 	bl	8000ac0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000baa:	20da      	movs	r0, #218	@ 0xda
 8000bac:	f7ff ff88 	bl	8000ac0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000bb0:	2012      	movs	r0, #18
 8000bb2:	f7ff ff85 	bl	8000ac0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000bb6:	20db      	movs	r0, #219	@ 0xdb
 8000bb8:	f7ff ff82 	bl	8000ac0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000bbc:	2020      	movs	r0, #32
 8000bbe:	f7ff ff7f 	bl	8000ac0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000bc2:	208d      	movs	r0, #141	@ 0x8d
 8000bc4:	f7ff ff7c 	bl	8000ac0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000bc8:	2014      	movs	r0, #20
 8000bca:	f7ff ff79 	bl	8000ac0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 f9d8 	bl	8000f84 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 f80f 	bl	8000bf8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000bda:	f000 f825 	bl	8000c28 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000bde:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <ssd1306_Init+0xd0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000be4:	4b03      	ldr	r3, [pc, #12]	@ (8000bf4 <ssd1306_Init+0xd0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000bea:	4b02      	ldr	r3, [pc, #8]	@ (8000bf4 <ssd1306_Init+0xd0>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	711a      	strb	r2, [r3, #4]
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000860 	.word	0x20000860

08000bf8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d101      	bne.n	8000c0c <ssd1306_Fill+0x14>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e000      	b.n	8000c0e <ssd1306_Fill+0x16>
 8000c0c:	23ff      	movs	r3, #255	@ 0xff
 8000c0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c12:	4619      	mov	r1, r3
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <ssd1306_Fill+0x2c>)
 8000c16:	f004 f9d0 	bl	8004fba <memset>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000460 	.word	0x20000460

08000c28 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c2e:	2300      	movs	r3, #0
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	e016      	b.n	8000c62 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	3b50      	subs	r3, #80	@ 0x50
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff40 	bl	8000ac0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f7ff ff3d 	bl	8000ac0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000c46:	2010      	movs	r0, #16
 8000c48:	f7ff ff3a 	bl	8000ac0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	01db      	lsls	r3, r3, #7
 8000c50:	4a08      	ldr	r2, [pc, #32]	@ (8000c74 <ssd1306_UpdateScreen+0x4c>)
 8000c52:	4413      	add	r3, r2
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff4a 	bl	8000af0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	d9e5      	bls.n	8000c34 <ssd1306_UpdateScreen+0xc>
    }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000460 	.word	0x20000460

08000c78 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
 8000c82:	460b      	mov	r3, r1
 8000c84:	71bb      	strb	r3, [r7, #6]
 8000c86:	4613      	mov	r3, r2
 8000c88:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db3d      	blt.n	8000d0e <ssd1306_DrawPixel+0x96>
 8000c92:	79bb      	ldrb	r3, [r7, #6]
 8000c94:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c96:	d83a      	bhi.n	8000d0e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000c98:	797b      	ldrb	r3, [r7, #5]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d11a      	bne.n	8000cd4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c9e:	79fa      	ldrb	r2, [r7, #7]
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	08db      	lsrs	r3, r3, #3
 8000ca4:	b2d8      	uxtb	r0, r3
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	01db      	lsls	r3, r3, #7
 8000caa:	4413      	add	r3, r2
 8000cac:	4a1b      	ldr	r2, [pc, #108]	@ (8000d1c <ssd1306_DrawPixel+0xa4>)
 8000cae:	5cd3      	ldrb	r3, [r2, r3]
 8000cb0:	b25a      	sxtb	r2, r3
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b259      	sxtb	r1, r3
 8000cc4:	79fa      	ldrb	r2, [r7, #7]
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	01db      	lsls	r3, r3, #7
 8000cca:	4413      	add	r3, r2
 8000ccc:	b2c9      	uxtb	r1, r1
 8000cce:	4a13      	ldr	r2, [pc, #76]	@ (8000d1c <ssd1306_DrawPixel+0xa4>)
 8000cd0:	54d1      	strb	r1, [r2, r3]
 8000cd2:	e01d      	b.n	8000d10 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000cd4:	79fa      	ldrb	r2, [r7, #7]
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	08db      	lsrs	r3, r3, #3
 8000cda:	b2d8      	uxtb	r0, r3
 8000cdc:	4603      	mov	r3, r0
 8000cde:	01db      	lsls	r3, r3, #7
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d1c <ssd1306_DrawPixel+0xa4>)
 8000ce4:	5cd3      	ldrb	r3, [r2, r3]
 8000ce6:	b25a      	sxtb	r2, r3
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	2101      	movs	r1, #1
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	b259      	sxtb	r1, r3
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	4603      	mov	r3, r0
 8000d02:	01db      	lsls	r3, r3, #7
 8000d04:	4413      	add	r3, r2
 8000d06:	b2c9      	uxtb	r1, r1
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <ssd1306_DrawPixel+0xa4>)
 8000d0a:	54d1      	strb	r1, [r2, r3]
 8000d0c:	e000      	b.n	8000d10 <ssd1306_DrawPixel+0x98>
        return;
 8000d0e:	bf00      	nop
    }
}
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000460 	.word	0x20000460

08000d20 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b089      	sub	sp, #36	@ 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4604      	mov	r4, r0
 8000d28:	4638      	mov	r0, r7
 8000d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000d2e:	4623      	mov	r3, r4
 8000d30:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	2b1f      	cmp	r3, #31
 8000d36:	d902      	bls.n	8000d3e <ssd1306_WriteChar+0x1e>
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	2b7e      	cmp	r3, #126	@ 0x7e
 8000d3c:	d901      	bls.n	8000d42 <ssd1306_WriteChar+0x22>
        return 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e079      	b.n	8000e36 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d005      	beq.n	8000d54 <ssd1306_WriteChar+0x34>
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	3b20      	subs	r3, #32
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	e000      	b.n	8000d56 <ssd1306_WriteChar+0x36>
 8000d54:	783b      	ldrb	r3, [r7, #0]
 8000d56:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000d58:	4b39      	ldr	r3, [pc, #228]	@ (8000e40 <ssd1306_WriteChar+0x120>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	4413      	add	r3, r2
 8000d62:	2b80      	cmp	r3, #128	@ 0x80
 8000d64:	dc06      	bgt.n	8000d74 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000d66:	4b36      	ldr	r3, [pc, #216]	@ (8000e40 <ssd1306_WriteChar+0x120>)
 8000d68:	885b      	ldrh	r3, [r3, #2]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	787b      	ldrb	r3, [r7, #1]
 8000d6e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000d70:	2b40      	cmp	r3, #64	@ 0x40
 8000d72:	dd01      	ble.n	8000d78 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	e05e      	b.n	8000e36 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
 8000d7c:	e04d      	b.n	8000e1a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	3b20      	subs	r3, #32
 8000d84:	7879      	ldrb	r1, [r7, #1]
 8000d86:	fb01 f303 	mul.w	r3, r1, r3
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	440b      	add	r3, r1
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	e036      	b.n	8000e0c <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d013      	beq.n	8000dd6 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000dae:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <ssd1306_WriteChar+0x120>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4413      	add	r3, r2
 8000dba:	b2d8      	uxtb	r0, r3
 8000dbc:	4b20      	ldr	r3, [pc, #128]	@ (8000e40 <ssd1306_WriteChar+0x120>)
 8000dbe:	885b      	ldrh	r3, [r3, #2]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f7ff ff52 	bl	8000c78 <ssd1306_DrawPixel>
 8000dd4:	e017      	b.n	8000e06 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <ssd1306_WriteChar+0x120>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4413      	add	r3, r2
 8000de2:	b2d8      	uxtb	r0, r3
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <ssd1306_WriteChar+0x120>)
 8000de6:	885b      	ldrh	r3, [r3, #2]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b2d9      	uxtb	r1, r3
 8000df2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf0c      	ite	eq
 8000dfa:	2301      	moveq	r3, #1
 8000dfc:	2300      	movne	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	f7ff ff39 	bl	8000c78 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3c4      	bcc.n	8000d9e <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	3301      	adds	r3, #1
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	787b      	ldrb	r3, [r7, #1]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d3ac      	bcc.n	8000d7e <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <ssd1306_WriteChar+0x120>)
 8000e26:	881a      	ldrh	r2, [r3, #0]
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <ssd1306_WriteChar+0x120>)
 8000e32:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd90      	pop	{r4, r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000860 	.word	0x20000860

08000e44 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000e52:	e013      	b.n	8000e7c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	7818      	ldrb	r0, [r3, #0]
 8000e58:	7e3b      	ldrb	r3, [r7, #24]
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e60:	f7ff ff5e 	bl	8000d20 <ssd1306_WriteChar>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d002      	beq.n	8000e76 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	e008      	b.n	8000e88 <ssd1306_WriteString+0x44>
        }
        str++;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1e7      	bne.n	8000e54 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	781b      	ldrb	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	460a      	mov	r2, r1
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <ssd1306_SetCursor+0x2c>)
 8000ea6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b03      	ldr	r3, [pc, #12]	@ (8000ebc <ssd1306_SetCursor+0x2c>)
 8000eae:	805a      	strh	r2, [r3, #2]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	20000860 	.word	0x20000860

08000ec0 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	4611      	mov	r1, r2
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4623      	mov	r3, r4
 8000ed0:	71fb      	strb	r3, [r7, #7]
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71bb      	strb	r3, [r7, #6]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	717b      	strb	r3, [r7, #5]
 8000eda:	4613      	mov	r3, r2
 8000edc:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	797b      	ldrb	r3, [r7, #5]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	bf28      	it	cs
 8000ee6:	4613      	movcs	r3, r2
 8000ee8:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8000eea:	797a      	ldrb	r2, [r7, #5]
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	bf38      	it	cc
 8000ef2:	4613      	movcc	r3, r2
 8000ef4:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8000ef6:	79ba      	ldrb	r2, [r7, #6]
 8000ef8:	793b      	ldrb	r3, [r7, #4]
 8000efa:	4293      	cmp	r3, r2
 8000efc:	bf28      	it	cs
 8000efe:	4613      	movcs	r3, r2
 8000f00:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8000f02:	793a      	ldrb	r2, [r7, #4]
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	4293      	cmp	r3, r2
 8000f08:	bf38      	it	cc
 8000f0a:	4613      	movcc	r3, r2
 8000f0c:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000f0e:	7afb      	ldrb	r3, [r7, #11]
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e017      	b.n	8000f44 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000f14:	7b7b      	ldrb	r3, [r7, #13]
 8000f16:	73bb      	strb	r3, [r7, #14]
 8000f18:	e009      	b.n	8000f2e <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8000f1a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f1e:	7bf9      	ldrb	r1, [r7, #15]
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fea8 	bl	8000c78 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73bb      	strb	r3, [r7, #14]
 8000f2e:	7bba      	ldrb	r2, [r7, #14]
 8000f30:	7b3b      	ldrb	r3, [r7, #12]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d803      	bhi.n	8000f3e <ssd1306_FillRectangle+0x7e>
 8000f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	daed      	bge.n	8000f1a <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	3301      	adds	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	7abb      	ldrb	r3, [r7, #10]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d803      	bhi.n	8000f54 <ssd1306_FillRectangle+0x94>
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f50:	d9e0      	bls.n	8000f14 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
}
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}

08000f5c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000f66:	2381      	movs	r3, #129	@ 0x81
 8000f68:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fda7 	bl	8000ac0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fda3 	bl	8000ac0 <ssd1306_WriteCommand>
}
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000f94:	23af      	movs	r3, #175	@ 0xaf
 8000f96:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <ssd1306_SetDisplayOn+0x38>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	715a      	strb	r2, [r3, #5]
 8000f9e:	e004      	b.n	8000faa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000fa0:	23ae      	movs	r3, #174	@ 0xae
 8000fa2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <ssd1306_SetDisplayOn+0x38>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fd87 	bl	8000ac0 <ssd1306_WriteCommand>
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000860 	.word	0x20000860

08000fc0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <HAL_Init+0x28>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	@ (8000fe8 <HAL_Init+0x28>)
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f94f 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fb9c 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40022000 	.word	0x40022000

08000fec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f967 	bl	80012de <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f92f 	bl	800128a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000004 	.word	0x20000004
 8001044:	2000000c 	.word	0x2000000c
 8001048:	20000008 	.word	0x20000008

0800104c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	2000000c 	.word	0x2000000c
 8001070:	20000868 	.word	0x20000868

08001074 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;  
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000868 	.word	0x20000868

0800108c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_Delay+0x44>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000000c 	.word	0x2000000c

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4907      	ldr	r1, [pc, #28]	@ (8001170 <__NVIC_EnableIRQ+0x38>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	@ (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	@ (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	@ 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	@ 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff8e 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff29 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff3e 	bl	800111c <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff8e 	bl	80011c8 <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5d 	bl	8001174 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff31 	bl	8001138 <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffa2 	bl	8001230 <SysTick_Config>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e02e      	b.n	8001366 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800130e:	2b02      	cmp	r3, #2
 8001310:	d008      	beq.n	8001324 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2204      	movs	r2, #4
 8001316:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e020      	b.n	8001366 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 020e 	bic.w	r2, r2, #14
 8001332:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0201 	bic.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800134c:	2101      	movs	r1, #1
 800134e:	fa01 f202 	lsl.w	r2, r1, r2
 8001352:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001384:	2b02      	cmp	r3, #2
 8001386:	d005      	beq.n	8001394 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2204      	movs	r2, #4
 800138c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e027      	b.n	80013e4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 020e 	bic.w	r2, r2, #14
 80013a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013bc:	2101      	movs	r1, #1
 80013be:	fa01 f202 	lsl.w	r2, r1, r2
 80013c2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	4798      	blx	r3
    }
  }
  return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	e154      	b.n	80016aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8146 	beq.w	80016a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d005      	beq.n	8001430 <HAL_GPIO_Init+0x40>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d130      	bne.n	8001492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001466:	2201      	movs	r2, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	f003 0201 	and.w	r2, r3, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b03      	cmp	r3, #3
 800149c:	d017      	beq.n	80014ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d123      	bne.n	8001522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	08da      	lsrs	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3208      	adds	r2, #8
 80014e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	6939      	ldr	r1, [r7, #16]
 800151e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0203 	and.w	r2, r3, #3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80a0 	beq.w	80016a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001564:	4b58      	ldr	r3, [pc, #352]	@ (80016c8 <HAL_GPIO_Init+0x2d8>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a57      	ldr	r2, [pc, #348]	@ (80016c8 <HAL_GPIO_Init+0x2d8>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b55      	ldr	r3, [pc, #340]	@ (80016c8 <HAL_GPIO_Init+0x2d8>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800157c:	4a53      	ldr	r2, [pc, #332]	@ (80016cc <HAL_GPIO_Init+0x2dc>)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015a6:	d019      	beq.n	80015dc <HAL_GPIO_Init+0x1ec>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a49      	ldr	r2, [pc, #292]	@ (80016d0 <HAL_GPIO_Init+0x2e0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d013      	beq.n	80015d8 <HAL_GPIO_Init+0x1e8>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a48      	ldr	r2, [pc, #288]	@ (80016d4 <HAL_GPIO_Init+0x2e4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d00d      	beq.n	80015d4 <HAL_GPIO_Init+0x1e4>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a47      	ldr	r2, [pc, #284]	@ (80016d8 <HAL_GPIO_Init+0x2e8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d007      	beq.n	80015d0 <HAL_GPIO_Init+0x1e0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a46      	ldr	r2, [pc, #280]	@ (80016dc <HAL_GPIO_Init+0x2ec>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d101      	bne.n	80015cc <HAL_GPIO_Init+0x1dc>
 80015c8:	2304      	movs	r3, #4
 80015ca:	e008      	b.n	80015de <HAL_GPIO_Init+0x1ee>
 80015cc:	2305      	movs	r3, #5
 80015ce:	e006      	b.n	80015de <HAL_GPIO_Init+0x1ee>
 80015d0:	2303      	movs	r3, #3
 80015d2:	e004      	b.n	80015de <HAL_GPIO_Init+0x1ee>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e002      	b.n	80015de <HAL_GPIO_Init+0x1ee>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_GPIO_Init+0x1ee>
 80015dc:	2300      	movs	r3, #0
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	f002 0203 	and.w	r2, r2, #3
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	4093      	lsls	r3, r2
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015ee:	4937      	ldr	r1, [pc, #220]	@ (80016cc <HAL_GPIO_Init+0x2dc>)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fc:	4b38      	ldr	r3, [pc, #224]	@ (80016e0 <HAL_GPIO_Init+0x2f0>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001620:	4a2f      	ldr	r2, [pc, #188]	@ (80016e0 <HAL_GPIO_Init+0x2f0>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001626:	4b2e      	ldr	r3, [pc, #184]	@ (80016e0 <HAL_GPIO_Init+0x2f0>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800164a:	4a25      	ldr	r2, [pc, #148]	@ (80016e0 <HAL_GPIO_Init+0x2f0>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001650:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <HAL_GPIO_Init+0x2f0>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001674:	4a1a      	ldr	r2, [pc, #104]	@ (80016e0 <HAL_GPIO_Init+0x2f0>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167a:	4b19      	ldr	r3, [pc, #100]	@ (80016e0 <HAL_GPIO_Init+0x2f0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800169e:	4a10      	ldr	r2, [pc, #64]	@ (80016e0 <HAL_GPIO_Init+0x2f0>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f47f aea3 	bne.w	8001400 <HAL_GPIO_Init+0x10>
  }
}
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	48000400 	.word	0x48000400
 80016d4:	48000800 	.word	0x48000800
 80016d8:	48000c00 	.word	0x48000c00
 80016dc:	48001000 	.word	0x48001000
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001700:	e002      	b.n	8001708 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e08d      	b.n	8001842 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d106      	bne.n	8001740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff f810 	bl	8000760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2224      	movs	r2, #36	@ 0x24
 8001744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001764:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001774:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e006      	b.n	800179c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800179a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d108      	bne.n	80017b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	e007      	b.n	80017c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69d9      	ldr	r1, [r3, #28]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1a      	ldr	r2, [r3, #32]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2220      	movs	r2, #32
 800182e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af02      	add	r7, sp, #8
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4603      	mov	r3, r0
 800185c:	817b      	strh	r3, [r7, #10]
 800185e:	460b      	mov	r3, r1
 8001860:	813b      	strh	r3, [r7, #8]
 8001862:	4613      	mov	r3, r2
 8001864:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b20      	cmp	r3, #32
 8001870:	f040 80f9 	bne.w	8001a66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_I2C_Mem_Write+0x34>
 800187a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001886:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0ed      	b.n	8001a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_I2C_Mem_Write+0x4e>
 8001896:	2302      	movs	r3, #2
 8001898:	e0e6      	b.n	8001a68 <HAL_I2C_Mem_Write+0x21c>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018a2:	f7ff fbe7 	bl	8001074 <HAL_GetTick>
 80018a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2319      	movs	r3, #25
 80018ae:	2201      	movs	r2, #1
 80018b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f955 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0d1      	b.n	8001a68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2221      	movs	r2, #33	@ 0x21
 80018c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2240      	movs	r2, #64	@ 0x40
 80018d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6a3a      	ldr	r2, [r7, #32]
 80018de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80018e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018ec:	88f8      	ldrh	r0, [r7, #6]
 80018ee:	893a      	ldrh	r2, [r7, #8]
 80018f0:	8979      	ldrh	r1, [r7, #10]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	4603      	mov	r3, r0
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f8b9 	bl	8001a74 <I2C_RequestMemoryWrite>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0a9      	b.n	8001a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001918:	b29b      	uxth	r3, r3
 800191a:	2bff      	cmp	r3, #255	@ 0xff
 800191c:	d90e      	bls.n	800193c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	22ff      	movs	r2, #255	@ 0xff
 8001922:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001928:	b2da      	uxtb	r2, r3
 800192a:	8979      	ldrh	r1, [r7, #10]
 800192c:	2300      	movs	r3, #0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 fad9 	bl	8001eec <I2C_TransferConfig>
 800193a:	e00f      	b.n	800195c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800194a:	b2da      	uxtb	r2, r3
 800194c:	8979      	ldrh	r1, [r7, #10]
 800194e:	2300      	movs	r3, #0
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fac8 	bl	8001eec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 f958 	bl	8001c16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e07b      	b.n	8001a68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198a:	b29b      	uxth	r3, r3
 800198c:	3b01      	subs	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d034      	beq.n	8001a14 <HAL_I2C_Mem_Write+0x1c8>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d130      	bne.n	8001a14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b8:	2200      	movs	r2, #0
 80019ba:	2180      	movs	r1, #128	@ 0x80
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 f8d1 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e04d      	b.n	8001a68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2bff      	cmp	r3, #255	@ 0xff
 80019d4:	d90e      	bls.n	80019f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	22ff      	movs	r2, #255	@ 0xff
 80019da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	8979      	ldrh	r1, [r7, #10]
 80019e4:	2300      	movs	r3, #0
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fa7d 	bl	8001eec <I2C_TransferConfig>
 80019f2:	e00f      	b.n	8001a14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	8979      	ldrh	r1, [r7, #10]
 8001a06:	2300      	movs	r3, #0
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 fa6c 	bl	8001eec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d19e      	bne.n	800195c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f93e 	bl	8001ca4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e01a      	b.n	8001a68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2220      	movs	r2, #32
 8001a38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <HAL_I2C_Mem_Write+0x224>)
 8001a46:	400b      	ands	r3, r1
 8001a48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a66:	2302      	movs	r3, #2
  }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	fe00e800 	.word	0xfe00e800

08001a74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	817b      	strh	r3, [r7, #10]
 8001a86:	460b      	mov	r3, r1
 8001a88:	813b      	strh	r3, [r7, #8]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	8979      	ldrh	r1, [r7, #10]
 8001a94:	4b20      	ldr	r3, [pc, #128]	@ (8001b18 <I2C_RequestMemoryWrite+0xa4>)
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 fa25 	bl	8001eec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	69b9      	ldr	r1, [r7, #24]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f8b5 	bl	8001c16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e02c      	b.n	8001b10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001abc:	893b      	ldrh	r3, [r7, #8]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ac6:	e015      	b.n	8001af4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ac8:	893b      	ldrh	r3, [r7, #8]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	69b9      	ldr	r1, [r7, #24]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f89b 	bl	8001c16 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e012      	b.n	8001b10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aea:	893b      	ldrh	r3, [r7, #8]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2200      	movs	r2, #0
 8001afc:	2180      	movs	r1, #128	@ 0x80
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f830 	bl	8001b64 <I2C_WaitOnFlagUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	80002000 	.word	0x80002000

08001b1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d103      	bne.n	8001b3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d007      	beq.n	8001b58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	619a      	str	r2, [r3, #24]
  }
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b74:	e03b      	b.n	8001bee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	6839      	ldr	r1, [r7, #0]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f8d6 	bl	8001d2c <I2C_IsErrorOccurred>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e041      	b.n	8001c0e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d02d      	beq.n	8001bee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b92:	f7ff fa6f 	bl	8001074 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d302      	bcc.n	8001ba8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d122      	bne.n	8001bee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	bf0c      	ite	eq
 8001bb8:	2301      	moveq	r3, #1
 8001bba:	2300      	movne	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d113      	bne.n	8001bee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	f043 0220 	orr.w	r2, r3, #32
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00f      	b.n	8001c0e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699a      	ldr	r2, [r3, #24]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	bf0c      	ite	eq
 8001bfe:	2301      	moveq	r3, #1
 8001c00:	2300      	movne	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d0b4      	beq.n	8001b76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c22:	e033      	b.n	8001c8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f87f 	bl	8001d2c <I2C_IsErrorOccurred>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e031      	b.n	8001c9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3e:	d025      	beq.n	8001c8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c40:	f7ff fa18 	bl	8001074 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d302      	bcc.n	8001c56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d11a      	bne.n	8001c8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d013      	beq.n	8001c8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c68:	f043 0220 	orr.w	r2, r3, #32
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e007      	b.n	8001c9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d1c4      	bne.n	8001c24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cb0:	e02f      	b.n	8001d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f838 	bl	8001d2c <I2C_IsErrorOccurred>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e02d      	b.n	8001d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc6:	f7ff f9d5 	bl	8001074 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d302      	bcc.n	8001cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d11a      	bne.n	8001d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	d013      	beq.n	8001d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	f043 0220 	orr.w	r2, r3, #32
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e007      	b.n	8001d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	d1c8      	bne.n	8001cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	@ 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d068      	beq.n	8001e2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d60:	e049      	b.n	8001df6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d045      	beq.n	8001df6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d6a:	f7ff f983 	bl	8001074 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d302      	bcc.n	8001d80 <I2C_IsErrorOccurred+0x54>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d13a      	bne.n	8001df6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001da2:	d121      	bne.n	8001de8 <I2C_IsErrorOccurred+0xbc>
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001daa:	d01d      	beq.n	8001de8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	2b20      	cmp	r3, #32
 8001db0:	d01a      	beq.n	8001de8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dc0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001dc2:	f7ff f957 	bl	8001074 <HAL_GetTick>
 8001dc6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dc8:	e00e      	b.n	8001de8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001dca:	f7ff f953 	bl	8001074 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b19      	cmp	r3, #25
 8001dd6:	d907      	bls.n	8001de8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	f043 0320 	orr.w	r3, r3, #32
 8001dde:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001de6:	e006      	b.n	8001df6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d1e9      	bne.n	8001dca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d003      	beq.n	8001e0c <I2C_IsErrorOccurred+0xe0>
 8001e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0aa      	beq.n	8001d62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d103      	bne.n	8001e1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00b      	beq.n	8001e98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01c      	beq.n	8001eda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f7ff fe3b 	bl	8001b1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <I2C_IsErrorOccurred+0x1bc>)
 8001eb2:	400b      	ands	r3, r1
 8001eb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001eda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3728      	adds	r7, #40	@ 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	fe00e800 	.word	0xfe00e800

08001eec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	817b      	strh	r3, [r7, #10]
 8001efa:	4613      	mov	r3, r2
 8001efc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001efe:	897b      	ldrh	r3, [r7, #10]
 8001f00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f04:	7a7b      	ldrb	r3, [r7, #9]
 8001f06:	041b      	lsls	r3, r3, #16
 8001f08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	0d5b      	lsrs	r3, r3, #21
 8001f26:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001f2a:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <I2C_TransferConfig+0x60>)
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	ea02 0103 	and.w	r1, r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f3e:	bf00      	nop
 8001f40:	371c      	adds	r7, #28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	03ff63ff 	.word	0x03ff63ff

08001f50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d138      	bne.n	8001fd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e032      	b.n	8001fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	@ 0x24
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e000      	b.n	8001fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fd8:	2302      	movs	r3, #2
  }
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b085      	sub	sp, #20
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d139      	bne.n	8002070 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002006:	2302      	movs	r3, #2
 8002008:	e033      	b.n	8002072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2224      	movs	r2, #36	@ 0x24
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0201 	bic.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002038:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	e000      	b.n	8002072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002070:	2302      	movs	r3, #2
  }
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0b9      	b.n	8002204 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d106      	bne.n	80020aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7fe fc4b 	bl	8000940 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2203      	movs	r2, #3
 80020ae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f002 ff46 	bl	8004f48 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e03e      	b.n	8002140 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	3311      	adds	r3, #17
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	3310      	adds	r3, #16
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	3313      	adds	r3, #19
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	3320      	adds	r3, #32
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	3324      	adds	r3, #36	@ 0x24
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	3301      	adds	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	791b      	ldrb	r3, [r3, #4]
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	429a      	cmp	r2, r3
 8002148:	d3bb      	bcc.n	80020c2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	e044      	b.n	80021da <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002166:	7bfa      	ldrb	r2, [r7, #15]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	440b      	add	r3, r1
 800218a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	440b      	add	r3, r1
 80021a0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	3301      	adds	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	791b      	ldrb	r3, [r3, #4]
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d3b5      	bcc.n	8002150 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021f0:	f002 fec5 	bl	8004f7e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002212:	af00      	add	r7, sp, #0
 8002214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002218:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800221c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800221e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002222:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	f000 bff4 	b.w	800321a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002236:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 816d 	beq.w	8002522 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002248:	4bb4      	ldr	r3, [pc, #720]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b04      	cmp	r3, #4
 8002252:	d00c      	beq.n	800226e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002254:	4bb1      	ldr	r3, [pc, #708]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 030c 	and.w	r3, r3, #12
 800225c:	2b08      	cmp	r3, #8
 800225e:	d157      	bne.n	8002310 <HAL_RCC_OscConfig+0x104>
 8002260:	4bae      	ldr	r3, [pc, #696]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226c:	d150      	bne.n	8002310 <HAL_RCC_OscConfig+0x104>
 800226e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002272:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002282:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b3f      	cmp	r3, #63	@ 0x3f
 800228e:	d802      	bhi.n	8002296 <HAL_RCC_OscConfig+0x8a>
 8002290:	4ba2      	ldr	r3, [pc, #648]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0xb6>
 8002296:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800229a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80022aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022ae:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80022b2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80022be:	4b97      	ldr	r3, [pc, #604]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022c6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80022ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80022ce:	fa92 f2a2 	rbit	r2, r2
 80022d2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80022d6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80022da:	fab2 f282 	clz	r2, r2
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f042 0220 	orr.w	r2, r2, #32
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	f002 021f 	and.w	r2, r2, #31
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8114 	beq.w	8002520 <HAL_RCC_OscConfig+0x314>
 80022f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 810b 	bne.w	8002520 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	f000 bf85 	b.w	800321a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002314:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002320:	d106      	bne.n	8002330 <HAL_RCC_OscConfig+0x124>
 8002322:	4b7e      	ldr	r3, [pc, #504]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a7d      	ldr	r2, [pc, #500]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e036      	b.n	800239e <HAL_RCC_OscConfig+0x192>
 8002330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002334:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10c      	bne.n	800235a <HAL_RCC_OscConfig+0x14e>
 8002340:	4b76      	ldr	r3, [pc, #472]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a75      	ldr	r2, [pc, #468]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 8002346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b73      	ldr	r3, [pc, #460]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a72      	ldr	r2, [pc, #456]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 8002352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e021      	b.n	800239e <HAL_RCC_OscConfig+0x192>
 800235a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800236a:	d10c      	bne.n	8002386 <HAL_RCC_OscConfig+0x17a>
 800236c:	4b6b      	ldr	r3, [pc, #428]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a6a      	ldr	r2, [pc, #424]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 8002372:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b68      	ldr	r3, [pc, #416]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a67      	ldr	r2, [pc, #412]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 800237e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e00b      	b.n	800239e <HAL_RCC_OscConfig+0x192>
 8002386:	4b65      	ldr	r3, [pc, #404]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a64      	ldr	r2, [pc, #400]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 800238c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b62      	ldr	r3, [pc, #392]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a61      	ldr	r2, [pc, #388]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 8002398:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800239c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239e:	4b5f      	ldr	r3, [pc, #380]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 80023a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a2:	f023 020f 	bic.w	r2, r3, #15
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	495a      	ldr	r1, [pc, #360]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d054      	beq.n	8002472 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fe54 	bl	8001074 <HAL_GetTick>
 80023cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d2:	f7fe fe4f 	bl	8001074 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	@ 0x64
 80023e0:	d902      	bls.n	80023e8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	f000 bf19 	b.w	800321a <HAL_RCC_OscConfig+0x100e>
 80023e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023ec:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80023fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b3f      	cmp	r3, #63	@ 0x3f
 8002408:	d802      	bhi.n	8002410 <HAL_RCC_OscConfig+0x204>
 800240a:	4b44      	ldr	r3, [pc, #272]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	e015      	b.n	800243c <HAL_RCC_OscConfig+0x230>
 8002410:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002414:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002424:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002428:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800242c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002438:	4b38      	ldr	r3, [pc, #224]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002440:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002444:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002448:	fa92 f2a2 	rbit	r2, r2
 800244c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002450:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002454:	fab2 f282 	clz	r2, r2
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f042 0220 	orr.w	r2, r2, #32
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f002 021f 	and.w	r2, r2, #31
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f202 	lsl.w	r2, r1, r2
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0b0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1c6>
 8002470:	e057      	b.n	8002522 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe fdff 	bl	8001074 <HAL_GetTick>
 8002476:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	e00a      	b.n	8002492 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe fdfa 	bl	8001074 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b64      	cmp	r3, #100	@ 0x64
 800248a:	d902      	bls.n	8002492 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	f000 bec4 	b.w	800321a <HAL_RCC_OscConfig+0x100e>
 8002492:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002496:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80024a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80024b2:	d802      	bhi.n	80024ba <HAL_RCC_OscConfig+0x2ae>
 80024b4:	4b19      	ldr	r3, [pc, #100]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	e015      	b.n	80024e6 <HAL_RCC_OscConfig+0x2da>
 80024ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024be:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80024ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024d2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80024d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80024e2:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <HAL_RCC_OscConfig+0x310>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024ea:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80024ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80024f2:	fa92 f2a2 	rbit	r2, r2
 80024f6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80024fa:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80024fe:	fab2 f282 	clz	r2, r2
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f042 0220 	orr.w	r2, r2, #32
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f002 021f 	and.w	r2, r2, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1b0      	bne.n	800247c <HAL_RCC_OscConfig+0x270>
 800251a:	e002      	b.n	8002522 <HAL_RCC_OscConfig+0x316>
 800251c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002526:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 816c 	beq.w	8002810 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002538:	4bcc      	ldr	r3, [pc, #816]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00b      	beq.n	800255c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002544:	4bc9      	ldr	r3, [pc, #804]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d16d      	bne.n	800262c <HAL_RCC_OscConfig+0x420>
 8002550:	4bc6      	ldr	r3, [pc, #792]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d167      	bne.n	800262c <HAL_RCC_OscConfig+0x420>
 800255c:	2302      	movs	r3, #2
 800255e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800256e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b3f      	cmp	r3, #63	@ 0x3f
 800257a:	d802      	bhi.n	8002582 <HAL_RCC_OscConfig+0x376>
 800257c:	4bbb      	ldr	r3, [pc, #748]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	e013      	b.n	80025aa <HAL_RCC_OscConfig+0x39e>
 8002582:	2302      	movs	r3, #2
 8002584:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002594:	2302      	movs	r3, #2
 8002596:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800259a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80025a6:	4bb1      	ldr	r3, [pc, #708]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	2202      	movs	r2, #2
 80025ac:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80025b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80025b4:	fa92 f2a2 	rbit	r2, r2
 80025b8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80025bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80025c0:	fab2 f282 	clz	r2, r2
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	f042 0220 	orr.w	r2, r2, #32
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	f002 021f 	and.w	r2, r2, #31
 80025d0:	2101      	movs	r1, #1
 80025d2:	fa01 f202 	lsl.w	r2, r1, r2
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCC_OscConfig+0x3e6>
 80025dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d002      	beq.n	80025f2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f000 be14 	b.w	800321a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b9e      	ldr	r3, [pc, #632]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	21f8      	movs	r1, #248	@ 0xf8
 8002608:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002610:	fa91 f1a1 	rbit	r1, r1
 8002614:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002618:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800261c:	fab1 f181 	clz	r1, r1
 8002620:	b2c9      	uxtb	r1, r1
 8002622:	408b      	lsls	r3, r1
 8002624:	4991      	ldr	r1, [pc, #580]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262a:	e0f1      	b.n	8002810 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800262c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002630:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8083 	beq.w	8002744 <HAL_RCC_OscConfig+0x538>
 800263e:	2301      	movs	r3, #1
 8002640:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002650:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800265e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	461a      	mov	r2, r3
 8002666:	2301      	movs	r3, #1
 8002668:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe fd03 	bl	8001074 <HAL_GetTick>
 800266e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	e00a      	b.n	800268a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002674:	f7fe fcfe 	bl	8001074 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d902      	bls.n	800268a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	f000 bdc8 	b.w	800321a <HAL_RCC_OscConfig+0x100e>
 800268a:	2302      	movs	r3, #2
 800268c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002694:	fa93 f3a3 	rbit	r3, r3
 8002698:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800269c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80026a8:	d802      	bhi.n	80026b0 <HAL_RCC_OscConfig+0x4a4>
 80026aa:	4b70      	ldr	r3, [pc, #448]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	e013      	b.n	80026d8 <HAL_RCC_OscConfig+0x4cc>
 80026b0:	2302      	movs	r3, #2
 80026b2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80026c2:	2302      	movs	r3, #2
 80026c4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80026c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80026d4:	4b65      	ldr	r3, [pc, #404]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	2202      	movs	r2, #2
 80026da:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80026de:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80026e2:	fa92 f2a2 	rbit	r2, r2
 80026e6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80026ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80026ee:	fab2 f282 	clz	r2, r2
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	f042 0220 	orr.w	r2, r2, #32
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f002 021f 	and.w	r2, r2, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0b4      	beq.n	8002674 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b58      	ldr	r3, [pc, #352]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002716:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	21f8      	movs	r1, #248	@ 0xf8
 8002720:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002728:	fa91 f1a1 	rbit	r1, r1
 800272c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002730:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002734:	fab1 f181 	clz	r1, r1
 8002738:	b2c9      	uxtb	r1, r1
 800273a:	408b      	lsls	r3, r1
 800273c:	494b      	ldr	r1, [pc, #300]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
 8002742:	e065      	b.n	8002810 <HAL_RCC_OscConfig+0x604>
 8002744:	2301      	movs	r3, #1
 8002746:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002756:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002764:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	461a      	mov	r2, r3
 800276c:	2300      	movs	r3, #0
 800276e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7fe fc80 	bl	8001074 <HAL_GetTick>
 8002774:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277a:	f7fe fc7b 	bl	8001074 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d902      	bls.n	8002790 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	f000 bd45 	b.w	800321a <HAL_RCC_OscConfig+0x100e>
 8002790:	2302      	movs	r3, #2
 8002792:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80027a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80027ae:	d802      	bhi.n	80027b6 <HAL_RCC_OscConfig+0x5aa>
 80027b0:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	e013      	b.n	80027de <HAL_RCC_OscConfig+0x5d2>
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80027c8:	2302      	movs	r3, #2
 80027ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80027ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80027da:	4b24      	ldr	r3, [pc, #144]	@ (800286c <HAL_RCC_OscConfig+0x660>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	2202      	movs	r2, #2
 80027e0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80027e4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80027e8:	fa92 f2a2 	rbit	r2, r2
 80027ec:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80027f0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f042 0220 	orr.w	r2, r2, #32
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f002 021f 	and.w	r2, r2, #31
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1b4      	bne.n	800277a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002814:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8115 	beq.w	8002a50 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d07e      	beq.n	8002934 <HAL_RCC_OscConfig+0x728>
 8002836:	2301      	movs	r3, #1
 8002838:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_RCC_OscConfig+0x664>)
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	461a      	mov	r2, r3
 800285c:	2301      	movs	r3, #1
 800285e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002860:	f7fe fc08 	bl	8001074 <HAL_GetTick>
 8002864:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002868:	e00f      	b.n	800288a <HAL_RCC_OscConfig+0x67e>
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000
 8002870:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002874:	f7fe fbfe 	bl	8001074 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d902      	bls.n	800288a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	f000 bcc8 	b.w	800321a <HAL_RCC_OscConfig+0x100e>
 800288a:	2302      	movs	r3, #2
 800288c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800289c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028a4:	2202      	movs	r2, #2
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	fa93 f2a3 	rbit	r2, r3
 80028b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028c8:	2202      	movs	r2, #2
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e4:	4bb0      	ldr	r3, [pc, #704]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 80028e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028f0:	2102      	movs	r1, #2
 80028f2:	6019      	str	r1, [r3, #0]
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f1a3 	rbit	r1, r3
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800290a:	6019      	str	r1, [r3, #0]
  return result;
 800290c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002910:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	2101      	movs	r1, #1
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0a0      	beq.n	8002874 <HAL_RCC_OscConfig+0x668>
 8002932:	e08d      	b.n	8002a50 <HAL_RCC_OscConfig+0x844>
 8002934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002938:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800293c:	2201      	movs	r2, #1
 800293e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002944:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	fa93 f2a3 	rbit	r2, r3
 800294e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002952:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002956:	601a      	str	r2, [r3, #0]
  return result;
 8002958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002960:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	4b90      	ldr	r3, [pc, #576]	@ (8002bac <HAL_RCC_OscConfig+0x9a0>)
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	461a      	mov	r2, r3
 8002972:	2300      	movs	r3, #0
 8002974:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002976:	f7fe fb7d 	bl	8001074 <HAL_GetTick>
 800297a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297e:	e00a      	b.n	8002996 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002980:	f7fe fb78 	bl	8001074 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d902      	bls.n	8002996 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	f000 bc42 	b.w	800321a <HAL_RCC_OscConfig+0x100e>
 8002996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800299e:	2202      	movs	r2, #2
 80029a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fa93 f2a3 	rbit	r2, r3
 80029b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80029c2:	2202      	movs	r2, #2
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	fa93 f2a3 	rbit	r2, r3
 80029d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029e6:	2202      	movs	r2, #2
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	fa93 f2a3 	rbit	r2, r3
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002a00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a02:	4b69      	ldr	r3, [pc, #420]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002a04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a0e:	2102      	movs	r1, #2
 8002a10:	6019      	str	r1, [r3, #0]
 8002a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a16:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f1a3 	rbit	r1, r3
 8002a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a28:	6019      	str	r1, [r3, #0]
  return result;
 8002a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2101      	movs	r1, #1
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d197      	bne.n	8002980 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 819e 	beq.w	8002da2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6c:	4b4e      	ldr	r3, [pc, #312]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d116      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a82:	61d3      	str	r3, [r2, #28]
 8002a84:	4b48      	ldr	r3, [pc, #288]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a90:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002a9e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	4b42      	ldr	r3, [pc, #264]	@ (8002bb0 <HAL_RCC_OscConfig+0x9a4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11a      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb0 <HAL_RCC_OscConfig+0x9a4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8002bb0 <HAL_RCC_OscConfig+0x9a4>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002abc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fad9 	bl	8001074 <HAL_GetTick>
 8002ac2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	e009      	b.n	8002adc <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac8:	f7fe fad4 	bl	8001074 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b64      	cmp	r3, #100	@ 0x64
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e39e      	b.n	800321a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <HAL_RCC_OscConfig+0x9a4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ef      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d106      	bne.n	8002b06 <HAL_RCC_OscConfig+0x8fa>
 8002af8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	e035      	b.n	8002b72 <HAL_RCC_OscConfig+0x966>
 8002b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x924>
 8002b16:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a23      	ldr	r2, [pc, #140]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	6213      	str	r3, [r2, #32]
 8002b22:	4b21      	ldr	r3, [pc, #132]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4a20      	ldr	r2, [pc, #128]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	6213      	str	r3, [r2, #32]
 8002b2e:	e020      	b.n	8002b72 <HAL_RCC_OscConfig+0x966>
 8002b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d10c      	bne.n	8002b5a <HAL_RCC_OscConfig+0x94e>
 8002b40:	4b19      	ldr	r3, [pc, #100]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a18      	ldr	r2, [pc, #96]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002b46:	f043 0304 	orr.w	r3, r3, #4
 8002b4a:	6213      	str	r3, [r2, #32]
 8002b4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4a15      	ldr	r2, [pc, #84]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6213      	str	r3, [r2, #32]
 8002b58:	e00b      	b.n	8002b72 <HAL_RCC_OscConfig+0x966>
 8002b5a:	4b13      	ldr	r3, [pc, #76]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	6213      	str	r3, [r2, #32]
 8002b66:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba8 <HAL_RCC_OscConfig+0x99c>)
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8087 	beq.w	8002c92 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b84:	f7fe fa76 	bl	8001074 <HAL_GetTick>
 8002b88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	e012      	b.n	8002bb4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe fa71 	bl	8001074 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d908      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e339      	b.n	800321a <HAL_RCC_OscConfig+0x100e>
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	10908120 	.word	0x10908120
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	fa93 f2a3 	rbit	r2, r3
 8002bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002be0:	2202      	movs	r2, #2
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f2a3 	rbit	r2, r3
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002bfa:	601a      	str	r2, [r3, #0]
  return result;
 8002bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c00:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002c04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_RCC_OscConfig+0xa10>
 8002c16:	4b98      	ldr	r3, [pc, #608]	@ (8002e78 <HAL_RCC_OscConfig+0xc6c>)
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	e013      	b.n	8002c44 <HAL_RCC_OscConfig+0xa38>
 8002c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c20:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c24:	2202      	movs	r2, #2
 8002c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	fa93 f2a3 	rbit	r2, r3
 8002c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	4b8d      	ldr	r3, [pc, #564]	@ (8002e78 <HAL_RCC_OscConfig+0xc6c>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c48:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	6011      	str	r1, [r2, #0]
 8002c50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c54:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	fa92 f1a2 	rbit	r1, r2
 8002c5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c62:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c66:	6011      	str	r1, [r2, #0]
  return result;
 8002c68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c6c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	fab2 f282 	clz	r2, r2
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	f002 021f 	and.w	r2, r2, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f202 	lsl.w	r2, r1, r2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f43f af7f 	beq.w	8002b8e <HAL_RCC_OscConfig+0x982>
 8002c90:	e07d      	b.n	8002d8e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7fe f9ef 	bl	8001074 <HAL_GetTick>
 8002c96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9c:	f7fe f9ea 	bl	8001074 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e2b2      	b.n	800321a <HAL_RCC_OscConfig+0x100e>
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fa93 f2a3 	rbit	r2, r3
 8002cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cdc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fa93 f2a3 	rbit	r2, r3
 8002cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002cfa:	601a      	str	r2, [r3, #0]
  return result;
 8002cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d00:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002d04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <HAL_RCC_OscConfig+0xb10>
 8002d16:	4b58      	ldr	r3, [pc, #352]	@ (8002e78 <HAL_RCC_OscConfig+0xc6c>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	e013      	b.n	8002d44 <HAL_RCC_OscConfig+0xb38>
 8002d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d20:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d24:	2202      	movs	r2, #2
 8002d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	fa93 f2a3 	rbit	r2, r3
 8002d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	4b4d      	ldr	r3, [pc, #308]	@ (8002e78 <HAL_RCC_OscConfig+0xc6c>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d48:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	6011      	str	r1, [r2, #0]
 8002d50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d54:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	fa92 f1a2 	rbit	r1, r2
 8002d5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d62:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d66:	6011      	str	r1, [r2, #0]
  return result;
 8002d68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d6c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d186      	bne.n	8002c9c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d8e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d105      	bne.n	8002da2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d96:	4b38      	ldr	r3, [pc, #224]	@ (8002e78 <HAL_RCC_OscConfig+0xc6c>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4a37      	ldr	r2, [pc, #220]	@ (8002e78 <HAL_RCC_OscConfig+0xc6c>)
 8002d9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002da0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8232 	beq.w	8003218 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db4:	4b30      	ldr	r3, [pc, #192]	@ (8002e78 <HAL_RCC_OscConfig+0xc6c>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	f000 8201 	beq.w	80031c4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	f040 8157 	bne.w	8003082 <HAL_RCC_OscConfig+0xe76>
 8002dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002ddc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fa93 f2a3 	rbit	r2, r3
 8002df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002df8:	601a      	str	r2, [r3, #0]
  return result;
 8002dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002e02:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e0e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	461a      	mov	r2, r3
 8002e16:	2300      	movs	r3, #0
 8002e18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe f92b 	bl	8001074 <HAL_GetTick>
 8002e1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e22:	e009      	b.n	8002e38 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fe f926 	bl	8001074 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1f0      	b.n	800321a <HAL_RCC_OscConfig+0x100e>
 8002e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	fa93 f2a3 	rbit	r2, r3
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e5c:	601a      	str	r2, [r3, #0]
  return result;
 8002e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e62:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002e66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e70:	d804      	bhi.n	8002e7c <HAL_RCC_OscConfig+0xc70>
 8002e72:	4b01      	ldr	r3, [pc, #4]	@ (8002e78 <HAL_RCC_OscConfig+0xc6c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e029      	b.n	8002ecc <HAL_RCC_OscConfig+0xcc0>
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e80:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	fa93 f2a3 	rbit	r2, r3
 8002e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002eaa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	fa93 f2a3 	rbit	r2, r3
 8002ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	4bc3      	ldr	r3, [pc, #780]	@ (80031d8 <HAL_RCC_OscConfig+0xfcc>)
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ed0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002ed4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ed8:	6011      	str	r1, [r2, #0]
 8002eda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ede:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	fa92 f1a2 	rbit	r1, r2
 8002ee8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002eec:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ef0:	6011      	str	r1, [r2, #0]
  return result;
 8002ef2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ef6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	fab2 f282 	clz	r2, r2
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	f042 0220 	orr.w	r2, r2, #32
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	f002 021f 	and.w	r2, r2, #31
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d185      	bne.n	8002e24 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f18:	4baf      	ldr	r3, [pc, #700]	@ (80031d8 <HAL_RCC_OscConfig+0xfcc>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	49a7      	ldr	r1, [pc, #668]	@ (80031d8 <HAL_RCC_OscConfig+0xfcc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
 8002f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f44:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f52:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	fa93 f2a3 	rbit	r2, r3
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f64:	601a      	str	r2, [r3, #0]
  return result;
 8002f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002f6e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f70:	fab3 f383 	clz	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f7a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	461a      	mov	r2, r3
 8002f82:	2301      	movs	r3, #1
 8002f84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe f875 	bl	8001074 <HAL_GetTick>
 8002f8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f8e:	e009      	b.n	8002fa4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe f870 	bl	8001074 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e13a      	b.n	800321a <HAL_RCC_OscConfig+0x100e>
 8002fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002fac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	fa93 f2a3 	rbit	r2, r3
 8002fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002fc8:	601a      	str	r2, [r3, #0]
  return result;
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002fd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fdc:	d802      	bhi.n	8002fe4 <HAL_RCC_OscConfig+0xdd8>
 8002fde:	4b7e      	ldr	r3, [pc, #504]	@ (80031d8 <HAL_RCC_OscConfig+0xfcc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	e027      	b.n	8003034 <HAL_RCC_OscConfig+0xe28>
 8002fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002fec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ff0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f2a3 	rbit	r2, r3
 8003000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003004:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003012:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	4b69      	ldr	r3, [pc, #420]	@ (80031d8 <HAL_RCC_OscConfig+0xfcc>)
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003038:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800303c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003040:	6011      	str	r1, [r2, #0]
 8003042:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003046:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	fa92 f1a2 	rbit	r1, r2
 8003050:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003054:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003058:	6011      	str	r1, [r2, #0]
  return result;
 800305a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800305e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	fab2 f282 	clz	r2, r2
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	f042 0220 	orr.w	r2, r2, #32
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	f002 021f 	and.w	r2, r2, #31
 8003074:	2101      	movs	r1, #1
 8003076:	fa01 f202 	lsl.w	r2, r1, r2
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d087      	beq.n	8002f90 <HAL_RCC_OscConfig+0xd84>
 8003080:	e0ca      	b.n	8003218 <HAL_RCC_OscConfig+0x100c>
 8003082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003086:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800308a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800308e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003094:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	fa93 f2a3 	rbit	r2, r3
 800309e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030a6:	601a      	str	r2, [r3, #0]
  return result;
 80030a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ac:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	461a      	mov	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fd ffd4 	bl	8001074 <HAL_GetTick>
 80030cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d0:	e009      	b.n	80030e6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fd ffcf 	bl	8001074 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e099      	b.n	800321a <HAL_RCC_OscConfig+0x100e>
 80030e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ea:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	fa93 f2a3 	rbit	r2, r3
 8003102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003106:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800310a:	601a      	str	r2, [r3, #0]
  return result;
 800310c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003110:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003114:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003116:	fab3 f383 	clz	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b3f      	cmp	r3, #63	@ 0x3f
 800311e:	d802      	bhi.n	8003126 <HAL_RCC_OscConfig+0xf1a>
 8003120:	4b2d      	ldr	r3, [pc, #180]	@ (80031d8 <HAL_RCC_OscConfig+0xfcc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	e027      	b.n	8003176 <HAL_RCC_OscConfig+0xf6a>
 8003126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800312e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003138:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003150:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003154:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fa93 f2a3 	rbit	r2, r3
 8003168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <HAL_RCC_OscConfig+0xfcc>)
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800317a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800317e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003182:	6011      	str	r1, [r2, #0]
 8003184:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003188:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	fa92 f1a2 	rbit	r1, r2
 8003192:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003196:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800319a:	6011      	str	r1, [r2, #0]
  return result;
 800319c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031a0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	fab2 f282 	clz	r2, r2
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	f042 0220 	orr.w	r2, r2, #32
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	f002 021f 	and.w	r2, r2, #31
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f202 	lsl.w	r2, r1, r2
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d187      	bne.n	80030d2 <HAL_RCC_OscConfig+0xec6>
 80031c2:	e029      	b.n	8003218 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d103      	bne.n	80031dc <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e020      	b.n	800321a <HAL_RCC_OscConfig+0x100e>
 80031d8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031dc:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <HAL_RCC_OscConfig+0x1018>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d10b      	bne.n	8003214 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003200:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003208:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000

08003228 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b09e      	sub	sp, #120	@ 0x78
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e154      	b.n	80034ea <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003240:	4b89      	ldr	r3, [pc, #548]	@ (8003468 <HAL_RCC_ClockConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d910      	bls.n	8003270 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b86      	ldr	r3, [pc, #536]	@ (8003468 <HAL_RCC_ClockConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 0207 	bic.w	r2, r3, #7
 8003256:	4984      	ldr	r1, [pc, #528]	@ (8003468 <HAL_RCC_ClockConfig+0x240>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b82      	ldr	r3, [pc, #520]	@ (8003468 <HAL_RCC_ClockConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e13c      	b.n	80034ea <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800327c:	4b7b      	ldr	r3, [pc, #492]	@ (800346c <HAL_RCC_ClockConfig+0x244>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4978      	ldr	r1, [pc, #480]	@ (800346c <HAL_RCC_ClockConfig+0x244>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80cd 	beq.w	8003436 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d137      	bne.n	8003314 <HAL_RCC_ClockConfig+0xec>
 80032a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80032b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80032bc:	d802      	bhi.n	80032c4 <HAL_RCC_ClockConfig+0x9c>
 80032be:	4b6b      	ldr	r3, [pc, #428]	@ (800346c <HAL_RCC_ClockConfig+0x244>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	e00f      	b.n	80032e4 <HAL_RCC_ClockConfig+0xbc>
 80032c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80032d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80032d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032e0:	4b62      	ldr	r3, [pc, #392]	@ (800346c <HAL_RCC_ClockConfig+0x244>)
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80032ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032ec:	fa92 f2a2 	rbit	r2, r2
 80032f0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80032f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032f4:	fab2 f282 	clz	r2, r2
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f042 0220 	orr.w	r2, r2, #32
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f002 021f 	and.w	r2, r2, #31
 8003304:	2101      	movs	r1, #1
 8003306:	fa01 f202 	lsl.w	r2, r1, r2
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d171      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0ea      	b.n	80034ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d137      	bne.n	800338c <HAL_RCC_ClockConfig+0x164>
 800331c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003320:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800332a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b3f      	cmp	r3, #63	@ 0x3f
 8003334:	d802      	bhi.n	800333c <HAL_RCC_ClockConfig+0x114>
 8003336:	4b4d      	ldr	r3, [pc, #308]	@ (800346c <HAL_RCC_ClockConfig+0x244>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	e00f      	b.n	800335c <HAL_RCC_ClockConfig+0x134>
 800333c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003340:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	647b      	str	r3, [r7, #68]	@ 0x44
 800334a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800334e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003358:	4b44      	ldr	r3, [pc, #272]	@ (800346c <HAL_RCC_ClockConfig+0x244>)
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003360:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003362:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003364:	fa92 f2a2 	rbit	r2, r2
 8003368:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800336a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800336c:	fab2 f282 	clz	r2, r2
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f042 0220 	orr.w	r2, r2, #32
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	f002 021f 	and.w	r2, r2, #31
 800337c:	2101      	movs	r1, #1
 800337e:	fa01 f202 	lsl.w	r2, r1, r2
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d135      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0ae      	b.n	80034ea <HAL_RCC_ClockConfig+0x2c2>
 800338c:	2302      	movs	r3, #2
 800338e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80033a2:	d802      	bhi.n	80033aa <HAL_RCC_ClockConfig+0x182>
 80033a4:	4b31      	ldr	r3, [pc, #196]	@ (800346c <HAL_RCC_ClockConfig+0x244>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	e00d      	b.n	80033c6 <HAL_RCC_ClockConfig+0x19e>
 80033aa:	2302      	movs	r3, #2
 80033ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b6:	2302      	movs	r3, #2
 80033b8:	623b      	str	r3, [r7, #32]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	4b2a      	ldr	r3, [pc, #168]	@ (800346c <HAL_RCC_ClockConfig+0x244>)
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	2202      	movs	r2, #2
 80033c8:	61ba      	str	r2, [r7, #24]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	fa92 f2a2 	rbit	r2, r2
 80033d0:	617a      	str	r2, [r7, #20]
  return result;
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	fab2 f282 	clz	r2, r2
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	f042 0220 	orr.w	r2, r2, #32
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	f002 021f 	and.w	r2, r2, #31
 80033e4:	2101      	movs	r1, #1
 80033e6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e07a      	b.n	80034ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f4:	4b1d      	ldr	r3, [pc, #116]	@ (800346c <HAL_RCC_ClockConfig+0x244>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 0203 	bic.w	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	491a      	ldr	r1, [pc, #104]	@ (800346c <HAL_RCC_ClockConfig+0x244>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003406:	f7fd fe35 	bl	8001074 <HAL_GetTick>
 800340a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340c:	e00a      	b.n	8003424 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340e:	f7fd fe31 	bl	8001074 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e062      	b.n	80034ea <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003424:	4b11      	ldr	r3, [pc, #68]	@ (800346c <HAL_RCC_ClockConfig+0x244>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 020c 	and.w	r2, r3, #12
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	429a      	cmp	r2, r3
 8003434:	d1eb      	bne.n	800340e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003436:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <HAL_RCC_ClockConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d215      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003444:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <HAL_RCC_ClockConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 0207 	bic.w	r2, r3, #7
 800344c:	4906      	ldr	r1, [pc, #24]	@ (8003468 <HAL_RCC_ClockConfig+0x240>)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003454:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <HAL_RCC_ClockConfig+0x240>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d006      	beq.n	8003470 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e041      	b.n	80034ea <HAL_RCC_ClockConfig+0x2c2>
 8003466:	bf00      	nop
 8003468:	40022000 	.word	0x40022000
 800346c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b1d      	ldr	r3, [pc, #116]	@ (80034f4 <HAL_RCC_ClockConfig+0x2cc>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	491a      	ldr	r1, [pc, #104]	@ (80034f4 <HAL_RCC_ClockConfig+0x2cc>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800349a:	4b16      	ldr	r3, [pc, #88]	@ (80034f4 <HAL_RCC_ClockConfig+0x2cc>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4912      	ldr	r1, [pc, #72]	@ (80034f4 <HAL_RCC_ClockConfig+0x2cc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034ae:	f000 f829 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 80034b2:	4601      	mov	r1, r0
 80034b4:	4b0f      	ldr	r3, [pc, #60]	@ (80034f4 <HAL_RCC_ClockConfig+0x2cc>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034bc:	22f0      	movs	r2, #240	@ 0xf0
 80034be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	fa92 f2a2 	rbit	r2, r2
 80034c6:	60fa      	str	r2, [r7, #12]
  return result;
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	fab2 f282 	clz	r2, r2
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	40d3      	lsrs	r3, r2
 80034d2:	4a09      	ldr	r2, [pc, #36]	@ (80034f8 <HAL_RCC_ClockConfig+0x2d0>)
 80034d4:	5cd3      	ldrb	r3, [r2, r3]
 80034d6:	fa21 f303 	lsr.w	r3, r1, r3
 80034da:	4a08      	ldr	r2, [pc, #32]	@ (80034fc <HAL_RCC_ClockConfig+0x2d4>)
 80034dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034de:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <HAL_RCC_ClockConfig+0x2d8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd fd82 	bl	8000fec <HAL_InitTick>
  
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3778      	adds	r7, #120	@ 0x78
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	0800505c 	.word	0x0800505c
 80034fc:	20000004 	.word	0x20000004
 8003500:	20000008 	.word	0x20000008

08003504 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800351e:	4b1e      	ldr	r3, [pc, #120]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x94>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 030c 	and.w	r3, r3, #12
 800352a:	2b04      	cmp	r3, #4
 800352c:	d002      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x30>
 800352e:	2b08      	cmp	r3, #8
 8003530:	d003      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x36>
 8003532:	e026      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003534:	4b19      	ldr	r3, [pc, #100]	@ (800359c <HAL_RCC_GetSysClockFreq+0x98>)
 8003536:	613b      	str	r3, [r7, #16]
      break;
 8003538:	e026      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	0c9b      	lsrs	r3, r3, #18
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	4a17      	ldr	r2, [pc, #92]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003544:	5cd3      	ldrb	r3, [r2, r3]
 8003546:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003548:	4b13      	ldr	r3, [pc, #76]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x94>)
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	4a14      	ldr	r2, [pc, #80]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003560:	4a0e      	ldr	r2, [pc, #56]	@ (800359c <HAL_RCC_GetSysClockFreq+0x98>)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	fbb2 f2f3 	udiv	r2, r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	e004      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a0c      	ldr	r2, [pc, #48]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	613b      	str	r3, [r7, #16]
      break;
 8003580:	e002      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003582:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_RCC_GetSysClockFreq+0x98>)
 8003584:	613b      	str	r3, [r7, #16]
      break;
 8003586:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003588:	693b      	ldr	r3, [r7, #16]
}
 800358a:	4618      	mov	r0, r3
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
 800359c:	007a1200 	.word	0x007a1200
 80035a0:	08006554 	.word	0x08006554
 80035a4:	08006564 	.word	0x08006564
 80035a8:	003d0900 	.word	0x003d0900

080035ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b0:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000004 	.word	0x20000004

080035c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80035ca:	f7ff ffef 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 80035ce:	4601      	mov	r1, r0
 80035d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003600 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80035dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	fa92 f2a2 	rbit	r2, r2
 80035e4:	603a      	str	r2, [r7, #0]
  return result;
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	fab2 f282 	clz	r2, r2
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	40d3      	lsrs	r3, r2
 80035f0:	4a04      	ldr	r2, [pc, #16]	@ (8003604 <HAL_RCC_GetPCLK1Freq+0x40>)
 80035f2:	5cd3      	ldrb	r3, [r2, r3]
 80035f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	0800506c 	.word	0x0800506c

08003608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800360e:	f7ff ffcd 	bl	80035ac <HAL_RCC_GetHCLKFreq>
 8003612:	4601      	mov	r1, r0
 8003614:	4b0b      	ldr	r3, [pc, #44]	@ (8003644 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800361c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003620:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	fa92 f2a2 	rbit	r2, r2
 8003628:	603a      	str	r2, [r7, #0]
  return result;
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	fab2 f282 	clz	r2, r2
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	40d3      	lsrs	r3, r2
 8003634:	4a04      	ldr	r2, [pc, #16]	@ (8003648 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003636:	5cd3      	ldrb	r3, [r2, r3]
 8003638:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000
 8003648:	0800506c 	.word	0x0800506c

0800364c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b092      	sub	sp, #72	@ 0x48
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800365c:	2300      	movs	r3, #0
 800365e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80d2 	beq.w	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003670:	4b4d      	ldr	r3, [pc, #308]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10e      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367c:	4b4a      	ldr	r3, [pc, #296]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	4a49      	ldr	r2, [pc, #292]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003686:	61d3      	str	r3, [r2, #28]
 8003688:	4b47      	ldr	r3, [pc, #284]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369a:	4b44      	ldr	r3, [pc, #272]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d118      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a6:	4b41      	ldr	r3, [pc, #260]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a40      	ldr	r2, [pc, #256]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b2:	f7fd fcdf 	bl	8001074 <HAL_GetTick>
 80036b6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b8:	e008      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ba:	f7fd fcdb 	bl	8001074 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b64      	cmp	r3, #100	@ 0x64
 80036c6:	d901      	bls.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e167      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	4b37      	ldr	r3, [pc, #220]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036d8:	4b33      	ldr	r3, [pc, #204]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8082 	beq.w	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d07a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036f8:	4b2b      	ldr	r3, [pc, #172]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003702:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003706:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	461a      	mov	r2, r3
 800371a:	4b25      	ldr	r3, [pc, #148]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	461a      	mov	r2, r3
 8003722:	2301      	movs	r3, #1
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800372a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	4b1c      	ldr	r3, [pc, #112]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	461a      	mov	r2, r3
 8003746:	2300      	movs	r3, #0
 8003748:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800374a:	4a17      	ldr	r2, [pc, #92]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800374c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d049      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fd fc8b 	bl	8001074 <HAL_GetTick>
 800375e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003760:	e00a      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fd fc87 	bl	8001074 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e111      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003778:	2302      	movs	r3, #2
 800377a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	627b      	str	r3, [r7, #36]	@ 0x24
 8003784:	2302      	movs	r3, #2
 8003786:	623b      	str	r3, [r7, #32]
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	61fb      	str	r3, [r7, #28]
  return result;
 8003790:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d108      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80037a2:	4b01      	ldr	r3, [pc, #4]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	e00d      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40007000 	.word	0x40007000
 80037b0:	10908100 	.word	0x10908100
 80037b4:	2302      	movs	r3, #2
 80037b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	4b78      	ldr	r3, [pc, #480]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	2202      	movs	r2, #2
 80037c6:	613a      	str	r2, [r7, #16]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	fa92 f2a2 	rbit	r2, r2
 80037ce:	60fa      	str	r2, [r7, #12]
  return result;
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	fab2 f282 	clz	r2, r2
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	f002 021f 	and.w	r2, r2, #31
 80037e2:	2101      	movs	r1, #1
 80037e4:	fa01 f202 	lsl.w	r2, r1, r2
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0b9      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037ee:	4b6d      	ldr	r3, [pc, #436]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	496a      	ldr	r1, [pc, #424]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003800:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003808:	4b66      	ldr	r3, [pc, #408]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	4a65      	ldr	r2, [pc, #404]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003812:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003820:	4b60      	ldr	r3, [pc, #384]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	f023 0203 	bic.w	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	495d      	ldr	r1, [pc, #372]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800382e:	4313      	orrs	r3, r2
 8003830:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800383e:	4b59      	ldr	r3, [pc, #356]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4956      	ldr	r1, [pc, #344]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800384c:	4313      	orrs	r3, r2
 800384e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800385c:	4b51      	ldr	r3, [pc, #324]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	494e      	ldr	r1, [pc, #312]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800386a:	4313      	orrs	r3, r2
 800386c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800387a:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	f023 0210 	bic.w	r2, r3, #16
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4947      	ldr	r1, [pc, #284]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003888:	4313      	orrs	r3, r2
 800388a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003898:	4b42      	ldr	r3, [pc, #264]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a4:	493f      	ldr	r1, [pc, #252]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038b6:	4b3b      	ldr	r3, [pc, #236]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f023 0220 	bic.w	r2, r3, #32
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	4938      	ldr	r1, [pc, #224]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d4:	4b33      	ldr	r3, [pc, #204]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	4930      	ldr	r1, [pc, #192]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038f2:	4b2c      	ldr	r3, [pc, #176]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	4929      	ldr	r1, [pc, #164]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003900:	4313      	orrs	r3, r2
 8003902:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003910:	4b24      	ldr	r3, [pc, #144]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	4921      	ldr	r1, [pc, #132]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800392e:	4b1d      	ldr	r3, [pc, #116]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003932:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	491a      	ldr	r1, [pc, #104]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800393c:	4313      	orrs	r3, r2
 800393e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800394c:	4b15      	ldr	r3, [pc, #84]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800394e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003950:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003958:	4912      	ldr	r1, [pc, #72]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800395a:	4313      	orrs	r3, r2
 800395c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d008      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800396a:	4b0e      	ldr	r3, [pc, #56]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	490b      	ldr	r1, [pc, #44]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003978:	4313      	orrs	r3, r2
 800397a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003988:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003994:	4903      	ldr	r1, [pc, #12]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003996:	4313      	orrs	r3, r2
 8003998:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3748      	adds	r7, #72	@ 0x48
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000

080039a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e09d      	b.n	8003af6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d108      	bne.n	80039d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039ca:	d009      	beq.n	80039e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]
 80039d2:	e005      	b.n	80039e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fc fef4 	bl	80007e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a20:	d902      	bls.n	8003a28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	e002      	b.n	8003a2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a36:	d007      	beq.n	8003a48 <HAL_SPI_Init+0xa0>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a40:	d002      	beq.n	8003a48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8a:	ea42 0103 	orr.w	r1, r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a92:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	0c1b      	lsrs	r3, r3, #16
 8003aa4:	f003 0204 	and.w	r2, r3, #4
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003ac4:	ea42 0103 	orr.w	r1, r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ae4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e040      	b.n	8003b92 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7fc fea3 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2224      	movs	r2, #36	@ 0x24
 8003b2a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fd3d 	bl	80045c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fb66 	bl	800421c <UART_SetConfig>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e01b      	b.n	8003b92 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0201 	orr.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fdbc 	bl	8004708 <UART_CheckIdleState>
 8003b90:	4603      	mov	r3, r0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b08a      	sub	sp, #40	@ 0x28
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d132      	bne.n	8003c18 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_UART_Receive_IT+0x24>
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e02b      	b.n	8003c1a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d018      	beq.n	8003c08 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	613b      	str	r3, [r7, #16]
   return(result);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	623b      	str	r3, [r7, #32]
 8003bf6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	69f9      	ldr	r1, [r7, #28]
 8003bfa:	6a3a      	ldr	r2, [r7, #32]
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e6      	bne.n	8003bd6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fe90 	bl	8004934 <UART_Start_Receive_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	e000      	b.n	8003c1a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
  }
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3728      	adds	r7, #40	@ 0x28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b0ba      	sub	sp, #232	@ 0xe8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003c4e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003c52:	4013      	ands	r3, r2
 8003c54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003c58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d115      	bne.n	8003c8c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00f      	beq.n	8003c8c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d009      	beq.n	8003c8c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 82ab 	beq.w	80041d8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
      }
      return;
 8003c8a:	e2a5      	b.n	80041d8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8117 	beq.w	8003ec4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ca2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003ca6:	4b85      	ldr	r3, [pc, #532]	@ (8003ebc <HAL_UART_IRQHandler+0x298>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 810a 	beq.w	8003ec4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d011      	beq.n	8003ce0 <HAL_UART_IRQHandler+0xbc>
 8003cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00b      	beq.n	8003ce0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d011      	beq.n	8003d10 <HAL_UART_IRQHandler+0xec>
 8003cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d06:	f043 0204 	orr.w	r2, r3, #4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d011      	beq.n	8003d40 <HAL_UART_IRQHandler+0x11c>
 8003d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00b      	beq.n	8003d40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d36:	f043 0202 	orr.w	r2, r3, #2
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d017      	beq.n	8003d7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2208      	movs	r2, #8
 8003d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d72:	f043 0208 	orr.w	r2, r3, #8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d012      	beq.n	8003dae <HAL_UART_IRQHandler+0x18a>
 8003d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00c      	beq.n	8003dae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8211 	beq.w	80041dc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003de8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df6:	2b40      	cmp	r3, #64	@ 0x40
 8003df8:	d005      	beq.n	8003e06 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dfe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d04f      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fe48 	bl	8004a9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e16:	2b40      	cmp	r3, #64	@ 0x40
 8003e18:	d141      	bne.n	8003e9e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3308      	adds	r3, #8
 8003e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3308      	adds	r3, #8
 8003e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1d9      	bne.n	8003e1a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d013      	beq.n	8003e96 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e72:	4a13      	ldr	r2, [pc, #76]	@ (8003ec0 <HAL_UART_IRQHandler+0x29c>)
 8003e74:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd fa79 	bl	8001372 <HAL_DMA_Abort_IT>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d017      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e90:	4610      	mov	r0, r2
 8003e92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e94:	e00f      	b.n	8003eb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f9aa 	bl	80041f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	e00b      	b.n	8003eb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9a6 	bl	80041f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	e007      	b.n	8003eb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9a2 	bl	80041f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003eb4:	e192      	b.n	80041dc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb6:	bf00      	nop
    return;
 8003eb8:	e190      	b.n	80041dc <HAL_UART_IRQHandler+0x5b8>
 8003eba:	bf00      	nop
 8003ebc:	04000120 	.word	0x04000120
 8003ec0:	08004b65 	.word	0x08004b65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	f040 814b 	bne.w	8004164 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8144 	beq.w	8004164 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 813d 	beq.w	8004164 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2210      	movs	r2, #16
 8003ef0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efc:	2b40      	cmp	r3, #64	@ 0x40
 8003efe:	f040 80b5 	bne.w	800406c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8164 	beq.w	80041e0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f22:	429a      	cmp	r2, r3
 8003f24:	f080 815c 	bcs.w	80041e0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	f000 8086 	beq.w	800404a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f6c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f74:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1da      	bne.n	8003f3e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f9a:	f023 0301 	bic.w	r3, r3, #1
 8003f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3308      	adds	r3, #8
 8003fa8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fac:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e1      	bne.n	8003f88 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003fe8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ff6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e3      	bne.n	8003fc4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800401a:	f023 0310 	bic.w	r3, r3, #16
 800401e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800402c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800402e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004032:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800403a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e4      	bne.n	800400a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004044:	4618      	mov	r0, r3
 8004046:	f7fd f956 	bl	80012f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800405c:	b29b      	uxth	r3, r3
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	b29b      	uxth	r3, r3
 8004062:	4619      	mov	r1, r3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f8cd 	bl	8004204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800406a:	e0b9      	b.n	80041e0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004078:	b29b      	uxth	r3, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80ab 	beq.w	80041e4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800408e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80a6 	beq.w	80041e4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80040ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80040bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e4      	bne.n	8004098 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3308      	adds	r3, #8
 80040d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	623b      	str	r3, [r7, #32]
   return(result);
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3308      	adds	r3, #8
 80040ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80040f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e3      	bne.n	80040ce <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	60fb      	str	r3, [r7, #12]
   return(result);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0310 	bic.w	r3, r3, #16
 800412e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	69b9      	ldr	r1, [r7, #24]
 8004142:	69fa      	ldr	r2, [r7, #28]
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	617b      	str	r3, [r7, #20]
   return(result);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e4      	bne.n	800411a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004156:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f851 	bl	8004204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004162:	e03f      	b.n	80041e4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004168:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00e      	beq.n	800418e <HAL_UART_IRQHandler+0x56a>
 8004170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004174:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004184:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fed4 	bl	8004f34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800418c:	e02d      	b.n	80041ea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800418e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00e      	beq.n	80041b8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800419a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800419e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01c      	beq.n	80041e8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	4798      	blx	r3
    }
    return;
 80041b6:	e017      	b.n	80041e8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d012      	beq.n	80041ea <HAL_UART_IRQHandler+0x5c6>
 80041c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00c      	beq.n	80041ea <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fcdd 	bl	8004b90 <UART_EndTransmit_IT>
    return;
 80041d6:	e008      	b.n	80041ea <HAL_UART_IRQHandler+0x5c6>
      return;
 80041d8:	bf00      	nop
 80041da:	e006      	b.n	80041ea <HAL_UART_IRQHandler+0x5c6>
    return;
 80041dc:	bf00      	nop
 80041de:	e004      	b.n	80041ea <HAL_UART_IRQHandler+0x5c6>
      return;
 80041e0:	bf00      	nop
 80041e2:	e002      	b.n	80041ea <HAL_UART_IRQHandler+0x5c6>
      return;
 80041e4:	bf00      	nop
 80041e6:	e000      	b.n	80041ea <HAL_UART_IRQHandler+0x5c6>
    return;
 80041e8:	bf00      	nop
  }

}
 80041ea:	37e8      	adds	r7, #232	@ 0xe8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800424a:	f023 030c 	bic.w	r3, r3, #12
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	6979      	ldr	r1, [r7, #20]
 8004254:	430b      	orrs	r3, r1
 8004256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4aa7      	ldr	r2, [pc, #668]	@ (8004534 <UART_SetConfig+0x318>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d120      	bne.n	80042de <UART_SetConfig+0xc2>
 800429c:	4ba6      	ldr	r3, [pc, #664]	@ (8004538 <UART_SetConfig+0x31c>)
 800429e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d817      	bhi.n	80042d8 <UART_SetConfig+0xbc>
 80042a8:	a201      	add	r2, pc, #4	@ (adr r2, 80042b0 <UART_SetConfig+0x94>)
 80042aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ae:	bf00      	nop
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	080042cd 	.word	0x080042cd
 80042b8:	080042d3 	.word	0x080042d3
 80042bc:	080042c7 	.word	0x080042c7
 80042c0:	2301      	movs	r3, #1
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e0b5      	b.n	8004432 <UART_SetConfig+0x216>
 80042c6:	2302      	movs	r3, #2
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e0b2      	b.n	8004432 <UART_SetConfig+0x216>
 80042cc:	2304      	movs	r3, #4
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e0af      	b.n	8004432 <UART_SetConfig+0x216>
 80042d2:	2308      	movs	r3, #8
 80042d4:	77fb      	strb	r3, [r7, #31]
 80042d6:	e0ac      	b.n	8004432 <UART_SetConfig+0x216>
 80042d8:	2310      	movs	r3, #16
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e0a9      	b.n	8004432 <UART_SetConfig+0x216>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a96      	ldr	r2, [pc, #600]	@ (800453c <UART_SetConfig+0x320>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d124      	bne.n	8004332 <UART_SetConfig+0x116>
 80042e8:	4b93      	ldr	r3, [pc, #588]	@ (8004538 <UART_SetConfig+0x31c>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042f4:	d011      	beq.n	800431a <UART_SetConfig+0xfe>
 80042f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042fa:	d817      	bhi.n	800432c <UART_SetConfig+0x110>
 80042fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004300:	d011      	beq.n	8004326 <UART_SetConfig+0x10a>
 8004302:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004306:	d811      	bhi.n	800432c <UART_SetConfig+0x110>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <UART_SetConfig+0xf8>
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004310:	d006      	beq.n	8004320 <UART_SetConfig+0x104>
 8004312:	e00b      	b.n	800432c <UART_SetConfig+0x110>
 8004314:	2300      	movs	r3, #0
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	e08b      	b.n	8004432 <UART_SetConfig+0x216>
 800431a:	2302      	movs	r3, #2
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e088      	b.n	8004432 <UART_SetConfig+0x216>
 8004320:	2304      	movs	r3, #4
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e085      	b.n	8004432 <UART_SetConfig+0x216>
 8004326:	2308      	movs	r3, #8
 8004328:	77fb      	strb	r3, [r7, #31]
 800432a:	e082      	b.n	8004432 <UART_SetConfig+0x216>
 800432c:	2310      	movs	r3, #16
 800432e:	77fb      	strb	r3, [r7, #31]
 8004330:	e07f      	b.n	8004432 <UART_SetConfig+0x216>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a82      	ldr	r2, [pc, #520]	@ (8004540 <UART_SetConfig+0x324>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d124      	bne.n	8004386 <UART_SetConfig+0x16a>
 800433c:	4b7e      	ldr	r3, [pc, #504]	@ (8004538 <UART_SetConfig+0x31c>)
 800433e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004340:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004344:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004348:	d011      	beq.n	800436e <UART_SetConfig+0x152>
 800434a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800434e:	d817      	bhi.n	8004380 <UART_SetConfig+0x164>
 8004350:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004354:	d011      	beq.n	800437a <UART_SetConfig+0x15e>
 8004356:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800435a:	d811      	bhi.n	8004380 <UART_SetConfig+0x164>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <UART_SetConfig+0x14c>
 8004360:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004364:	d006      	beq.n	8004374 <UART_SetConfig+0x158>
 8004366:	e00b      	b.n	8004380 <UART_SetConfig+0x164>
 8004368:	2300      	movs	r3, #0
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e061      	b.n	8004432 <UART_SetConfig+0x216>
 800436e:	2302      	movs	r3, #2
 8004370:	77fb      	strb	r3, [r7, #31]
 8004372:	e05e      	b.n	8004432 <UART_SetConfig+0x216>
 8004374:	2304      	movs	r3, #4
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e05b      	b.n	8004432 <UART_SetConfig+0x216>
 800437a:	2308      	movs	r3, #8
 800437c:	77fb      	strb	r3, [r7, #31]
 800437e:	e058      	b.n	8004432 <UART_SetConfig+0x216>
 8004380:	2310      	movs	r3, #16
 8004382:	77fb      	strb	r3, [r7, #31]
 8004384:	e055      	b.n	8004432 <UART_SetConfig+0x216>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a6e      	ldr	r2, [pc, #440]	@ (8004544 <UART_SetConfig+0x328>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d124      	bne.n	80043da <UART_SetConfig+0x1be>
 8004390:	4b69      	ldr	r3, [pc, #420]	@ (8004538 <UART_SetConfig+0x31c>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004398:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800439c:	d011      	beq.n	80043c2 <UART_SetConfig+0x1a6>
 800439e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043a2:	d817      	bhi.n	80043d4 <UART_SetConfig+0x1b8>
 80043a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043a8:	d011      	beq.n	80043ce <UART_SetConfig+0x1b2>
 80043aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043ae:	d811      	bhi.n	80043d4 <UART_SetConfig+0x1b8>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <UART_SetConfig+0x1a0>
 80043b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043b8:	d006      	beq.n	80043c8 <UART_SetConfig+0x1ac>
 80043ba:	e00b      	b.n	80043d4 <UART_SetConfig+0x1b8>
 80043bc:	2300      	movs	r3, #0
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e037      	b.n	8004432 <UART_SetConfig+0x216>
 80043c2:	2302      	movs	r3, #2
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e034      	b.n	8004432 <UART_SetConfig+0x216>
 80043c8:	2304      	movs	r3, #4
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e031      	b.n	8004432 <UART_SetConfig+0x216>
 80043ce:	2308      	movs	r3, #8
 80043d0:	77fb      	strb	r3, [r7, #31]
 80043d2:	e02e      	b.n	8004432 <UART_SetConfig+0x216>
 80043d4:	2310      	movs	r3, #16
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	e02b      	b.n	8004432 <UART_SetConfig+0x216>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a5a      	ldr	r2, [pc, #360]	@ (8004548 <UART_SetConfig+0x32c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d124      	bne.n	800442e <UART_SetConfig+0x212>
 80043e4:	4b54      	ldr	r3, [pc, #336]	@ (8004538 <UART_SetConfig+0x31c>)
 80043e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80043ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043f0:	d011      	beq.n	8004416 <UART_SetConfig+0x1fa>
 80043f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043f6:	d817      	bhi.n	8004428 <UART_SetConfig+0x20c>
 80043f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043fc:	d011      	beq.n	8004422 <UART_SetConfig+0x206>
 80043fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004402:	d811      	bhi.n	8004428 <UART_SetConfig+0x20c>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <UART_SetConfig+0x1f4>
 8004408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800440c:	d006      	beq.n	800441c <UART_SetConfig+0x200>
 800440e:	e00b      	b.n	8004428 <UART_SetConfig+0x20c>
 8004410:	2300      	movs	r3, #0
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	e00d      	b.n	8004432 <UART_SetConfig+0x216>
 8004416:	2302      	movs	r3, #2
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	e00a      	b.n	8004432 <UART_SetConfig+0x216>
 800441c:	2304      	movs	r3, #4
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e007      	b.n	8004432 <UART_SetConfig+0x216>
 8004422:	2308      	movs	r3, #8
 8004424:	77fb      	strb	r3, [r7, #31]
 8004426:	e004      	b.n	8004432 <UART_SetConfig+0x216>
 8004428:	2310      	movs	r3, #16
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e001      	b.n	8004432 <UART_SetConfig+0x216>
 800442e:	2310      	movs	r3, #16
 8004430:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800443a:	d15b      	bne.n	80044f4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800443c:	7ffb      	ldrb	r3, [r7, #31]
 800443e:	2b08      	cmp	r3, #8
 8004440:	d827      	bhi.n	8004492 <UART_SetConfig+0x276>
 8004442:	a201      	add	r2, pc, #4	@ (adr r2, 8004448 <UART_SetConfig+0x22c>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	0800446d 	.word	0x0800446d
 800444c:	08004475 	.word	0x08004475
 8004450:	0800447d 	.word	0x0800447d
 8004454:	08004493 	.word	0x08004493
 8004458:	08004483 	.word	0x08004483
 800445c:	08004493 	.word	0x08004493
 8004460:	08004493 	.word	0x08004493
 8004464:	08004493 	.word	0x08004493
 8004468:	0800448b 	.word	0x0800448b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800446c:	f7ff f8aa 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8004470:	61b8      	str	r0, [r7, #24]
        break;
 8004472:	e013      	b.n	800449c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004474:	f7ff f8c8 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 8004478:	61b8      	str	r0, [r7, #24]
        break;
 800447a:	e00f      	b.n	800449c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800447c:	4b33      	ldr	r3, [pc, #204]	@ (800454c <UART_SetConfig+0x330>)
 800447e:	61bb      	str	r3, [r7, #24]
        break;
 8004480:	e00c      	b.n	800449c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004482:	f7ff f83f 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 8004486:	61b8      	str	r0, [r7, #24]
        break;
 8004488:	e008      	b.n	800449c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800448e:	61bb      	str	r3, [r7, #24]
        break;
 8004490:	e004      	b.n	800449c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	77bb      	strb	r3, [r7, #30]
        break;
 800449a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8082 	beq.w	80045a8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	005a      	lsls	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	441a      	add	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b0f      	cmp	r3, #15
 80044be:	d916      	bls.n	80044ee <UART_SetConfig+0x2d2>
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c6:	d212      	bcs.n	80044ee <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f023 030f 	bic.w	r3, r3, #15
 80044d0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	085b      	lsrs	r3, r3, #1
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	b29a      	uxth	r2, r3
 80044de:	89fb      	ldrh	r3, [r7, #14]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	89fa      	ldrh	r2, [r7, #14]
 80044ea:	60da      	str	r2, [r3, #12]
 80044ec:	e05c      	b.n	80045a8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	77bb      	strb	r3, [r7, #30]
 80044f2:	e059      	b.n	80045a8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044f4:	7ffb      	ldrb	r3, [r7, #31]
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d835      	bhi.n	8004566 <UART_SetConfig+0x34a>
 80044fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004500 <UART_SetConfig+0x2e4>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004525 	.word	0x08004525
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004551 	.word	0x08004551
 800450c:	08004567 	.word	0x08004567
 8004510:	08004557 	.word	0x08004557
 8004514:	08004567 	.word	0x08004567
 8004518:	08004567 	.word	0x08004567
 800451c:	08004567 	.word	0x08004567
 8004520:	0800455f 	.word	0x0800455f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004524:	f7ff f84e 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8004528:	61b8      	str	r0, [r7, #24]
        break;
 800452a:	e021      	b.n	8004570 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800452c:	f7ff f86c 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 8004530:	61b8      	str	r0, [r7, #24]
        break;
 8004532:	e01d      	b.n	8004570 <UART_SetConfig+0x354>
 8004534:	40013800 	.word	0x40013800
 8004538:	40021000 	.word	0x40021000
 800453c:	40004400 	.word	0x40004400
 8004540:	40004800 	.word	0x40004800
 8004544:	40004c00 	.word	0x40004c00
 8004548:	40005000 	.word	0x40005000
 800454c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004550:	4b1b      	ldr	r3, [pc, #108]	@ (80045c0 <UART_SetConfig+0x3a4>)
 8004552:	61bb      	str	r3, [r7, #24]
        break;
 8004554:	e00c      	b.n	8004570 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004556:	f7fe ffd5 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 800455a:	61b8      	str	r0, [r7, #24]
        break;
 800455c:	e008      	b.n	8004570 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004562:	61bb      	str	r3, [r7, #24]
        break;
 8004564:	e004      	b.n	8004570 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	77bb      	strb	r3, [r7, #30]
        break;
 800456e:	bf00      	nop
    }

    if (pclk != 0U)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d018      	beq.n	80045a8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	085a      	lsrs	r2, r3, #1
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	441a      	add	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b0f      	cmp	r3, #15
 800458e:	d909      	bls.n	80045a4 <UART_SetConfig+0x388>
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004596:	d205      	bcs.n	80045a4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	b29a      	uxth	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	e001      	b.n	80045a8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80045b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3720      	adds	r7, #32
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	007a1200 	.word	0x007a1200

080045c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01a      	beq.n	80046da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046c2:	d10a      	bne.n	80046da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	605a      	str	r2, [r3, #4]
  }
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b098      	sub	sp, #96	@ 0x60
 800470c:	af02      	add	r7, sp, #8
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004718:	f7fc fcac 	bl	8001074 <HAL_GetTick>
 800471c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b08      	cmp	r3, #8
 800472a:	d12e      	bne.n	800478a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800472c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004734:	2200      	movs	r2, #0
 8004736:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f88c 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d021      	beq.n	800478a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474e:	e853 3f00 	ldrex	r3, [r3]
 8004752:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004756:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800475a:	653b      	str	r3, [r7, #80]	@ 0x50
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004764:	647b      	str	r3, [r7, #68]	@ 0x44
 8004766:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800476a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e6      	bne.n	8004746 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e062      	b.n	8004850 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b04      	cmp	r3, #4
 8004796:	d149      	bne.n	800482c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004798:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047a0:	2200      	movs	r2, #0
 80047a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f856 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d03c      	beq.n	800482c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	623b      	str	r3, [r7, #32]
   return(result);
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80047d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e6      	bne.n	80047b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3308      	adds	r3, #8
 80047ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3308      	adds	r3, #8
 8004802:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004804:	61fa      	str	r2, [r7, #28]
 8004806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	69b9      	ldr	r1, [r7, #24]
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	617b      	str	r3, [r7, #20]
   return(result);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e5      	bne.n	80047e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e011      	b.n	8004850 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3758      	adds	r7, #88	@ 0x58
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004868:	e04f      	b.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004870:	d04b      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004872:	f7fc fbff 	bl	8001074 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	429a      	cmp	r2, r3
 8004880:	d302      	bcc.n	8004888 <UART_WaitOnFlagUntilTimeout+0x30>
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e04e      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d037      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b80      	cmp	r3, #128	@ 0x80
 800489e:	d034      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b40      	cmp	r3, #64	@ 0x40
 80048a4:	d031      	beq.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d110      	bne.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2208      	movs	r2, #8
 80048ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f8ed 	bl	8004a9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2208      	movs	r2, #8
 80048c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e029      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e4:	d111      	bne.n	800490a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f8d3 	bl	8004a9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e00f      	b.n	800492a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	429a      	cmp	r2, r3
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	429a      	cmp	r2, r3
 8004926:	d0a0      	beq.n	800486a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004934:	b480      	push	{r7}
 8004936:	b097      	sub	sp, #92	@ 0x5c
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004966:	d10e      	bne.n	8004986 <UART_Start_Receive_IT+0x52>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d105      	bne.n	800497c <UART_Start_Receive_IT+0x48>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004976:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800497a:	e01a      	b.n	80049b2 <UART_Start_Receive_IT+0x7e>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	22ff      	movs	r2, #255	@ 0xff
 8004980:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004984:	e015      	b.n	80049b2 <UART_Start_Receive_IT+0x7e>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10d      	bne.n	80049aa <UART_Start_Receive_IT+0x76>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <UART_Start_Receive_IT+0x6c>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	22ff      	movs	r2, #255	@ 0xff
 800499a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800499e:	e008      	b.n	80049b2 <UART_Start_Receive_IT+0x7e>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	227f      	movs	r2, #127	@ 0x7f
 80049a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80049a8:	e003      	b.n	80049b2 <UART_Start_Receive_IT+0x7e>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2222      	movs	r2, #34	@ 0x22
 80049be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3308      	adds	r3, #8
 80049c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3308      	adds	r3, #8
 80049e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80049e2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80049e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80049e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80049f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e5      	bne.n	80049c2 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049fe:	d107      	bne.n	8004a10 <UART_Start_Receive_IT+0xdc>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d103      	bne.n	8004a10 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a22      	ldr	r2, [pc, #136]	@ (8004a94 <UART_Start_Receive_IT+0x160>)
 8004a0c:	669a      	str	r2, [r3, #104]	@ 0x68
 8004a0e:	e002      	b.n	8004a16 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a21      	ldr	r2, [pc, #132]	@ (8004a98 <UART_Start_Receive_IT+0x164>)
 8004a14:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d019      	beq.n	8004a52 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a3e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e6      	bne.n	8004a1e <UART_Start_Receive_IT+0xea>
 8004a50:	e018      	b.n	8004a84 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f043 0320 	orr.w	r3, r3, #32
 8004a66:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a70:	623b      	str	r3, [r7, #32]
 8004a72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	69f9      	ldr	r1, [r7, #28]
 8004a76:	6a3a      	ldr	r2, [r7, #32]
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e6      	bne.n	8004a52 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	375c      	adds	r7, #92	@ 0x5c
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	08004d8d 	.word	0x08004d8d
 8004a98:	08004be5 	.word	0x08004be5

08004a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b095      	sub	sp, #84	@ 0x54
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ac2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ac4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ac8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e6      	bne.n	8004aa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3308      	adds	r3, #8
 8004adc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f023 0301 	bic.w	r3, r3, #1
 8004aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3308      	adds	r3, #8
 8004af4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004af8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004afc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e5      	bne.n	8004ad6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d118      	bne.n	8004b44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f023 0310 	bic.w	r3, r3, #16
 8004b26:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6979      	ldr	r1, [r7, #20]
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e6      	bne.n	8004b12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b58:	bf00      	nop
 8004b5a:	3754      	adds	r7, #84	@ 0x54
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f7ff fb34 	bl	80041f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	61bb      	str	r3, [r7, #24]
 8004bb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	6979      	ldr	r1, [r7, #20]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e6      	bne.n	8004b98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fb fbac 	bl	8000334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bdc:	bf00      	nop
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b09c      	sub	sp, #112	@ 0x70
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004bf2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bfc:	2b22      	cmp	r3, #34	@ 0x22
 8004bfe:	f040 80b9 	bne.w	8004d74 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004c08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004c10:	b2d9      	uxtb	r1, r3
 8004c12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1c:	400a      	ands	r2, r1
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f040 809c 	bne.w	8004d84 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c72:	e841 2300 	strex	r3, r2, [r1]
 8004c76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1e6      	bne.n	8004c4c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3308      	adds	r3, #8
 8004c84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ca0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ca4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e5      	bne.n	8004c7e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d018      	beq.n	8004d06 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ce8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e6      	bne.n	8004cd4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d12e      	bne.n	8004d6c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f023 0310 	bic.w	r3, r3, #16
 8004d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d32:	61fb      	str	r3, [r7, #28]
 8004d34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d36:	69b9      	ldr	r1, [r7, #24]
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	617b      	str	r3, [r7, #20]
   return(result);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e6      	bne.n	8004d14 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d103      	bne.n	8004d5c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2210      	movs	r2, #16
 8004d5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d62:	4619      	mov	r1, r3
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff fa4d 	bl	8004204 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d6a:	e00b      	b.n	8004d84 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fb fa2b 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8004d72:	e007      	b.n	8004d84 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0208 	orr.w	r2, r2, #8
 8004d82:	619a      	str	r2, [r3, #24]
}
 8004d84:	bf00      	nop
 8004d86:	3770      	adds	r7, #112	@ 0x70
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b09c      	sub	sp, #112	@ 0x70
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d9a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004da4:	2b22      	cmp	r3, #34	@ 0x22
 8004da6:	f040 80b9 	bne.w	8004f1c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004db0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004dba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004dbe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dc8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dce:	1c9a      	adds	r2, r3, #2
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f040 809c 	bne.w	8004f2c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e08:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e12:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e14:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004e18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e6      	bne.n	8004df4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3308      	adds	r3, #8
 8004e44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004e46:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1e5      	bne.n	8004e26 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d018      	beq.n	8004eae <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e9c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e6      	bne.n	8004e7c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d12e      	bne.n	8004f14 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f023 0310 	bic.w	r3, r3, #16
 8004ed0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6979      	ldr	r1, [r7, #20]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e6      	bne.n	8004ebc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d103      	bne.n	8004f04 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2210      	movs	r2, #16
 8004f02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff f979 	bl	8004204 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f12:	e00b      	b.n	8004f2c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7fb f957 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8004f1a:	e007      	b.n	8004f2c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0208 	orr.w	r2, r2, #8
 8004f2a:	619a      	str	r2, [r3, #24]
}
 8004f2c:	bf00      	nop
 8004f2e:	3770      	adds	r7, #112	@ 0x70
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f50:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004f54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	4013      	ands	r3, r2
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b085      	sub	sp, #20
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	1d3b      	adds	r3, r7, #4
 8004f88:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <memset>:
 8004fba:	4402      	add	r2, r0
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d100      	bne.n	8004fc4 <memset+0xa>
 8004fc2:	4770      	bx	lr
 8004fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc8:	e7f9      	b.n	8004fbe <memset+0x4>
	...

08004fcc <__libc_init_array>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	4d0d      	ldr	r5, [pc, #52]	@ (8005004 <__libc_init_array+0x38>)
 8004fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8005008 <__libc_init_array+0x3c>)
 8004fd2:	1b64      	subs	r4, r4, r5
 8004fd4:	10a4      	asrs	r4, r4, #2
 8004fd6:	2600      	movs	r6, #0
 8004fd8:	42a6      	cmp	r6, r4
 8004fda:	d109      	bne.n	8004ff0 <__libc_init_array+0x24>
 8004fdc:	4d0b      	ldr	r5, [pc, #44]	@ (800500c <__libc_init_array+0x40>)
 8004fde:	4c0c      	ldr	r4, [pc, #48]	@ (8005010 <__libc_init_array+0x44>)
 8004fe0:	f000 f818 	bl	8005014 <_init>
 8004fe4:	1b64      	subs	r4, r4, r5
 8004fe6:	10a4      	asrs	r4, r4, #2
 8004fe8:	2600      	movs	r6, #0
 8004fea:	42a6      	cmp	r6, r4
 8004fec:	d105      	bne.n	8004ffa <__libc_init_array+0x2e>
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff4:	4798      	blx	r3
 8004ff6:	3601      	adds	r6, #1
 8004ff8:	e7ee      	b.n	8004fd8 <__libc_init_array+0xc>
 8004ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffe:	4798      	blx	r3
 8005000:	3601      	adds	r6, #1
 8005002:	e7f2      	b.n	8004fea <__libc_init_array+0x1e>
 8005004:	08006574 	.word	0x08006574
 8005008:	08006574 	.word	0x08006574
 800500c:	08006574 	.word	0x08006574
 8005010:	08006578 	.word	0x08006578

08005014 <_init>:
 8005014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005016:	bf00      	nop
 8005018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501a:	bc08      	pop	{r3}
 800501c:	469e      	mov	lr, r3
 800501e:	4770      	bx	lr

08005020 <_fini>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr
