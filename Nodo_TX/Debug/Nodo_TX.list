
Nodo_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006770  08006770  00007770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a8  080067a8  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080067a8  080067a8  0000800c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080067a8  080067a8  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067a8  080067a8  000077a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067ac  080067ac  000077ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080067b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000800c  2**0
                  CONTENTS
 10 .bss          000004b0  2000000c  2000000c  0000800c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004bc  200004bc  0000800c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013685  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fd  00000000  00000000  0001b6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  0001dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c1f  00000000  00000000  0001ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e8f7  00000000  00000000  0001fa5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c51  00000000  00000000  0003e356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba427  00000000  00000000  00051fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c3ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043bc  00000000  00000000  0010c414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001107d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006758 	.word	0x08006758

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006758 	.word	0x08006758

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <delay_us>:
 *  Created on: Jul 12, 2025
 *      Author: serenasavarese
 */
#include <HCSR04.h>

void delay_us(uint16_t us, TIM_HandleTypeDef * htim) {
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(htim, 0);  // reset counter
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(htim) < us);
 80008b8:	bf00      	nop
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008c0:	88fb      	ldrh	r3, [r7, #6]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d3f9      	bcc.n	80008ba <delay_us+0x16>
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <HCSR04_Trigger>:

void HCSR04_Trigger(GPIO_TypeDef * GPIO, uint16_t PIN, TIM_HandleTypeDef * htim) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	460b      	mov	r3, r1
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	817b      	strh	r3, [r7, #10]
    HAL_GPIO_WritePin(GPIO, PIN, GPIO_PIN_SET);
 80008e2:	897b      	ldrh	r3, [r7, #10]
 80008e4:	2201      	movs	r2, #1
 80008e6:	4619      	mov	r1, r3
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f001 fb55 	bl	8001f98 <HAL_GPIO_WritePin>
    delay_us(10, htim);                                         // 10 us
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	200a      	movs	r0, #10
 80008f2:	f7ff ffd7 	bl	80008a4 <delay_us>
    HAL_GPIO_WritePin(GPIO, PIN, GPIO_PIN_RESET);
 80008f6:	897b      	ldrh	r3, [r7, #10]
 80008f8:	2200      	movs	r2, #0
 80008fa:	4619      	mov	r1, r3
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f001 fb4b 	bl	8001f98 <HAL_GPIO_WritePin>
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <comparatore>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int comparatore(const void *a, const void *b) {
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	6039      	str	r1, [r7, #0]
    return (*(uint32_t*)a - *(uint32_t*)b);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	1ad3      	subs	r3, r2, r3
}
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <calcola_mediana>:

uint32_t calcola_mediana(uint32_t *buffer, uint8_t size) {
 800092c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	70fb      	strb	r3, [r7, #3]
 800093a:	466b      	mov	r3, sp
 800093c:	461e      	mov	r6, r3
    uint32_t copia[size];
 800093e:	78f9      	ldrb	r1, [r7, #3]
 8000940:	460b      	mov	r3, r1
 8000942:	3b01      	subs	r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	b2cb      	uxtb	r3, r1
 8000948:	2200      	movs	r2, #0
 800094a:	4698      	mov	r8, r3
 800094c:	4691      	mov	r9, r2
 800094e:	f04f 0200 	mov.w	r2, #0
 8000952:	f04f 0300 	mov.w	r3, #0
 8000956:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800095a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800095e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000962:	b2cb      	uxtb	r3, r1
 8000964:	2200      	movs	r2, #0
 8000966:	461c      	mov	r4, r3
 8000968:	4615      	mov	r5, r2
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	f04f 0300 	mov.w	r3, #0
 8000972:	016b      	lsls	r3, r5, #5
 8000974:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000978:	0162      	lsls	r2, r4, #5
 800097a:	460b      	mov	r3, r1
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	3307      	adds	r3, #7
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	ebad 0d03 	sub.w	sp, sp, r3
 8000988:	466b      	mov	r3, sp
 800098a:	3303      	adds	r3, #3
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	60bb      	str	r3, [r7, #8]
    memcpy(copia, buffer, size * sizeof(uint32_t));
 8000992:	78fb      	ldrb	r3, [r7, #3]
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	461a      	mov	r2, r3
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	68b8      	ldr	r0, [r7, #8]
 800099c:	f005 fece 	bl	800673c <memcpy>
    qsort(copia, size, sizeof(uint32_t), comparatore);
 80009a0:	78f9      	ldrb	r1, [r7, #3]
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <calcola_mediana+0x9c>)
 80009a4:	2204      	movs	r2, #4
 80009a6:	68b8      	ldr	r0, [r7, #8]
 80009a8:	f005 fd55 	bl	8006456 <qsort>
    return copia[size / 2];
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	085b      	lsrs	r3, r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	461a      	mov	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ba:	46b5      	mov	sp, r6
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009c6:	bf00      	nop
 80009c8:	0800090b 	.word	0x0800090b

080009cc <Set_Servo_Angle>:


void Set_Servo_Angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle) {
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	4613      	mov	r3, r2
 80009d8:	71fb      	strb	r3, [r7, #7]

	uint32_t pulse_length = 210 + (angle * (1050 - 210)/180);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f44f 7252 	mov.w	r2, #840	@ 0x348
 80009e0:	fb02 f303 	mul.w	r3, r2, r3
 80009e4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <Set_Servo_Angle+0x90>)
 80009e6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ea:	441a      	add	r2, r3
 80009ec:	11d2      	asrs	r2, r2, #7
 80009ee:	17db      	asrs	r3, r3, #31
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	33d2      	adds	r3, #210	@ 0xd2
 80009f4:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d104      	bne.n	8000a06 <Set_Servo_Angle+0x3a>
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a04:	e023      	b.n	8000a4e <Set_Servo_Angle+0x82>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d104      	bne.n	8000a16 <Set_Servo_Angle+0x4a>
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000a14:	e01b      	b.n	8000a4e <Set_Servo_Angle+0x82>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	2b08      	cmp	r3, #8
 8000a1a:	d104      	bne.n	8000a26 <Set_Servo_Angle+0x5a>
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000a24:	e013      	b.n	8000a4e <Set_Servo_Angle+0x82>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b0c      	cmp	r3, #12
 8000a2a:	d104      	bne.n	8000a36 <Set_Servo_Angle+0x6a>
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a34:	e00b      	b.n	8000a4e <Set_Servo_Angle+0x82>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	2b10      	cmp	r3, #16
 8000a3a:	d104      	bne.n	8000a46 <Set_Servo_Angle+0x7a>
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000a44:	e003      	b.n	8000a4e <Set_Servo_Angle+0x82>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000a4e:	bf00      	nop
 8000a50:	371c      	adds	r7, #28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	b60b60b7 	.word	0xb60b60b7

08000a60 <delta_variation>:

bool delta_variation(){
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
	uint32_t delta;

    if (s2.distance_cm > s2_distance_cm_old){
 8000a66:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <delta_variation+0x90>)
 8000a68:	691a      	ldr	r2, [r3, #16]
 8000a6a:	4b22      	ldr	r3, [pc, #136]	@ (8000af4 <delta_variation+0x94>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d906      	bls.n	8000a80 <delta_variation+0x20>
        delta = s2.distance_cm - s2_distance_cm_old;}
 8000a72:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <delta_variation+0x90>)
 8000a74:	691a      	ldr	r2, [r3, #16]
 8000a76:	4b1f      	ldr	r3, [pc, #124]	@ (8000af4 <delta_variation+0x94>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	e008      	b.n	8000a92 <delta_variation+0x32>
    else{
        delta = (0xFFFF - s2.distance_cm) + s2_distance_cm_old;}
 8000a80:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <delta_variation+0x94>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <delta_variation+0x90>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000a8e:	33ff      	adds	r3, #255	@ 0xff
 8000a90:	607b      	str	r3, [r7, #4]

	bool condition = (float) delta > (float) h_max*0.05;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a9c:	ee17 0a90 	vmov	r0, s15
 8000aa0:	f7ff fe20 	bl	80006e4 <__aeabi_f2d>
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460d      	mov	r5, r1
 8000aa8:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8000af8 <delta_variation+0x98>
 8000aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab0:	ee17 0a90 	vmov	r0, s15
 8000ab4:	f7ff fe16 	bl	80006e4 <__aeabi_f2d>
 8000ab8:	a30b      	add	r3, pc, #44	@ (adr r3, 8000ae8 <delta_variation+0x88>)
 8000aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000abe:	f7ff fb83 	bl	80001c8 <__aeabi_dmul>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	460e      	mov	r6, r1
 8000aca:	4620      	mov	r0, r4
 8000acc:	4629      	mov	r1, r5
 8000ace:	f7ff fedf 	bl	8000890 <__aeabi_dcmpgt>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <delta_variation+0x7c>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	461e      	mov	r6, r3
 8000adc:	70fe      	strb	r6, [r7, #3]

	return condition;
 8000ade:	78fb      	ldrb	r3, [r7, #3]

}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae8:	9999999a 	.word	0x9999999a
 8000aec:	3fa99999 	.word	0x3fa99999
 8000af0:	2000049c 	.word	0x2000049c
 8000af4:	200004b0 	.word	0x200004b0
 8000af8:	0000000a 	.word	0x0000000a

08000afc <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

	if (htim == &htim3){
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a68      	ldr	r2, [pc, #416]	@ (8000ca8 <HAL_TIM_IC_CaptureCallback+0x1ac>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d162      	bne.n	8000bd2 <HAL_TIM_IC_CaptureCallback+0xd6>
		 if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7f1b      	ldrb	r3, [r3, #28]
 8000b10:	2b08      	cmp	r3, #8
 8000b12:	d15e      	bne.n	8000bd2 <HAL_TIM_IC_CaptureCallback+0xd6>
		        if (s1.is_first_capture == 0) {
 8000b14:	4b65      	ldr	r3, [pc, #404]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b16:	7a1b      	ldrb	r3, [r3, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d11a      	bne.n	8000b52 <HAL_TIM_IC_CaptureCallback+0x56>
		            s1.ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000b1c:	210c      	movs	r1, #12
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f003 fdb6 	bl	8004690 <HAL_TIM_ReadCapturedValue>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4a61      	ldr	r2, [pc, #388]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b28:	6013      	str	r3, [r2, #0]
		            s1.is_first_capture = 1;
 8000b2a:	4b60      	ldr	r3, [pc, #384]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	721a      	strb	r2, [r3, #8]

		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6a1a      	ldr	r2, [r3, #32]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8000b3e:	621a      	str	r2, [r3, #32]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6a1a      	ldr	r2, [r3, #32]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000b4e:	621a      	str	r2, [r3, #32]
 8000b50:	e03f      	b.n	8000bd2 <HAL_TIM_IC_CaptureCallback+0xd6>
		        } else {
		            s1.ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000b52:	210c      	movs	r1, #12
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f003 fd9b 	bl	8004690 <HAL_TIM_ReadCapturedValue>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	4a53      	ldr	r2, [pc, #332]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b5e:	6053      	str	r3, [r2, #4]
		            __HAL_TIM_SET_COUNTER(htim, 0);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	@ 0x24

		            if (s1.ic_val2 > s1.ic_val1)
 8000b68:	4b50      	ldr	r3, [pc, #320]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d907      	bls.n	8000b84 <HAL_TIM_IC_CaptureCallback+0x88>
		                s1.difference = s1.ic_val2 - s1.ic_val1;
 8000b74:	4b4d      	ldr	r3, [pc, #308]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	4b4c      	ldr	r3, [pc, #304]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	4a4b      	ldr	r2, [pc, #300]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b80:	60d3      	str	r3, [r2, #12]
 8000b82:	e009      	b.n	8000b98 <HAL_TIM_IC_CaptureCallback+0x9c>
		            else
		                s1.difference = (0xFFFF - s1.ic_val1) + s1.ic_val2;
 8000b84:	4b49      	ldr	r3, [pc, #292]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	4b48      	ldr	r3, [pc, #288]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000b92:	33ff      	adds	r3, #255	@ 0xff
 8000b94:	4a45      	ldr	r2, [pc, #276]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b96:	60d3      	str	r3, [r2, #12]

		            s1.distance_cm = (s1.difference * 343) / 20000;
 8000b98:	4b44      	ldr	r3, [pc, #272]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	f240 1257 	movw	r2, #343	@ 0x157
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	4a42      	ldr	r2, [pc, #264]	@ (8000cb0 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8000baa:	0b9b      	lsrs	r3, r3, #14
 8000bac:	4a3f      	ldr	r2, [pc, #252]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000bae:	6113      	str	r3, [r2, #16]

		            s1.is_first_capture = 0;
 8000bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8000cac <HAL_TIM_IC_CaptureCallback+0x1b0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	721a      	strb	r2, [r3, #8]
		            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6a1a      	ldr	r2, [r3, #32]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8000bc4:	621a      	str	r2, [r3, #32]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6a12      	ldr	r2, [r2, #32]
 8000bd0:	621a      	str	r2, [r3, #32]
		        }
		    }
	}


	if (htim == &htim4){
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a37      	ldr	r2, [pc, #220]	@ (8000cb4 <HAL_TIM_IC_CaptureCallback+0x1b8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d162      	bne.n	8000ca0 <HAL_TIM_IC_CaptureCallback+0x1a4>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7f1b      	ldrb	r3, [r3, #28]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d15e      	bne.n	8000ca0 <HAL_TIM_IC_CaptureCallback+0x1a4>
		            if (s2.is_first_capture == 0) {
 8000be2:	4b35      	ldr	r3, [pc, #212]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000be4:	7a1b      	ldrb	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d11a      	bne.n	8000c20 <HAL_TIM_IC_CaptureCallback+0x124>
		                s2.ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000bea:	2100      	movs	r1, #0
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f003 fd4f 	bl	8004690 <HAL_TIM_ReadCapturedValue>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a30      	ldr	r2, [pc, #192]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000bf6:	6013      	str	r3, [r2, #0]
		                s2.is_first_capture = 1;
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	721a      	strb	r2, [r3, #8]

		                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6a1a      	ldr	r2, [r3, #32]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 020a 	bic.w	r2, r2, #10
 8000c0c:	621a      	str	r2, [r3, #32]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6a1a      	ldr	r2, [r3, #32]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f042 0202 	orr.w	r2, r2, #2
 8000c1c:	621a      	str	r2, [r3, #32]
		                s2.is_first_capture = 0;
		                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		            }
		        }
	}
}
 8000c1e:	e03f      	b.n	8000ca0 <HAL_TIM_IC_CaptureCallback+0x1a4>
		                s2.ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000c20:	2100      	movs	r1, #0
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f003 fd34 	bl	8004690 <HAL_TIM_ReadCapturedValue>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4a23      	ldr	r2, [pc, #140]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000c2c:	6053      	str	r3, [r2, #4]
		                __HAL_TIM_SET_COUNTER(htim, 0);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24
		                if (s2.ic_val2 > s2.ic_val1)
 8000c36:	4b20      	ldr	r3, [pc, #128]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d907      	bls.n	8000c52 <HAL_TIM_IC_CaptureCallback+0x156>
		                    s2.difference = s2.ic_val2 - s2.ic_val1;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000c4e:	60d3      	str	r3, [r2, #12]
 8000c50:	e009      	b.n	8000c66 <HAL_TIM_IC_CaptureCallback+0x16a>
		                    s2.difference = (0xFFFF - s2.ic_val1) + s2.ic_val2;
 8000c52:	4b19      	ldr	r3, [pc, #100]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000c60:	33ff      	adds	r3, #255	@ 0xff
 8000c62:	4a15      	ldr	r2, [pc, #84]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000c64:	60d3      	str	r3, [r2, #12]
		                s2.distance_cm = (s2.difference * 343) / 20000;
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	f240 1257 	movw	r2, #343	@ 0x157
 8000c6e:	fb02 f303 	mul.w	r3, r2, r3
 8000c72:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb0 <HAL_TIM_IC_CaptureCallback+0x1b4>)
 8000c74:	fba2 2303 	umull	r2, r3, r2, r3
 8000c78:	0b9b      	lsrs	r3, r3, #14
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000c7c:	6113      	str	r3, [r2, #16]
		                s2.is_first_capture = 0;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_TIM_IC_CaptureCallback+0x1bc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	721a      	strb	r2, [r3, #8]
		                __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6a1a      	ldr	r2, [r3, #32]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 020a 	bic.w	r2, r2, #10
 8000c92:	621a      	str	r2, [r3, #32]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6a12      	ldr	r2, [r2, #32]
 8000c9e:	621a      	str	r2, [r3, #32]
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000074 	.word	0x20000074
 8000cac:	20000488 	.word	0x20000488
 8000cb0:	d1b71759 	.word	0xd1b71759
 8000cb4:	200000c0 	.word	0x200000c0
 8000cb8:	2000049c 	.word	0x2000049c

08000cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc2:	f000 fdd7 	bl	8001874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc6:	f000 f911 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cca:	f000 fadf 	bl	800128c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000cce:	f000 fabb 	bl	8001248 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000cd2:	f000 f96b 	bl	8000fac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cd6:	f000 f9df 	bl	8001098 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cda:	f000 fa31 	bl	8001140 <MX_TIM4_Init>
  MX_UART5_Init();
 8000cde:	f000 fa83 	bl	80011e8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8000ce2:	210c      	movs	r1, #12
 8000ce4:	4872      	ldr	r0, [pc, #456]	@ (8000eb0 <main+0x1f4>)
 8000ce6:	f003 f815 	bl	8003d14 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000cea:	2100      	movs	r1, #0
 8000cec:	4871      	ldr	r0, [pc, #452]	@ (8000eb4 <main+0x1f8>)
 8000cee:	f003 f811 	bl	8003d14 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4870      	ldr	r0, [pc, #448]	@ (8000eb8 <main+0x1fc>)
 8000cf6:	f002 feb5 	bl	8003a64 <HAL_TIM_PWM_Start>

  Set_Servo_Angle(&htim2, TIM_CHANNEL_1, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	486e      	ldr	r0, [pc, #440]	@ (8000eb8 <main+0x1fc>)
 8000d00:	f7ff fe64 	bl	80009cc <Set_Servo_Angle>
  HAL_Delay(500);
 8000d04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d08:	f000 fe1a 	bl	8001940 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HCSR04_Trigger(GPIOA, GPIO_PIN_8, &htim3);
 8000d0c:	4a68      	ldr	r2, [pc, #416]	@ (8000eb0 <main+0x1f4>)
 8000d0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d16:	f7ff fddd 	bl	80008d4 <HCSR04_Trigger>
	  HAL_Delay(100);
 8000d1a:	2064      	movs	r0, #100	@ 0x64
 8000d1c:	f000 fe10 	bl	8001940 <HAL_Delay>

	  buffer_misure[indice_buffer] = s1.distance_cm;
 8000d20:	4b66      	ldr	r3, [pc, #408]	@ (8000ebc <main+0x200>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	4b66      	ldr	r3, [pc, #408]	@ (8000ec0 <main+0x204>)
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	4a66      	ldr	r2, [pc, #408]	@ (8000ec4 <main+0x208>)
 8000d2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  indice_buffer = (indice_buffer + 1) % NUM_MISURAZIONI;
 8000d30:	4b62      	ldr	r3, [pc, #392]	@ (8000ebc <main+0x200>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	4b64      	ldr	r3, [pc, #400]	@ (8000ec8 <main+0x20c>)
 8000d38:	fb83 1302 	smull	r1, r3, r3, r2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	1099      	asrs	r1, r3, #2
 8000d40:	17d3      	asrs	r3, r2, #31
 8000d42:	1ac9      	subs	r1, r1, r3
 8000d44:	460b      	mov	r3, r1
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	1ad1      	subs	r1, r2, r3
 8000d4c:	b2ca      	uxtb	r2, r1
 8000d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8000ebc <main+0x200>)
 8000d50:	701a      	strb	r2, [r3, #0]
	  if (indice_buffer == 0) buffer_pieno = true;
 8000d52:	4b5a      	ldr	r3, [pc, #360]	@ (8000ebc <main+0x200>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d102      	bne.n	8000d60 <main+0xa4>
 8000d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8000ecc <main+0x210>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]

	  if (buffer_pieno) {
 8000d60:	4b5a      	ldr	r3, [pc, #360]	@ (8000ecc <main+0x210>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d025      	beq.n	8000db4 <main+0xf8>
	      uint32_t mediana = calcola_mediana(buffer_misure, NUM_MISURAZIONI);
 8000d68:	2107      	movs	r1, #7
 8000d6a:	4856      	ldr	r0, [pc, #344]	@ (8000ec4 <main+0x208>)
 8000d6c:	f7ff fdde 	bl	800092c <calcola_mediana>
 8000d70:	6038      	str	r0, [r7, #0]

	      if (!oggettoRilevato) {
 8000d72:	4b57      	ldr	r3, [pc, #348]	@ (8000ed0 <main+0x214>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	f083 0301 	eor.w	r3, r3, #1
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00b      	beq.n	8000d98 <main+0xdc>
	          if (mediana > threeshold_e && mediana < threeshold_a) {
 8000d80:	2203      	movs	r2, #3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d912      	bls.n	8000dae <main+0xf2>
 8000d88:	2212      	movs	r2, #18
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d20e      	bcs.n	8000dae <main+0xf2>
	              oggettoRilevato = true;
 8000d90:	4b4f      	ldr	r3, [pc, #316]	@ (8000ed0 <main+0x214>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e00a      	b.n	8000dae <main+0xf2>
	          }

	      } else {
	          if (mediana >= threeshold_a || mediana <= threeshold_e) {
 8000d98:	2212      	movs	r2, #18
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d203      	bcs.n	8000da8 <main+0xec>
 8000da0:	2203      	movs	r2, #3
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d802      	bhi.n	8000dae <main+0xf2>
	                  oggettoRilevato = false;
 8000da8:	4b49      	ldr	r3, [pc, #292]	@ (8000ed0 <main+0x214>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
	          }
	      }
          buffer_pieno = false;
 8000dae:	4b47      	ldr	r3, [pc, #284]	@ (8000ecc <main+0x210>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
	  }

	  switch (statoCorrente) {
 8000db4:	4b47      	ldr	r3, [pc, #284]	@ (8000ed4 <main+0x218>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d85b      	bhi.n	8000e74 <main+0x1b8>
 8000dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc4 <main+0x108>)
 8000dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc2:	bf00      	nop
 8000dc4:	08000dd5 	.word	0x08000dd5
 8000dc8:	08000de5 	.word	0x08000de5
 8000dcc:	08000e1f 	.word	0x08000e1f
 8000dd0:	08000e35 	.word	0x08000e35
	    case STATO_IN_ATTESA_A_0:

	      if (oggettoRilevato) {
 8000dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed0 <main+0x214>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d048      	beq.n	8000e6e <main+0x1b2>

	        statoCorrente = STATO_IN_ROTAZIONE_VERSO_180;
 8000ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed4 <main+0x218>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8000de2:	e044      	b.n	8000e6e <main+0x1b2>

	    case STATO_IN_ROTAZIONE_VERSO_180:

	      for (uint8_t angle = theta0; angle <= thetaf; angle += 5) {
 8000de4:	2300      	movs	r3, #0
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	e00b      	b.n	8000e02 <main+0x146>
	        Set_Servo_Angle(&htim2, TIM_CHANNEL_1, angle);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	461a      	mov	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	4831      	ldr	r0, [pc, #196]	@ (8000eb8 <main+0x1fc>)
 8000df2:	f7ff fdeb 	bl	80009cc <Set_Servo_Angle>
	        HAL_Delay(50);
 8000df6:	2032      	movs	r0, #50	@ 0x32
 8000df8:	f000 fda2 	bl	8001940 <HAL_Delay>
	      for (uint8_t angle = theta0; angle <= thetaf; angle += 5) {
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	3305      	adds	r3, #5
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	2264      	movs	r2, #100	@ 0x64
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d9ef      	bls.n	8000dea <main+0x12e>
	      }
	      Set_Servo_Angle(&htim2, TIM_CHANNEL_1, thetaf);
 8000e0a:	2364      	movs	r3, #100	@ 0x64
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4829      	ldr	r0, [pc, #164]	@ (8000eb8 <main+0x1fc>)
 8000e12:	f7ff fddb 	bl	80009cc <Set_Servo_Angle>


	      statoCorrente = STATO_IN_ATTESA_A_180;
 8000e16:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed4 <main+0x218>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	701a      	strb	r2, [r3, #0]
	      break;
 8000e1c:	e02a      	b.n	8000e74 <main+0x1b8>

	    case STATO_IN_ATTESA_A_180:

	      if (!oggettoRilevato) {
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed0 <main+0x214>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	f083 0301 	eor.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d022      	beq.n	8000e72 <main+0x1b6>

	        statoCorrente = STATO_IN_ROTAZIONE_VERSO_0;
 8000e2c:	4b29      	ldr	r3, [pc, #164]	@ (8000ed4 <main+0x218>)
 8000e2e:	2203      	movs	r2, #3
 8000e30:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8000e32:	e01e      	b.n	8000e72 <main+0x1b6>

	    case STATO_IN_ROTAZIONE_VERSO_0:

	      for (uint8_t angle = thetaf; angle > theta0; angle -= 5) {
 8000e34:	2364      	movs	r3, #100	@ 0x64
 8000e36:	71bb      	strb	r3, [r7, #6]
 8000e38:	e00b      	b.n	8000e52 <main+0x196>
	        Set_Servo_Angle(&htim2, TIM_CHANNEL_1, angle);
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2100      	movs	r1, #0
 8000e40:	481d      	ldr	r0, [pc, #116]	@ (8000eb8 <main+0x1fc>)
 8000e42:	f7ff fdc3 	bl	80009cc <Set_Servo_Angle>
	        HAL_Delay(50);
 8000e46:	2032      	movs	r0, #50	@ 0x32
 8000e48:	f000 fd7a 	bl	8001940 <HAL_Delay>
	      for (uint8_t angle = thetaf; angle > theta0; angle -= 5) {
 8000e4c:	79bb      	ldrb	r3, [r7, #6]
 8000e4e:	3b05      	subs	r3, #5
 8000e50:	71bb      	strb	r3, [r7, #6]
 8000e52:	2200      	movs	r2, #0
 8000e54:	79bb      	ldrb	r3, [r7, #6]
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d8ef      	bhi.n	8000e3a <main+0x17e>
	      }
	      Set_Servo_Angle(&htim2, TIM_CHANNEL_1, theta0);
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4815      	ldr	r0, [pc, #84]	@ (8000eb8 <main+0x1fc>)
 8000e62:	f7ff fdb3 	bl	80009cc <Set_Servo_Angle>


	      statoCorrente = STATO_IN_ATTESA_A_0;
 8000e66:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed4 <main+0x218>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
	      break;
 8000e6c:	e002      	b.n	8000e74 <main+0x1b8>
	      break;
 8000e6e:	bf00      	nop
 8000e70:	e000      	b.n	8000e74 <main+0x1b8>
	      break;
 8000e72:	bf00      	nop
	  }


	  HCSR04_Trigger(GPIOD, GPIO_PIN_13, &htim4);
 8000e74:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb4 <main+0x1f8>)
 8000e76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e7a:	4817      	ldr	r0, [pc, #92]	@ (8000ed8 <main+0x21c>)
 8000e7c:	f7ff fd2a 	bl	80008d4 <HCSR04_Trigger>
	  HAL_Delay(100);
 8000e80:	2064      	movs	r0, #100	@ 0x64
 8000e82:	f000 fd5d 	bl	8001940 <HAL_Delay>

	  if(delta_variation()){
 8000e86:	f7ff fdeb 	bl	8000a60 <delta_variation>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00a      	beq.n	8000ea6 <main+0x1ea>
		      HAL_UART_Transmit(&huart5, (uint8_t *) &s2.distance_cm, 4, HAL_MAX_DELAY);
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	2204      	movs	r2, #4
 8000e96:	4911      	ldr	r1, [pc, #68]	@ (8000edc <main+0x220>)
 8000e98:	4811      	ldr	r0, [pc, #68]	@ (8000ee0 <main+0x224>)
 8000e9a:	f004 faa1 	bl	80053e0 <HAL_UART_Transmit>
	  		  s2_distance_cm_old = s2.distance_cm;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <main+0x228>)
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	4a11      	ldr	r2, [pc, #68]	@ (8000ee8 <main+0x22c>)
 8000ea4:	6013      	str	r3, [r2, #0]
	  	  }

	  HAL_Delay(100);
 8000ea6:	2064      	movs	r0, #100	@ 0x64
 8000ea8:	f000 fd4a 	bl	8001940 <HAL_Delay>
	  HCSR04_Trigger(GPIOA, GPIO_PIN_8, &htim3);
 8000eac:	e72e      	b.n	8000d0c <main+0x50>
 8000eae:	bf00      	nop
 8000eb0:	20000074 	.word	0x20000074
 8000eb4:	200000c0 	.word	0x200000c0
 8000eb8:	20000028 	.word	0x20000028
 8000ebc:	20000484 	.word	0x20000484
 8000ec0:	20000488 	.word	0x20000488
 8000ec4:	20000468 	.word	0x20000468
 8000ec8:	92492493 	.word	0x92492493
 8000ecc:	20000485 	.word	0x20000485
 8000ed0:	20000486 	.word	0x20000486
 8000ed4:	200004b4 	.word	0x200004b4
 8000ed8:	48000c00 	.word	0x48000c00
 8000edc:	200004ac 	.word	0x200004ac
 8000ee0:	2000010c 	.word	0x2000010c
 8000ee4:	2000049c 	.word	0x2000049c
 8000ee8:	200004b0 	.word	0x200004b0

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b09e      	sub	sp, #120	@ 0x78
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ef6:	2228      	movs	r2, #40	@ 0x28
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f005 fbf2 	bl	80066e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f10:	463b      	mov	r3, r7
 8000f12:	223c      	movs	r2, #60	@ 0x3c
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f005 fbe4 	bl	80066e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f36:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f38:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f3c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 f908 	bl	8002158 <HAL_RCC_OscConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f4e:	f000 fa53 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f52:	230f      	movs	r3, #15
 8000f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f56:	2302      	movs	r3, #2
 8000f58:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f68:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 f900 	bl	8003174 <HAL_RCC_ClockConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f7a:	f000 fa3d 	bl	80013f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_UART5;
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <SystemClock_Config+0xbc>)
 8000f80:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 fb02 	bl	8003598 <HAL_RCCEx_PeriphCLKConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f9a:	f000 fa2d 	bl	80013f8 <Error_Handler>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3778      	adds	r7, #120	@ 0x78
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	00020010 	.word	0x00020010

08000fac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	@ 0x38
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
 8000fda:	615a      	str	r2, [r3, #20]
 8000fdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fde:	4b2d      	ldr	r3, [pc, #180]	@ (8001094 <MX_TIM2_Init+0xe8>)
 8000fe0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8001094 <MX_TIM2_Init+0xe8>)
 8000fe8:	22c7      	movs	r2, #199	@ 0xc7
 8000fea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b29      	ldr	r3, [pc, #164]	@ (8001094 <MX_TIM2_Init+0xe8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8000ff2:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <MX_TIM2_Init+0xe8>)
 8000ff4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000ff8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <MX_TIM2_Init+0xe8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <MX_TIM2_Init+0xe8>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001006:	4823      	ldr	r0, [pc, #140]	@ (8001094 <MX_TIM2_Init+0xe8>)
 8001008:	f002 fc74 	bl	80038f4 <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001012:	f000 f9f1 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001016:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800101c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001020:	4619      	mov	r1, r3
 8001022:	481c      	ldr	r0, [pc, #112]	@ (8001094 <MX_TIM2_Init+0xe8>)
 8001024:	f003 fa6a 	bl	80044fc <HAL_TIM_ConfigClockSource>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800102e:	f000 f9e3 	bl	80013f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001032:	4818      	ldr	r0, [pc, #96]	@ (8001094 <MX_TIM2_Init+0xe8>)
 8001034:	f002 fcb5 	bl	80039a2 <HAL_TIM_PWM_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800103e:	f000 f9db 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4810      	ldr	r0, [pc, #64]	@ (8001094 <MX_TIM2_Init+0xe8>)
 8001052:	f004 f8d9 	bl	8005208 <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800105c:	f000 f9cc 	bl	80013f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001060:	2360      	movs	r3, #96	@ 0x60
 8001062:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	4807      	ldr	r0, [pc, #28]	@ (8001094 <MX_TIM2_Init+0xe8>)
 8001078:	f003 f92c 	bl	80042d4 <HAL_TIM_PWM_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001082:	f000 f9b9 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001086:	4803      	ldr	r0, [pc, #12]	@ (8001094 <MX_TIM2_Init+0xe8>)
 8001088:	f000 fa86 	bl	8001598 <HAL_TIM_MspPostInit>

}
 800108c:	bf00      	nop
 800108e:	3738      	adds	r7, #56	@ 0x38
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000028 	.word	0x20000028

08001098 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010b6:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <MX_TIM3_Init+0xa0>)
 80010b8:	4a20      	ldr	r2, [pc, #128]	@ (800113c <MX_TIM3_Init+0xa4>)
 80010ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <MX_TIM3_Init+0xa0>)
 80010be:	222f      	movs	r2, #47	@ 0x2f
 80010c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <MX_TIM3_Init+0xa0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <MX_TIM3_Init+0xa0>)
 80010ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <MX_TIM3_Init+0xa0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d6:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <MX_TIM3_Init+0xa0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80010dc:	4816      	ldr	r0, [pc, #88]	@ (8001138 <MX_TIM3_Init+0xa0>)
 80010de:	f002 fdc1 	bl	8003c64 <HAL_TIM_IC_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80010e8:	f000 f986 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	480f      	ldr	r0, [pc, #60]	@ (8001138 <MX_TIM3_Init+0xa0>)
 80010fc:	f004 f884 	bl	8005208 <HAL_TIMEx_MasterConfigSynchronization>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001106:	f000 f977 	bl	80013f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800110e:	2301      	movs	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	220c      	movs	r2, #12
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_TIM3_Init+0xa0>)
 8001122:	f003 f83b 	bl	800419c <HAL_TIM_IC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800112c:	f000 f964 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000074 	.word	0x20000074
 800113c:	40000400 	.word	0x40000400

08001140 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800115e:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <MX_TIM4_Init+0xa0>)
 8001160:	4a20      	ldr	r2, [pc, #128]	@ (80011e4 <MX_TIM4_Init+0xa4>)
 8001162:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8001164:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <MX_TIM4_Init+0xa0>)
 8001166:	222f      	movs	r2, #47	@ 0x2f
 8001168:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <MX_TIM4_Init+0xa0>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <MX_TIM4_Init+0xa0>)
 8001172:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001176:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <MX_TIM4_Init+0xa0>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <MX_TIM4_Init+0xa0>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001184:	4816      	ldr	r0, [pc, #88]	@ (80011e0 <MX_TIM4_Init+0xa0>)
 8001186:	f002 fd6d 	bl	8003c64 <HAL_TIM_IC_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001190:	f000 f932 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	480f      	ldr	r0, [pc, #60]	@ (80011e0 <MX_TIM4_Init+0xa0>)
 80011a4:	f004 f830 	bl	8005208 <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80011ae:	f000 f923 	bl	80013f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011b6:	2301      	movs	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_TIM4_Init+0xa0>)
 80011ca:	f002 ffe7 	bl	800419c <HAL_TIM_IC_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80011d4:	f000 f910 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200000c0 	.word	0x200000c0
 80011e4:	40000800 	.word	0x40000800

080011e8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011ec:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <MX_UART5_Init+0x58>)
 80011ee:	4a15      	ldr	r2, [pc, #84]	@ (8001244 <MX_UART5_Init+0x5c>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011f2:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <MX_UART5_Init+0x58>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <MX_UART5_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_UART5_Init+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <MX_UART5_Init+0x58>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <MX_UART5_Init+0x58>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <MX_UART5_Init+0x58>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <MX_UART5_Init+0x58>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121e:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <MX_UART5_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <MX_UART5_Init+0x58>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_UART5_Init+0x58>)
 800122c:	f004 f88a 	bl	8005344 <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001236:	f000 f8df 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000010c 	.word	0x2000010c
 8001244:	40005000 	.word	0x40005000

08001248 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800124c:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <MX_USB_PCD_Init+0x3c>)
 800124e:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <MX_USB_PCD_Init+0x40>)
 8001250:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_USB_PCD_Init+0x3c>)
 8001254:	2208      	movs	r2, #8
 8001256:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001258:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <MX_USB_PCD_Init+0x3c>)
 800125a:	2202      	movs	r2, #2
 800125c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_USB_PCD_Init+0x3c>)
 8001260:	2202      	movs	r2, #2
 8001262:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <MX_USB_PCD_Init+0x3c>)
 8001266:	2200      	movs	r2, #0
 8001268:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_USB_PCD_Init+0x3c>)
 800126c:	2200      	movs	r2, #0
 800126e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <MX_USB_PCD_Init+0x3c>)
 8001272:	f000 fea9 	bl	8001fc8 <HAL_PCD_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800127c:	f000 f8bc 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000194 	.word	0x20000194
 8001288:	40005c00 	.word	0x40005c00

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	@ 0x30
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012a2:	4b52      	ldr	r3, [pc, #328]	@ (80013ec <MX_GPIO_Init+0x160>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4a51      	ldr	r2, [pc, #324]	@ (80013ec <MX_GPIO_Init+0x160>)
 80012a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ac:	6153      	str	r3, [r2, #20]
 80012ae:	4b4f      	ldr	r3, [pc, #316]	@ (80013ec <MX_GPIO_Init+0x160>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4b4c      	ldr	r3, [pc, #304]	@ (80013ec <MX_GPIO_Init+0x160>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4a4b      	ldr	r2, [pc, #300]	@ (80013ec <MX_GPIO_Init+0x160>)
 80012c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80012c4:	6153      	str	r3, [r2, #20]
 80012c6:	4b49      	ldr	r3, [pc, #292]	@ (80013ec <MX_GPIO_Init+0x160>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d2:	4b46      	ldr	r3, [pc, #280]	@ (80013ec <MX_GPIO_Init+0x160>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a45      	ldr	r2, [pc, #276]	@ (80013ec <MX_GPIO_Init+0x160>)
 80012d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012dc:	6153      	str	r3, [r2, #20]
 80012de:	4b43      	ldr	r3, [pc, #268]	@ (80013ec <MX_GPIO_Init+0x160>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b40      	ldr	r3, [pc, #256]	@ (80013ec <MX_GPIO_Init+0x160>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a3f      	ldr	r2, [pc, #252]	@ (80013ec <MX_GPIO_Init+0x160>)
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f4:	6153      	str	r3, [r2, #20]
 80012f6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ec <MX_GPIO_Init+0x160>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <MX_GPIO_Init+0x160>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a39      	ldr	r2, [pc, #228]	@ (80013ec <MX_GPIO_Init+0x160>)
 8001308:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800130c:	6153      	str	r3, [r2, #20]
 800130e:	4b37      	ldr	r3, [pc, #220]	@ (80013ec <MX_GPIO_Init+0x160>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <MX_GPIO_Init+0x160>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a33      	ldr	r2, [pc, #204]	@ (80013ec <MX_GPIO_Init+0x160>)
 8001320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001324:	6153      	str	r3, [r2, #20]
 8001326:	4b31      	ldr	r3, [pc, #196]	@ (80013ec <MX_GPIO_Init+0x160>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2108      	movs	r1, #8
 8001336:	482e      	ldr	r0, [pc, #184]	@ (80013f0 <MX_GPIO_Init+0x164>)
 8001338:	f000 fe2e 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD13_Trigger_2_GPIO_Port, PD13_Trigger_2_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001342:	482c      	ldr	r0, [pc, #176]	@ (80013f4 <MX_GPIO_Init+0x168>)
 8001344:	f000 fe28 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA8_Trigger_1_GPIO_Port, PA8_Trigger_1_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800134e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001352:	f000 fe21 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001356:	2337      	movs	r3, #55	@ 0x37
 8001358:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800135a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	4821      	ldr	r0, [pc, #132]	@ (80013f0 <MX_GPIO_Init+0x164>)
 800136c:	f000 fc9a 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001370:	2308      	movs	r3, #8
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	481a      	ldr	r0, [pc, #104]	@ (80013f0 <MX_GPIO_Init+0x164>)
 8001388:	f000 fc8c 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800138c:	2301      	movs	r3, #1
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a2:	f000 fc7f 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13_Trigger_2_Pin */
  GPIO_InitStruct.Pin = PD13_Trigger_2_Pin;
 80013a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(PD13_Trigger_2_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	480d      	ldr	r0, [pc, #52]	@ (80013f4 <MX_GPIO_Init+0x168>)
 80013c0:	f000 fc70 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8_Trigger_1_Pin */
  GPIO_InitStruct.Pin = PA8_Trigger_1_Pin;
 80013c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(PA8_Trigger_1_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e0:	f000 fc60 	bl	8001ca4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013e4:	bf00      	nop
 80013e6:	3730      	adds	r7, #48	@ 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	48001000 	.word	0x48001000
 80013f4:	48000c00 	.word	0x48000c00

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <Error_Handler+0x8>

08001404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <HAL_MspInit+0x44>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	4a0e      	ldr	r2, [pc, #56]	@ (8001448 <HAL_MspInit+0x44>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6193      	str	r3, [r2, #24]
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <HAL_MspInit+0x44>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <HAL_MspInit+0x44>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <HAL_MspInit+0x44>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_MspInit+0x44>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800143a:	2007      	movs	r0, #7
 800143c:	f000 fb74 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800145c:	d10b      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <HAL_TIM_Base_MspInit+0x38>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4a08      	ldr	r2, [pc, #32]	@ (8001484 <HAL_TIM_Base_MspInit+0x38>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	61d3      	str	r3, [r2, #28]
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_TIM_Base_MspInit+0x38>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08c      	sub	sp, #48	@ 0x30
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a37      	ldr	r2, [pc, #220]	@ (8001584 <HAL_TIM_IC_MspInit+0xfc>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d131      	bne.n	800150e <HAL_TIM_IC_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014aa:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <HAL_TIM_IC_MspInit+0x100>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a36      	ldr	r2, [pc, #216]	@ (8001588 <HAL_TIM_IC_MspInit+0x100>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <HAL_TIM_IC_MspInit+0x100>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <HAL_TIM_IC_MspInit+0x100>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	4a30      	ldr	r2, [pc, #192]	@ (8001588 <HAL_TIM_IC_MspInit+0x100>)
 80014c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014cc:	6153      	str	r3, [r2, #20]
 80014ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <HAL_TIM_IC_MspInit+0x100>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM3_CH4_Echo_1_Pin;
 80014da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ec:	2302      	movs	r3, #2
 80014ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM3_CH4_Echo_1_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4825      	ldr	r0, [pc, #148]	@ (800158c <HAL_TIM_IC_MspInit+0x104>)
 80014f8:	f000 fbd4 	bl	8001ca4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	201d      	movs	r0, #29
 8001502:	f000 fb1c 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001506:	201d      	movs	r0, #29
 8001508:	f000 fb35 	bl	8001b76 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800150c:	e035      	b.n	800157a <HAL_TIM_IC_MspInit+0xf2>
  else if(htim_ic->Instance==TIM4)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a1f      	ldr	r2, [pc, #124]	@ (8001590 <HAL_TIM_IC_MspInit+0x108>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d130      	bne.n	800157a <HAL_TIM_IC_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <HAL_TIM_IC_MspInit+0x100>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	4a1a      	ldr	r2, [pc, #104]	@ (8001588 <HAL_TIM_IC_MspInit+0x100>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	61d3      	str	r3, [r2, #28]
 8001524:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <HAL_TIM_IC_MspInit+0x100>)
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_TIM_IC_MspInit+0x100>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <HAL_TIM_IC_MspInit+0x100>)
 8001536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800153a:	6153      	str	r3, [r2, #20]
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <HAL_TIM_IC_MspInit+0x100>)
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_Echo_2_Pin;
 8001548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800155a:	2302      	movs	r3, #2
 800155c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM4_CH1_Echo_2_GPIO_Port, &GPIO_InitStruct);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4619      	mov	r1, r3
 8001564:	480b      	ldr	r0, [pc, #44]	@ (8001594 <HAL_TIM_IC_MspInit+0x10c>)
 8001566:	f000 fb9d 	bl	8001ca4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	201e      	movs	r0, #30
 8001570:	f000 fae5 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001574:	201e      	movs	r0, #30
 8001576:	f000 fafe 	bl	8001b76 <HAL_NVIC_EnableIRQ>
}
 800157a:	bf00      	nop
 800157c:	3730      	adds	r7, #48	@ 0x30
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40000400 	.word	0x40000400
 8001588:	40021000 	.word	0x40021000
 800158c:	48000800 	.word	0x48000800
 8001590:	40000800 	.word	0x40000800
 8001594:	48000c00 	.word	0x48000c00

08001598 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015b8:	d11d      	bne.n	80015f6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <HAL_TIM_MspPostInit+0x68>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <HAL_TIM_MspPostInit+0x68>)
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	6153      	str	r3, [r2, #20]
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <HAL_TIM_MspPostInit+0x68>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_Servomotore_Pin;
 80015d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM2_CH1_Servomotore_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f2:	f000 fb57 	bl	8001ca4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a29      	ldr	r2, [pc, #164]	@ (80016c8 <HAL_UART_MspInit+0xc4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d14c      	bne.n	80016c0 <HAL_UART_MspInit+0xbc>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001626:	4b29      	ldr	r3, [pc, #164]	@ (80016cc <HAL_UART_MspInit+0xc8>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a28      	ldr	r2, [pc, #160]	@ (80016cc <HAL_UART_MspInit+0xc8>)
 800162c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <HAL_UART_MspInit+0xc8>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <HAL_UART_MspInit+0xc8>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a22      	ldr	r2, [pc, #136]	@ (80016cc <HAL_UART_MspInit+0xc8>)
 8001644:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001648:	6153      	str	r3, [r2, #20]
 800164a:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <HAL_UART_MspInit+0xc8>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001656:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <HAL_UART_MspInit+0xc8>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	4a1c      	ldr	r2, [pc, #112]	@ (80016cc <HAL_UART_MspInit+0xc8>)
 800165c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001660:	6153      	str	r3, [r2, #20]
 8001662:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <HAL_UART_MspInit+0xc8>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800166e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001680:	2305      	movs	r3, #5
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4811      	ldr	r0, [pc, #68]	@ (80016d0 <HAL_UART_MspInit+0xcc>)
 800168c:	f000 fb0a 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001690:	2304      	movs	r3, #4
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80016a0:	2305      	movs	r3, #5
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	480a      	ldr	r0, [pc, #40]	@ (80016d4 <HAL_UART_MspInit+0xd0>)
 80016ac:	f000 fafa 	bl	8001ca4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2035      	movs	r0, #53	@ 0x35
 80016b6:	f000 fa42 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80016ba:	2035      	movs	r0, #53	@ 0x35
 80016bc:	f000 fa5b 	bl	8001b76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	@ 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40005000 	.word	0x40005000
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000800 	.word	0x48000800
 80016d4:	48000c00 	.word	0x48000c00

080016d8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <HAL_PCD_MspInit+0x80>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d129      	bne.n	800174e <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b18      	ldr	r3, [pc, #96]	@ (800175c <HAL_PCD_MspInit+0x84>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	4a17      	ldr	r2, [pc, #92]	@ (800175c <HAL_PCD_MspInit+0x84>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001704:	6153      	str	r3, [r2, #20]
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_PCD_MspInit+0x84>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001712:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001724:	230e      	movs	r3, #14
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001732:	f000 fab7 	bl	8001ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_PCD_MspInit+0x84>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a08      	ldr	r2, [pc, #32]	@ (800175c <HAL_PCD_MspInit+0x84>)
 800173c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_PCD_MspInit+0x84>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	@ 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40005c00 	.word	0x40005c00
 800175c:	40021000 	.word	0x40021000

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <NMI_Handler+0x4>

08001768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <MemManage_Handler+0x4>

08001778 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <UsageFault_Handler+0x4>

08001788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b6:	f000 f8a3 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <TIM3_IRQHandler+0x10>)
 80017c6:	f002 fbe7 	bl	8003f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000074 	.word	0x20000074

080017d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <TIM4_IRQHandler+0x10>)
 80017da:	f002 fbdd 	bl	8003f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200000c0 	.word	0x200000c0

080017e8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <UART5_IRQHandler+0x10>)
 80017ee:	f003 fe81 	bl	80054f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000010c 	.word	0x2000010c

080017fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <SystemInit+0x20>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <SystemInit+0x20>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001820:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001858 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001824:	f7ff ffea 	bl	80017fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <LoopForever+0x6>)
  ldr r1, =_edata
 800182a:	490d      	ldr	r1, [pc, #52]	@ (8001860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <LoopForever+0xe>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001840:	4c0a      	ldr	r4, [pc, #40]	@ (800186c <LoopForever+0x16>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800184e:	f004 ff51 	bl	80066f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001852:	f7ff fa33 	bl	8000cbc <main>

08001856 <LoopForever>:

LoopForever:
    b LoopForever
 8001856:	e7fe      	b.n	8001856 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001858:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800185c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001860:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001864:	080067b0 	.word	0x080067b0
  ldr r2, =_sbss
 8001868:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800186c:	200004bc 	.word	0x200004bc

08001870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001870:	e7fe      	b.n	8001870 <ADC1_2_IRQHandler>
	...

08001874 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <HAL_Init+0x28>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	@ (800189c <HAL_Init+0x28>)
 800187e:	f043 0310 	orr.w	r3, r3, #16
 8001882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 f94f 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188a:	2000      	movs	r0, #0
 800188c:	f000 f808 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff fdb8 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40022000 	.word	0x40022000

080018a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f967 	bl	8001b92 <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 f92f 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008
 8001924:	200004b8 	.word	0x200004b8

08001928 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;  
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	200004b8 	.word	0x200004b8

08001940 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	@ (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff3e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff31 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e02e      	b.n	8001c1a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d008      	beq.n	8001bd8 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2204      	movs	r2, #4
 8001bca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e020      	b.n	8001c1a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 020e 	bic.w	r2, r2, #14
 8001be6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c00:	2101      	movs	r1, #1
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d005      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e027      	b.n	8001c98 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 020e 	bic.w	r2, r2, #14
 8001c56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c70:	2101      	movs	r1, #1
 8001c72:	fa01 f202 	lsl.w	r2, r1, r2
 8001c76:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
    }
  }
  return status;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb2:	e154      	b.n	8001f5e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8146 	beq.w	8001f58 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d005      	beq.n	8001ce4 <HAL_GPIO_Init+0x40>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d130      	bne.n	8001d46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f003 0201 	and.w	r2, r3, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d017      	beq.n	8001d82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d123      	bne.n	8001dd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	6939      	ldr	r1, [r7, #16]
 8001dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0203 	and.w	r2, r3, #3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80a0 	beq.w	8001f58 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e18:	4b58      	ldr	r3, [pc, #352]	@ (8001f7c <HAL_GPIO_Init+0x2d8>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a57      	ldr	r2, [pc, #348]	@ (8001f7c <HAL_GPIO_Init+0x2d8>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b55      	ldr	r3, [pc, #340]	@ (8001f7c <HAL_GPIO_Init+0x2d8>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e30:	4a53      	ldr	r2, [pc, #332]	@ (8001f80 <HAL_GPIO_Init+0x2dc>)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	220f      	movs	r2, #15
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e5a:	d019      	beq.n	8001e90 <HAL_GPIO_Init+0x1ec>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a49      	ldr	r2, [pc, #292]	@ (8001f84 <HAL_GPIO_Init+0x2e0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d013      	beq.n	8001e8c <HAL_GPIO_Init+0x1e8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a48      	ldr	r2, [pc, #288]	@ (8001f88 <HAL_GPIO_Init+0x2e4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00d      	beq.n	8001e88 <HAL_GPIO_Init+0x1e4>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a47      	ldr	r2, [pc, #284]	@ (8001f8c <HAL_GPIO_Init+0x2e8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d007      	beq.n	8001e84 <HAL_GPIO_Init+0x1e0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a46      	ldr	r2, [pc, #280]	@ (8001f90 <HAL_GPIO_Init+0x2ec>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d101      	bne.n	8001e80 <HAL_GPIO_Init+0x1dc>
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	e008      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e80:	2305      	movs	r3, #5
 8001e82:	e006      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e84:	2303      	movs	r3, #3
 8001e86:	e004      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e002      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_GPIO_Init+0x1ee>
 8001e90:	2300      	movs	r3, #0
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	f002 0203 	and.w	r2, r2, #3
 8001e98:	0092      	lsls	r2, r2, #2
 8001e9a:	4093      	lsls	r3, r2
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ea2:	4937      	ldr	r1, [pc, #220]	@ (8001f80 <HAL_GPIO_Init+0x2dc>)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb0:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <HAL_GPIO_Init+0x2f0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ed4:	4a2f      	ldr	r2, [pc, #188]	@ (8001f94 <HAL_GPIO_Init+0x2f0>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eda:	4b2e      	ldr	r3, [pc, #184]	@ (8001f94 <HAL_GPIO_Init+0x2f0>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001efe:	4a25      	ldr	r2, [pc, #148]	@ (8001f94 <HAL_GPIO_Init+0x2f0>)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f04:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_GPIO_Init+0x2f0>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f28:	4a1a      	ldr	r2, [pc, #104]	@ (8001f94 <HAL_GPIO_Init+0x2f0>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2e:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <HAL_GPIO_Init+0x2f0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f52:	4a10      	ldr	r2, [pc, #64]	@ (8001f94 <HAL_GPIO_Init+0x2f0>)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f47f aea3 	bne.w	8001cb4 <HAL_GPIO_Init+0x10>
  }
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	371c      	adds	r7, #28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000
 8001f84:	48000400 	.word	0x48000400
 8001f88:	48000800 	.word	0x48000800
 8001f8c:	48000c00 	.word	0x48000c00
 8001f90:	48001000 	.word	0x48001000
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa8:	787b      	ldrb	r3, [r7, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fb4:	e002      	b.n	8001fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fb6:	887a      	ldrh	r2, [r7, #2]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0b9      	b.n	800214e <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fb72 	bl	80016d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f004 f9b6 	bl	8006372 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	e03e      	b.n	800208a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	3311      	adds	r3, #17
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	3310      	adds	r3, #16
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	3313      	adds	r3, #19
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	3320      	adds	r3, #32
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3324      	adds	r3, #36	@ 0x24
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	3301      	adds	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	791b      	ldrb	r3, [r3, #4]
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	429a      	cmp	r2, r3
 8002092:	d3bb      	bcc.n	800200c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e044      	b.n	8002124 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	3301      	adds	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	791b      	ldrb	r3, [r3, #4]
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	429a      	cmp	r2, r3
 800212c:	d3b5      	bcc.n	800209a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3304      	adds	r3, #4
 8002136:	e893 0006 	ldmia.w	r3, {r1, r2}
 800213a:	f004 f935 	bl	80063a8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800215e:	af00      	add	r7, sp, #0
 8002160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002164:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002168:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800216a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	f000 bff4 	b.w	8003166 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002182:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 816d 	beq.w	800246e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002194:	4bb4      	ldr	r3, [pc, #720]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b04      	cmp	r3, #4
 800219e:	d00c      	beq.n	80021ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a0:	4bb1      	ldr	r3, [pc, #708]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d157      	bne.n	800225c <HAL_RCC_OscConfig+0x104>
 80021ac:	4bae      	ldr	r3, [pc, #696]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b8:	d150      	bne.n	800225c <HAL_RCC_OscConfig+0x104>
 80021ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021be:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80021da:	d802      	bhi.n	80021e2 <HAL_RCC_OscConfig+0x8a>
 80021dc:	4ba2      	ldr	r3, [pc, #648]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	e015      	b.n	800220e <HAL_RCC_OscConfig+0xb6>
 80021e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021e6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80021f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021fa:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80021fe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800220a:	4b97      	ldr	r3, [pc, #604]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002212:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002216:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800221a:	fa92 f2a2 	rbit	r2, r2
 800221e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002222:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002226:	fab2 f282 	clz	r2, r2
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	f042 0220 	orr.w	r2, r2, #32
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	f002 021f 	and.w	r2, r2, #31
 8002236:	2101      	movs	r1, #1
 8002238:	fa01 f202 	lsl.w	r2, r1, r2
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8114 	beq.w	800246c <HAL_RCC_OscConfig+0x314>
 8002244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002248:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 810b 	bne.w	800246c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	f000 bf85 	b.w	8003166 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002260:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226c:	d106      	bne.n	800227c <HAL_RCC_OscConfig+0x124>
 800226e:	4b7e      	ldr	r3, [pc, #504]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a7d      	ldr	r2, [pc, #500]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e036      	b.n	80022ea <HAL_RCC_OscConfig+0x192>
 800227c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002280:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10c      	bne.n	80022a6 <HAL_RCC_OscConfig+0x14e>
 800228c:	4b76      	ldr	r3, [pc, #472]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a75      	ldr	r2, [pc, #468]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 8002292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b73      	ldr	r3, [pc, #460]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a72      	ldr	r2, [pc, #456]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 800229e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e021      	b.n	80022ea <HAL_RCC_OscConfig+0x192>
 80022a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022b6:	d10c      	bne.n	80022d2 <HAL_RCC_OscConfig+0x17a>
 80022b8:	4b6b      	ldr	r3, [pc, #428]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 80022be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b68      	ldr	r3, [pc, #416]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a67      	ldr	r2, [pc, #412]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	e00b      	b.n	80022ea <HAL_RCC_OscConfig+0x192>
 80022d2:	4b65      	ldr	r3, [pc, #404]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a64      	ldr	r2, [pc, #400]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 80022d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b62      	ldr	r3, [pc, #392]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a61      	ldr	r2, [pc, #388]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 80022e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 80022ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ee:	f023 020f 	bic.w	r2, r3, #15
 80022f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	495a      	ldr	r1, [pc, #360]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 8002300:	4313      	orrs	r3, r2
 8002302:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002308:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d054      	beq.n	80023be <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff fb08 	bl	8001928 <HAL_GetTick>
 8002318:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800231e:	f7ff fb03 	bl	8001928 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	@ 0x64
 800232c:	d902      	bls.n	8002334 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	f000 bf19 	b.w	8003166 <HAL_RCC_OscConfig+0x100e>
 8002334:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002338:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002348:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b3f      	cmp	r3, #63	@ 0x3f
 8002354:	d802      	bhi.n	800235c <HAL_RCC_OscConfig+0x204>
 8002356:	4b44      	ldr	r3, [pc, #272]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	e015      	b.n	8002388 <HAL_RCC_OscConfig+0x230>
 800235c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002360:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002370:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002374:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002378:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002384:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800238c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002390:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002394:	fa92 f2a2 	rbit	r2, r2
 8002398:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800239c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80023a0:	fab2 f282 	clz	r2, r2
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	f042 0220 	orr.w	r2, r2, #32
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	f002 021f 	and.w	r2, r2, #31
 80023b0:	2101      	movs	r1, #1
 80023b2:	fa01 f202 	lsl.w	r2, r1, r2
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0b0      	beq.n	800231e <HAL_RCC_OscConfig+0x1c6>
 80023bc:	e057      	b.n	800246e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7ff fab3 	bl	8001928 <HAL_GetTick>
 80023c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	e00a      	b.n	80023de <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff faae 	bl	8001928 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	@ 0x64
 80023d6:	d902      	bls.n	80023de <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	f000 bec4 	b.w	8003166 <HAL_RCC_OscConfig+0x100e>
 80023de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023e2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80023f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80023fe:	d802      	bhi.n	8002406 <HAL_RCC_OscConfig+0x2ae>
 8002400:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	e015      	b.n	8002432 <HAL_RCC_OscConfig+0x2da>
 8002406:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800240a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800241a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800241e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002422:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800242e:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <HAL_RCC_OscConfig+0x310>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002436:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800243a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800243e:	fa92 f2a2 	rbit	r2, r2
 8002442:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002446:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800244a:	fab2 f282 	clz	r2, r2
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	f042 0220 	orr.w	r2, r2, #32
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	f002 021f 	and.w	r2, r2, #31
 800245a:	2101      	movs	r1, #1
 800245c:	fa01 f202 	lsl.w	r2, r1, r2
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1b0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x270>
 8002466:	e002      	b.n	800246e <HAL_RCC_OscConfig+0x316>
 8002468:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002472:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 816c 	beq.w	800275c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002484:	4bcc      	ldr	r3, [pc, #816]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00b      	beq.n	80024a8 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002490:	4bc9      	ldr	r3, [pc, #804]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d16d      	bne.n	8002578 <HAL_RCC_OscConfig+0x420>
 800249c:	4bc6      	ldr	r3, [pc, #792]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d167      	bne.n	8002578 <HAL_RCC_OscConfig+0x420>
 80024a8:	2302      	movs	r3, #2
 80024aa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80024ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80024c6:	d802      	bhi.n	80024ce <HAL_RCC_OscConfig+0x376>
 80024c8:	4bbb      	ldr	r3, [pc, #748]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	e013      	b.n	80024f6 <HAL_RCC_OscConfig+0x39e>
 80024ce:	2302      	movs	r3, #2
 80024d0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80024e0:	2302      	movs	r3, #2
 80024e2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80024e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80024f2:	4bb1      	ldr	r3, [pc, #708]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	2202      	movs	r2, #2
 80024f8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80024fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002500:	fa92 f2a2 	rbit	r2, r2
 8002504:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002508:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f042 0220 	orr.w	r2, r2, #32
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f002 021f 	and.w	r2, r2, #31
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCC_OscConfig+0x3e6>
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d002      	beq.n	800253e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	f000 be14 	b.w	8003166 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253e:	4b9e      	ldr	r3, [pc, #632]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	21f8      	movs	r1, #248	@ 0xf8
 8002554:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800255c:	fa91 f1a1 	rbit	r1, r1
 8002560:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002564:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002568:	fab1 f181 	clz	r1, r1
 800256c:	b2c9      	uxtb	r1, r1
 800256e:	408b      	lsls	r3, r1
 8002570:	4991      	ldr	r1, [pc, #580]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	e0f1      	b.n	800275c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8083 	beq.w	8002690 <HAL_RCC_OscConfig+0x538>
 800258a:	2301      	movs	r3, #1
 800258c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800259c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	461a      	mov	r2, r3
 80025b2:	2301      	movs	r3, #1
 80025b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7ff f9b7 	bl	8001928 <HAL_GetTick>
 80025ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c0:	f7ff f9b2 	bl	8001928 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d902      	bls.n	80025d6 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	f000 bdc8 	b.w	8003166 <HAL_RCC_OscConfig+0x100e>
 80025d6:	2302      	movs	r3, #2
 80025d8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80025e8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80025f4:	d802      	bhi.n	80025fc <HAL_RCC_OscConfig+0x4a4>
 80025f6:	4b70      	ldr	r3, [pc, #448]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	e013      	b.n	8002624 <HAL_RCC_OscConfig+0x4cc>
 80025fc:	2302      	movs	r3, #2
 80025fe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800260e:	2302      	movs	r3, #2
 8002610:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002614:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002620:	4b65      	ldr	r3, [pc, #404]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 8002622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002624:	2202      	movs	r2, #2
 8002626:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800262a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800262e:	fa92 f2a2 	rbit	r2, r2
 8002632:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002636:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800263a:	fab2 f282 	clz	r2, r2
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	f042 0220 	orr.w	r2, r2, #32
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	f002 021f 	and.w	r2, r2, #31
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f202 	lsl.w	r2, r1, r2
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0b4      	beq.n	80025c0 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4b58      	ldr	r3, [pc, #352]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800265e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002662:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	21f8      	movs	r1, #248	@ 0xf8
 800266c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002674:	fa91 f1a1 	rbit	r1, r1
 8002678:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800267c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002680:	fab1 f181 	clz	r1, r1
 8002684:	b2c9      	uxtb	r1, r1
 8002686:	408b      	lsls	r3, r1
 8002688:	494b      	ldr	r1, [pc, #300]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
 800268e:	e065      	b.n	800275c <HAL_RCC_OscConfig+0x604>
 8002690:	2301      	movs	r3, #1
 8002692:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80026a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80026b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	461a      	mov	r2, r3
 80026b8:	2300      	movs	r3, #0
 80026ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff f934 	bl	8001928 <HAL_GetTick>
 80026c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c6:	f7ff f92f 	bl	8001928 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d902      	bls.n	80026dc <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	f000 bd45 	b.w	8003166 <HAL_RCC_OscConfig+0x100e>
 80026dc:	2302      	movs	r3, #2
 80026de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80026ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80026fa:	d802      	bhi.n	8002702 <HAL_RCC_OscConfig+0x5aa>
 80026fc:	4b2e      	ldr	r3, [pc, #184]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	e013      	b.n	800272a <HAL_RCC_OscConfig+0x5d2>
 8002702:	2302      	movs	r3, #2
 8002704:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800271a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002726:	4b24      	ldr	r3, [pc, #144]	@ (80027b8 <HAL_RCC_OscConfig+0x660>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	2202      	movs	r2, #2
 800272c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002730:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002734:	fa92 f2a2 	rbit	r2, r2
 8002738:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800273c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002740:	fab2 f282 	clz	r2, r2
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	f042 0220 	orr.w	r2, r2, #32
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f002 021f 	and.w	r2, r2, #31
 8002750:	2101      	movs	r1, #1
 8002752:	fa01 f202 	lsl.w	r2, r1, r2
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1b4      	bne.n	80026c6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002760:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8115 	beq.w	800299c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d07e      	beq.n	8002880 <HAL_RCC_OscConfig+0x728>
 8002782:	2301      	movs	r3, #1
 8002784:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002798:	fab3 f383 	clz	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <HAL_RCC_OscConfig+0x664>)
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	461a      	mov	r2, r3
 80027a8:	2301      	movs	r3, #1
 80027aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7ff f8bc 	bl	8001928 <HAL_GetTick>
 80027b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b4:	e00f      	b.n	80027d6 <HAL_RCC_OscConfig+0x67e>
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c0:	f7ff f8b2 	bl	8001928 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d902      	bls.n	80027d6 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	f000 bcc8 	b.w	8003166 <HAL_RCC_OscConfig+0x100e>
 80027d6:	2302      	movs	r3, #2
 80027d8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80027e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80027f0:	2202      	movs	r2, #2
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fa93 f2a3 	rbit	r2, r3
 8002802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002806:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002814:	2202      	movs	r2, #2
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	fa93 f2a3 	rbit	r2, r3
 8002826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800282e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002830:	4bb0      	ldr	r3, [pc, #704]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002838:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800283c:	2102      	movs	r1, #2
 800283e:	6019      	str	r1, [r3, #0]
 8002840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002844:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	fa93 f1a3 	rbit	r1, r3
 800284e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002852:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002856:	6019      	str	r1, [r3, #0]
  return result;
 8002858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2101      	movs	r1, #1
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0a0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x668>
 800287e:	e08d      	b.n	800299c <HAL_RCC_OscConfig+0x844>
 8002880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002884:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002888:	2201      	movs	r2, #1
 800288a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fa93 f2a3 	rbit	r2, r3
 800289a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028a2:	601a      	str	r2, [r3, #0]
  return result;
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80028ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b90      	ldr	r3, [pc, #576]	@ (8002af8 <HAL_RCC_OscConfig+0x9a0>)
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	461a      	mov	r2, r3
 80028be:	2300      	movs	r3, #0
 80028c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c2:	f7ff f831 	bl	8001928 <HAL_GetTick>
 80028c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028cc:	f7ff f82c 	bl	8001928 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d902      	bls.n	80028e2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	f000 bc42 	b.w	8003166 <HAL_RCC_OscConfig+0x100e>
 80028e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028ea:	2202      	movs	r2, #2
 80028ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	fa93 f2a3 	rbit	r2, r3
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800290e:	2202      	movs	r2, #2
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002916:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	fa93 f2a3 	rbit	r2, r3
 8002920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002924:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002932:	2202      	movs	r2, #2
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	fa93 f2a3 	rbit	r2, r3
 8002944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002948:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800294c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294e:	4b69      	ldr	r3, [pc, #420]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002956:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800295a:	2102      	movs	r1, #2
 800295c:	6019      	str	r1, [r3, #0]
 800295e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002962:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	fa93 f1a3 	rbit	r1, r3
 800296c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002970:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002974:	6019      	str	r1, [r3, #0]
  return result;
 8002976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d197      	bne.n	80028cc <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 819e 	beq.w	8002cee <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b8:	4b4e      	ldr	r3, [pc, #312]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d116      	bne.n	80029f2 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c4:	4b4b      	ldr	r3, [pc, #300]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4a4a      	ldr	r2, [pc, #296]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 80029ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ce:	61d3      	str	r3, [r2, #28]
 80029d0:	4b48      	ldr	r3, [pc, #288]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80029d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029dc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80029ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f2:	4b42      	ldr	r3, [pc, #264]	@ (8002afc <HAL_RCC_OscConfig+0x9a4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d11a      	bne.n	8002a34 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fe:	4b3f      	ldr	r3, [pc, #252]	@ (8002afc <HAL_RCC_OscConfig+0x9a4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a3e      	ldr	r2, [pc, #248]	@ (8002afc <HAL_RCC_OscConfig+0x9a4>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe ff8d 	bl	8001928 <HAL_GetTick>
 8002a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a12:	e009      	b.n	8002a28 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a14:	f7fe ff88 	bl	8001928 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b64      	cmp	r3, #100	@ 0x64
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e39e      	b.n	8003166 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	4b34      	ldr	r3, [pc, #208]	@ (8002afc <HAL_RCC_OscConfig+0x9a4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ef      	beq.n	8002a14 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x8fa>
 8002a44:	4b2b      	ldr	r3, [pc, #172]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	4a2a      	ldr	r2, [pc, #168]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6213      	str	r3, [r2, #32]
 8002a50:	e035      	b.n	8002abe <HAL_RCC_OscConfig+0x966>
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x924>
 8002a62:	4b24      	ldr	r3, [pc, #144]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a23      	ldr	r2, [pc, #140]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6213      	str	r3, [r2, #32]
 8002a6e:	4b21      	ldr	r3, [pc, #132]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4a20      	ldr	r2, [pc, #128]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002a74:	f023 0304 	bic.w	r3, r3, #4
 8002a78:	6213      	str	r3, [r2, #32]
 8002a7a:	e020      	b.n	8002abe <HAL_RCC_OscConfig+0x966>
 8002a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x94e>
 8002a8c:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4a18      	ldr	r2, [pc, #96]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	6213      	str	r3, [r2, #32]
 8002a98:	4b16      	ldr	r3, [pc, #88]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4a15      	ldr	r2, [pc, #84]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6213      	str	r3, [r2, #32]
 8002aa4:	e00b      	b.n	8002abe <HAL_RCC_OscConfig+0x966>
 8002aa6:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4a12      	ldr	r2, [pc, #72]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6213      	str	r3, [r2, #32]
 8002ab2:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8002af4 <HAL_RCC_OscConfig+0x99c>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8087 	beq.w	8002bde <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad0:	f7fe ff2a 	bl	8001928 <HAL_GetTick>
 8002ad4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad8:	e012      	b.n	8002b00 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f7fe ff25 	bl	8001928 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d908      	bls.n	8002b00 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e339      	b.n	8003166 <HAL_RCC_OscConfig+0x100e>
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	10908120 	.word	0x10908120
 8002afc:	40007000 	.word	0x40007000
 8002b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b04:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b08:	2202      	movs	r2, #2
 8002b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b10:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	fa93 f2a3 	rbit	r2, r3
 8002b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b28:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b34:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b42:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b46:	601a      	str	r2, [r3, #0]
  return result;
 8002b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002b50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <HAL_RCC_OscConfig+0xa10>
 8002b62:	4b98      	ldr	r3, [pc, #608]	@ (8002dc4 <HAL_RCC_OscConfig+0xc6c>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	e013      	b.n	8002b90 <HAL_RCC_OscConfig+0xa38>
 8002b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b70:	2202      	movs	r2, #2
 8002b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b78:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	fa93 f2a3 	rbit	r2, r3
 8002b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b86:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	4b8d      	ldr	r3, [pc, #564]	@ (8002dc4 <HAL_RCC_OscConfig+0xc6c>)
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b94:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002b98:	2102      	movs	r1, #2
 8002b9a:	6011      	str	r1, [r2, #0]
 8002b9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ba0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	fa92 f1a2 	rbit	r1, r2
 8002baa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bae:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002bb2:	6011      	str	r1, [r2, #0]
  return result;
 8002bb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bb8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	fab2 f282 	clz	r2, r2
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	f002 021f 	and.w	r2, r2, #31
 8002bce:	2101      	movs	r1, #1
 8002bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f43f af7f 	beq.w	8002ada <HAL_RCC_OscConfig+0x982>
 8002bdc:	e07d      	b.n	8002cda <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7fe fea3 	bl	8001928 <HAL_GetTick>
 8002be2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be8:	f7fe fe9e 	bl	8001928 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e2b2      	b.n	8003166 <HAL_RCC_OscConfig+0x100e>
 8002c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c04:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c08:	2202      	movs	r2, #2
 8002c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c10:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f2a3 	rbit	r2, r3
 8002c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c34:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	fa93 f2a3 	rbit	r2, r3
 8002c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c42:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c46:	601a      	str	r2, [r3, #0]
  return result;
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002c50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <HAL_RCC_OscConfig+0xb10>
 8002c62:	4b58      	ldr	r3, [pc, #352]	@ (8002dc4 <HAL_RCC_OscConfig+0xc6c>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	e013      	b.n	8002c90 <HAL_RCC_OscConfig+0xb38>
 8002c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c70:	2202      	movs	r2, #2
 8002c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	fa93 f2a3 	rbit	r2, r3
 8002c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c86:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc4 <HAL_RCC_OscConfig+0xc6c>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c94:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002c98:	2102      	movs	r1, #2
 8002c9a:	6011      	str	r1, [r2, #0]
 8002c9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ca0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	fa92 f1a2 	rbit	r1, r2
 8002caa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cae:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002cb2:	6011      	str	r1, [r2, #0]
  return result;
 8002cb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cb8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	fab2 f282 	clz	r2, r2
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	f002 021f 	and.w	r2, r2, #31
 8002cce:	2101      	movs	r1, #1
 8002cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d186      	bne.n	8002be8 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cda:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d105      	bne.n	8002cee <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce2:	4b38      	ldr	r3, [pc, #224]	@ (8002dc4 <HAL_RCC_OscConfig+0xc6c>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a37      	ldr	r2, [pc, #220]	@ (8002dc4 <HAL_RCC_OscConfig+0xc6c>)
 8002ce8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8232 	beq.w	8003164 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d00:	4b30      	ldr	r3, [pc, #192]	@ (8002dc4 <HAL_RCC_OscConfig+0xc6c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	f000 8201 	beq.w	8003110 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	f040 8157 	bne.w	8002fce <HAL_RCC_OscConfig+0xe76>
 8002d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d24:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002d28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d32:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d40:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d44:	601a      	str	r2, [r3, #0]
  return result;
 8002d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002d4e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d50:	fab3 f383 	clz	r3, r3
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	461a      	mov	r2, r3
 8002d62:	2300      	movs	r3, #0
 8002d64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7fe fddf 	bl	8001928 <HAL_GetTick>
 8002d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d6e:	e009      	b.n	8002d84 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe fdda 	bl	8001928 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e1f0      	b.n	8003166 <HAL_RCC_OscConfig+0x100e>
 8002d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d88:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d96:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	fa93 f2a3 	rbit	r2, r3
 8002da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002da8:	601a      	str	r2, [r3, #0]
  return result;
 8002daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002db2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dbc:	d804      	bhi.n	8002dc8 <HAL_RCC_OscConfig+0xc70>
 8002dbe:	4b01      	ldr	r3, [pc, #4]	@ (8002dc4 <HAL_RCC_OscConfig+0xc6c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	e029      	b.n	8002e18 <HAL_RCC_OscConfig+0xcc0>
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dcc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002dd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fa93 f2a3 	rbit	r2, r3
 8002de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002df6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e00:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	fa93 f2a3 	rbit	r2, r3
 8002e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	4bc3      	ldr	r3, [pc, #780]	@ (8003124 <HAL_RCC_OscConfig+0xfcc>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e1c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002e20:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e24:	6011      	str	r1, [r2, #0]
 8002e26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e2a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	fa92 f1a2 	rbit	r1, r2
 8002e34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e38:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e3c:	6011      	str	r1, [r2, #0]
  return result;
 8002e3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e42:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	fab2 f282 	clz	r2, r2
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f042 0220 	orr.w	r2, r2, #32
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f002 021f 	and.w	r2, r2, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d185      	bne.n	8002d70 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e64:	4baf      	ldr	r3, [pc, #700]	@ (8003124 <HAL_RCC_OscConfig+0xfcc>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	49a7      	ldr	r1, [pc, #668]	@ (8003124 <HAL_RCC_OscConfig+0xfcc>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
 8002e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e90:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002e94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fa93 f2a3 	rbit	r2, r3
 8002ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002eb0:	601a      	str	r2, [r3, #0]
  return result;
 8002eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002eba:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ec6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2301      	movs	r3, #1
 8002ed0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fd29 	bl	8001928 <HAL_GetTick>
 8002ed6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eda:	e009      	b.n	8002ef0 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe fd24 	bl	8001928 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e13a      	b.n	8003166 <HAL_RCC_OscConfig+0x100e>
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002ef8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f02:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	fa93 f2a3 	rbit	r2, r3
 8002f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f10:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f14:	601a      	str	r2, [r3, #0]
  return result;
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002f1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f28:	d802      	bhi.n	8002f30 <HAL_RCC_OscConfig+0xdd8>
 8002f2a:	4b7e      	ldr	r3, [pc, #504]	@ (8003124 <HAL_RCC_OscConfig+0xfcc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	e027      	b.n	8002f80 <HAL_RCC_OscConfig+0xe28>
 8002f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f34:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f42:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fa93 f2a3 	rbit	r2, r3
 8002f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f50:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f68:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	fa93 f2a3 	rbit	r2, r3
 8002f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f76:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	4b69      	ldr	r3, [pc, #420]	@ (8003124 <HAL_RCC_OscConfig+0xfcc>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f84:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002f88:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f8c:	6011      	str	r1, [r2, #0]
 8002f8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f92:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	fa92 f1a2 	rbit	r1, r2
 8002f9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fa0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002fa4:	6011      	str	r1, [r2, #0]
  return result;
 8002fa6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002faa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	fab2 f282 	clz	r2, r2
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	f042 0220 	orr.w	r2, r2, #32
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	f002 021f 	and.w	r2, r2, #31
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d087      	beq.n	8002edc <HAL_RCC_OscConfig+0xd84>
 8002fcc:	e0ca      	b.n	8003164 <HAL_RCC_OscConfig+0x100c>
 8002fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002fd6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	fa93 f2a3 	rbit	r2, r3
 8002fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ff2:	601a      	str	r2, [r3, #0]
  return result;
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ffc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003008:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	461a      	mov	r2, r3
 8003010:	2300      	movs	r3, #0
 8003012:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe fc88 	bl	8001928 <HAL_GetTick>
 8003018:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301c:	e009      	b.n	8003032 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301e:	f7fe fc83 	bl	8001928 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e099      	b.n	8003166 <HAL_RCC_OscConfig+0x100e>
 8003032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003036:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800303a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800303e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003052:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003056:	601a      	str	r2, [r3, #0]
  return result;
 8003058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003060:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b3f      	cmp	r3, #63	@ 0x3f
 800306a:	d802      	bhi.n	8003072 <HAL_RCC_OscConfig+0xf1a>
 800306c:	4b2d      	ldr	r3, [pc, #180]	@ (8003124 <HAL_RCC_OscConfig+0xfcc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	e027      	b.n	80030c2 <HAL_RCC_OscConfig+0xf6a>
 8003072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003076:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800307a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800307e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003084:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003092:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80030a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030aa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	fa93 f2a3 	rbit	r2, r3
 80030b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	4b19      	ldr	r3, [pc, #100]	@ (8003124 <HAL_RCC_OscConfig+0xfcc>)
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030c6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80030ca:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80030ce:	6011      	str	r1, [r2, #0]
 80030d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030d4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	fa92 f1a2 	rbit	r1, r2
 80030de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030e2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80030e6:	6011      	str	r1, [r2, #0]
  return result;
 80030e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030ec:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	fab2 f282 	clz	r2, r2
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	f042 0220 	orr.w	r2, r2, #32
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	f002 021f 	and.w	r2, r2, #31
 8003102:	2101      	movs	r1, #1
 8003104:	fa01 f202 	lsl.w	r2, r1, r2
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d187      	bne.n	800301e <HAL_RCC_OscConfig+0xec6>
 800310e:	e029      	b.n	8003164 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003114:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d103      	bne.n	8003128 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e020      	b.n	8003166 <HAL_RCC_OscConfig+0x100e>
 8003124:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003128:	4b11      	ldr	r3, [pc, #68]	@ (8003170 <HAL_RCC_OscConfig+0x1018>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003130:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003134:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	429a      	cmp	r2, r3
 8003146:	d10b      	bne.n	8003160 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003148:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800314c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003154:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000

08003174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b09e      	sub	sp, #120	@ 0x78
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e154      	b.n	8003436 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b89      	ldr	r3, [pc, #548]	@ (80033b4 <HAL_RCC_ClockConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d910      	bls.n	80031bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b86      	ldr	r3, [pc, #536]	@ (80033b4 <HAL_RCC_ClockConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 0207 	bic.w	r2, r3, #7
 80031a2:	4984      	ldr	r1, [pc, #528]	@ (80033b4 <HAL_RCC_ClockConfig+0x240>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b82      	ldr	r3, [pc, #520]	@ (80033b4 <HAL_RCC_ClockConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e13c      	b.n	8003436 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c8:	4b7b      	ldr	r3, [pc, #492]	@ (80033b8 <HAL_RCC_ClockConfig+0x244>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4978      	ldr	r1, [pc, #480]	@ (80033b8 <HAL_RCC_ClockConfig+0x244>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80cd 	beq.w	8003382 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d137      	bne.n	8003260 <HAL_RCC_ClockConfig+0xec>
 80031f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80031fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b3f      	cmp	r3, #63	@ 0x3f
 8003208:	d802      	bhi.n	8003210 <HAL_RCC_ClockConfig+0x9c>
 800320a:	4b6b      	ldr	r3, [pc, #428]	@ (80033b8 <HAL_RCC_ClockConfig+0x244>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	e00f      	b.n	8003230 <HAL_RCC_ClockConfig+0xbc>
 8003210:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003214:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	667b      	str	r3, [r7, #100]	@ 0x64
 800321e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003222:	663b      	str	r3, [r7, #96]	@ 0x60
 8003224:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800322c:	4b62      	ldr	r3, [pc, #392]	@ (80033b8 <HAL_RCC_ClockConfig+0x244>)
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003234:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003236:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003238:	fa92 f2a2 	rbit	r2, r2
 800323c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800323e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003240:	fab2 f282 	clz	r2, r2
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	f042 0220 	orr.w	r2, r2, #32
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	f002 021f 	and.w	r2, r2, #31
 8003250:	2101      	movs	r1, #1
 8003252:	fa01 f202 	lsl.w	r2, r1, r2
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d171      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0ea      	b.n	8003436 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d137      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x164>
 8003268:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800326c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003280:	d802      	bhi.n	8003288 <HAL_RCC_ClockConfig+0x114>
 8003282:	4b4d      	ldr	r3, [pc, #308]	@ (80033b8 <HAL_RCC_ClockConfig+0x244>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	e00f      	b.n	80032a8 <HAL_RCC_ClockConfig+0x134>
 8003288:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800328c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	647b      	str	r3, [r7, #68]	@ 0x44
 8003296:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800329a:	643b      	str	r3, [r7, #64]	@ 0x40
 800329c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032a4:	4b44      	ldr	r3, [pc, #272]	@ (80033b8 <HAL_RCC_ClockConfig+0x244>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032ac:	63ba      	str	r2, [r7, #56]	@ 0x38
 80032ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032b0:	fa92 f2a2 	rbit	r2, r2
 80032b4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80032b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032b8:	fab2 f282 	clz	r2, r2
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f042 0220 	orr.w	r2, r2, #32
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f002 021f 	and.w	r2, r2, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d135      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0ae      	b.n	8003436 <HAL_RCC_ClockConfig+0x2c2>
 80032d8:	2302      	movs	r3, #2
 80032da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80032e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80032ee:	d802      	bhi.n	80032f6 <HAL_RCC_ClockConfig+0x182>
 80032f0:	4b31      	ldr	r3, [pc, #196]	@ (80033b8 <HAL_RCC_ClockConfig+0x244>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	e00d      	b.n	8003312 <HAL_RCC_ClockConfig+0x19e>
 80032f6:	2302      	movs	r3, #2
 80032f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	627b      	str	r3, [r7, #36]	@ 0x24
 8003302:	2302      	movs	r3, #2
 8003304:	623b      	str	r3, [r7, #32]
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	4b2a      	ldr	r3, [pc, #168]	@ (80033b8 <HAL_RCC_ClockConfig+0x244>)
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	2202      	movs	r2, #2
 8003314:	61ba      	str	r2, [r7, #24]
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	fa92 f2a2 	rbit	r2, r2
 800331c:	617a      	str	r2, [r7, #20]
  return result;
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	fab2 f282 	clz	r2, r2
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	f042 0220 	orr.w	r2, r2, #32
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f002 021f 	and.w	r2, r2, #31
 8003330:	2101      	movs	r1, #1
 8003332:	fa01 f202 	lsl.w	r2, r1, r2
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e07a      	b.n	8003436 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003340:	4b1d      	ldr	r3, [pc, #116]	@ (80033b8 <HAL_RCC_ClockConfig+0x244>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 0203 	bic.w	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	491a      	ldr	r1, [pc, #104]	@ (80033b8 <HAL_RCC_ClockConfig+0x244>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003352:	f7fe fae9 	bl	8001928 <HAL_GetTick>
 8003356:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003358:	e00a      	b.n	8003370 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335a:	f7fe fae5 	bl	8001928 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e062      	b.n	8003436 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003370:	4b11      	ldr	r3, [pc, #68]	@ (80033b8 <HAL_RCC_ClockConfig+0x244>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 020c 	and.w	r2, r3, #12
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	429a      	cmp	r2, r3
 8003380:	d1eb      	bne.n	800335a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003382:	4b0c      	ldr	r3, [pc, #48]	@ (80033b4 <HAL_RCC_ClockConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d215      	bcs.n	80033bc <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003390:	4b08      	ldr	r3, [pc, #32]	@ (80033b4 <HAL_RCC_ClockConfig+0x240>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f023 0207 	bic.w	r2, r3, #7
 8003398:	4906      	ldr	r1, [pc, #24]	@ (80033b4 <HAL_RCC_ClockConfig+0x240>)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a0:	4b04      	ldr	r3, [pc, #16]	@ (80033b4 <HAL_RCC_ClockConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d006      	beq.n	80033bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e041      	b.n	8003436 <HAL_RCC_ClockConfig+0x2c2>
 80033b2:	bf00      	nop
 80033b4:	40022000 	.word	0x40022000
 80033b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <HAL_RCC_ClockConfig+0x2cc>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	491a      	ldr	r1, [pc, #104]	@ (8003440 <HAL_RCC_ClockConfig+0x2cc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e6:	4b16      	ldr	r3, [pc, #88]	@ (8003440 <HAL_RCC_ClockConfig+0x2cc>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4912      	ldr	r1, [pc, #72]	@ (8003440 <HAL_RCC_ClockConfig+0x2cc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033fa:	f000 f829 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 80033fe:	4601      	mov	r1, r0
 8003400:	4b0f      	ldr	r3, [pc, #60]	@ (8003440 <HAL_RCC_ClockConfig+0x2cc>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003408:	22f0      	movs	r2, #240	@ 0xf0
 800340a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	fa92 f2a2 	rbit	r2, r2
 8003412:	60fa      	str	r2, [r7, #12]
  return result;
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	fab2 f282 	clz	r2, r2
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	40d3      	lsrs	r3, r2
 800341e:	4a09      	ldr	r2, [pc, #36]	@ (8003444 <HAL_RCC_ClockConfig+0x2d0>)
 8003420:	5cd3      	ldrb	r3, [r2, r3]
 8003422:	fa21 f303 	lsr.w	r3, r1, r3
 8003426:	4a08      	ldr	r2, [pc, #32]	@ (8003448 <HAL_RCC_ClockConfig+0x2d4>)
 8003428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800342a:	4b08      	ldr	r3, [pc, #32]	@ (800344c <HAL_RCC_ClockConfig+0x2d8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe fa36 	bl	80018a0 <HAL_InitTick>
  
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3778      	adds	r7, #120	@ 0x78
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	08006770 	.word	0x08006770
 8003448:	20000000 	.word	0x20000000
 800344c:	20000004 	.word	0x20000004

08003450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800346a:	4b1e      	ldr	r3, [pc, #120]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b04      	cmp	r3, #4
 8003478:	d002      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x30>
 800347a:	2b08      	cmp	r3, #8
 800347c:	d003      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0x36>
 800347e:	e026      	b.n	80034ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003480:	4b19      	ldr	r3, [pc, #100]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003482:	613b      	str	r3, [r7, #16]
      break;
 8003484:	e026      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	0c9b      	lsrs	r3, r3, #18
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	4a17      	ldr	r2, [pc, #92]	@ (80034ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003490:	5cd3      	ldrb	r3, [r2, r3]
 8003492:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003494:	4b13      	ldr	r3, [pc, #76]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	4a14      	ldr	r2, [pc, #80]	@ (80034f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800349e:	5cd3      	ldrb	r3, [r2, r3]
 80034a0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034ac:	4a0e      	ldr	r2, [pc, #56]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e004      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a0c      	ldr	r2, [pc, #48]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	613b      	str	r3, [r7, #16]
      break;
 80034cc:	e002      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034ce:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80034d0:	613b      	str	r3, [r7, #16]
      break;
 80034d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d4:	693b      	ldr	r3, [r7, #16]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
 80034e8:	007a1200 	.word	0x007a1200
 80034ec:	08006788 	.word	0x08006788
 80034f0:	08006798 	.word	0x08006798
 80034f4:	003d0900 	.word	0x003d0900

080034f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034fc:	4b03      	ldr	r3, [pc, #12]	@ (800350c <HAL_RCC_GetHCLKFreq+0x14>)
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000000 	.word	0x20000000

08003510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003516:	f7ff ffef 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 800351a:	4601      	mov	r1, r0
 800351c:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003524:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003528:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	fa92 f2a2 	rbit	r2, r2
 8003530:	603a      	str	r2, [r7, #0]
  return result;
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	fab2 f282 	clz	r2, r2
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	40d3      	lsrs	r3, r2
 800353c:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <HAL_RCC_GetPCLK1Freq+0x40>)
 800353e:	5cd3      	ldrb	r3, [r2, r3]
 8003540:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	08006780 	.word	0x08006780

08003554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800355a:	f7ff ffcd 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 800355e:	4601      	mov	r1, r0
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003568:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800356c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	fa92 f2a2 	rbit	r2, r2
 8003574:	603a      	str	r2, [r7, #0]
  return result;
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	fab2 f282 	clz	r2, r2
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	40d3      	lsrs	r3, r2
 8003580:	4a04      	ldr	r2, [pc, #16]	@ (8003594 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000
 8003594:	08006780 	.word	0x08006780

08003598 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b092      	sub	sp, #72	@ 0x48
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80d2 	beq.w	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035bc:	4b4d      	ldr	r3, [pc, #308]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10e      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c8:	4b4a      	ldr	r3, [pc, #296]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	4a49      	ldr	r2, [pc, #292]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	61d3      	str	r3, [r2, #28]
 80035d4:	4b47      	ldr	r3, [pc, #284]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	4b44      	ldr	r3, [pc, #272]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d118      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f2:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a40      	ldr	r2, [pc, #256]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fe:	f7fe f993 	bl	8001928 <HAL_GetTick>
 8003602:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	e008      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003606:	f7fe f98f 	bl	8001928 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b64      	cmp	r3, #100	@ 0x64
 8003612:	d901      	bls.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e167      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	4b37      	ldr	r3, [pc, #220]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003624:	4b33      	ldr	r3, [pc, #204]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800362c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800362e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8082 	beq.w	800373a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800363e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003640:	429a      	cmp	r2, r3
 8003642:	d07a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003644:	4b2b      	ldr	r3, [pc, #172]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800364c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800364e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003652:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800365c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	4b25      	ldr	r3, [pc, #148]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	461a      	mov	r2, r3
 800366e:	2301      	movs	r3, #1
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	4b1c      	ldr	r3, [pc, #112]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	461a      	mov	r2, r3
 8003692:	2300      	movs	r3, #0
 8003694:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003696:	4a17      	ldr	r2, [pc, #92]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800369a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800369c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d049      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7fe f93f 	bl	8001928 <HAL_GetTick>
 80036aa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fe f93b 	bl	8001928 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e111      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80036c4:	2302      	movs	r3, #2
 80036c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d0:	2302      	movs	r3, #2
 80036d2:	623b      	str	r3, [r7, #32]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	61fb      	str	r3, [r7, #28]
  return result;
 80036dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d108      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80036ee:	4b01      	ldr	r3, [pc, #4]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	e00d      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40007000 	.word	0x40007000
 80036fc:	10908100 	.word	0x10908100
 8003700:	2302      	movs	r3, #2
 8003702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	4b78      	ldr	r3, [pc, #480]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	2202      	movs	r2, #2
 8003712:	613a      	str	r2, [r7, #16]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	fa92 f2a2 	rbit	r2, r2
 800371a:	60fa      	str	r2, [r7, #12]
  return result;
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	fab2 f282 	clz	r2, r2
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	f002 021f 	and.w	r2, r2, #31
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0b9      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800373a:	4b6d      	ldr	r3, [pc, #436]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	496a      	ldr	r1, [pc, #424]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003748:	4313      	orrs	r3, r2
 800374a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800374c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b66      	ldr	r3, [pc, #408]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4a65      	ldr	r2, [pc, #404]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800375e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800376c:	4b60      	ldr	r3, [pc, #384]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	f023 0203 	bic.w	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	495d      	ldr	r1, [pc, #372]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800377a:	4313      	orrs	r3, r2
 800377c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800378a:	4b59      	ldr	r3, [pc, #356]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	4956      	ldr	r1, [pc, #344]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003798:	4313      	orrs	r3, r2
 800379a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037a8:	4b51      	ldr	r3, [pc, #324]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	494e      	ldr	r1, [pc, #312]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d008      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037c6:	4b4a      	ldr	r3, [pc, #296]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	f023 0210 	bic.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	4947      	ldr	r1, [pc, #284]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80037e4:	4b42      	ldr	r3, [pc, #264]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	493f      	ldr	r1, [pc, #252]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003802:	4b3b      	ldr	r3, [pc, #236]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	f023 0220 	bic.w	r2, r3, #32
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4938      	ldr	r1, [pc, #224]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003810:	4313      	orrs	r3, r2
 8003812:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003820:	4b33      	ldr	r3, [pc, #204]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	4930      	ldr	r1, [pc, #192]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800382e:	4313      	orrs	r3, r2
 8003830:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800383e:	4b2c      	ldr	r3, [pc, #176]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	4929      	ldr	r1, [pc, #164]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800384c:	4313      	orrs	r3, r2
 800384e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800385c:	4b24      	ldr	r3, [pc, #144]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	4921      	ldr	r1, [pc, #132]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800387a:	4b1d      	ldr	r3, [pc, #116]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	491a      	ldr	r1, [pc, #104]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003888:	4313      	orrs	r3, r2
 800388a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003898:	4b15      	ldr	r3, [pc, #84]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a4:	4912      	ldr	r1, [pc, #72]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d008      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038b6:	4b0e      	ldr	r3, [pc, #56]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	490b      	ldr	r1, [pc, #44]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038d4:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e0:	4903      	ldr	r1, [pc, #12]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3748      	adds	r7, #72	@ 0x48
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000

080038f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e049      	b.n	800399a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd fd96 	bl	800144c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3304      	adds	r3, #4
 8003930:	4619      	mov	r1, r3
 8003932:	4610      	mov	r0, r2
 8003934:	f000 ff18 	bl	8004768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e049      	b.n	8003a48 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d106      	bne.n	80039ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f841 	bl	8003a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2202      	movs	r2, #2
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f000 fec1 	bl	8004768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <HAL_TIM_PWM_Start+0x24>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e03c      	b.n	8003b02 <HAL_TIM_PWM_Start+0x9e>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d109      	bne.n	8003aa2 <HAL_TIM_PWM_Start+0x3e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	e02f      	b.n	8003b02 <HAL_TIM_PWM_Start+0x9e>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d109      	bne.n	8003abc <HAL_TIM_PWM_Start+0x58>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e022      	b.n	8003b02 <HAL_TIM_PWM_Start+0x9e>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d109      	bne.n	8003ad6 <HAL_TIM_PWM_Start+0x72>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	bf14      	ite	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	2300      	moveq	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	e015      	b.n	8003b02 <HAL_TIM_PWM_Start+0x9e>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b10      	cmp	r3, #16
 8003ada:	d109      	bne.n	8003af0 <HAL_TIM_PWM_Start+0x8c>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	bf14      	ite	ne
 8003ae8:	2301      	movne	r3, #1
 8003aea:	2300      	moveq	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e008      	b.n	8003b02 <HAL_TIM_PWM_Start+0x9e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e097      	b.n	8003c3a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d104      	bne.n	8003b1a <HAL_TIM_PWM_Start+0xb6>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b18:	e023      	b.n	8003b62 <HAL_TIM_PWM_Start+0xfe>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d104      	bne.n	8003b2a <HAL_TIM_PWM_Start+0xc6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b28:	e01b      	b.n	8003b62 <HAL_TIM_PWM_Start+0xfe>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d104      	bne.n	8003b3a <HAL_TIM_PWM_Start+0xd6>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b38:	e013      	b.n	8003b62 <HAL_TIM_PWM_Start+0xfe>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b0c      	cmp	r3, #12
 8003b3e:	d104      	bne.n	8003b4a <HAL_TIM_PWM_Start+0xe6>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b48:	e00b      	b.n	8003b62 <HAL_TIM_PWM_Start+0xfe>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_PWM_Start+0xf6>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b58:	e003      	b.n	8003b62 <HAL_TIM_PWM_Start+0xfe>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2201      	movs	r2, #1
 8003b68:	6839      	ldr	r1, [r7, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 fb26 	bl	80051bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a33      	ldr	r2, [pc, #204]	@ (8003c44 <HAL_TIM_PWM_Start+0x1e0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x13e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a32      	ldr	r2, [pc, #200]	@ (8003c48 <HAL_TIM_PWM_Start+0x1e4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x13e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a30      	ldr	r2, [pc, #192]	@ (8003c4c <HAL_TIM_PWM_Start+0x1e8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x13e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2f      	ldr	r2, [pc, #188]	@ (8003c50 <HAL_TIM_PWM_Start+0x1ec>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x13e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003c54 <HAL_TIM_PWM_Start+0x1f0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_PWM_Start+0x142>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_TIM_PWM_Start+0x144>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a20      	ldr	r2, [pc, #128]	@ (8003c44 <HAL_TIM_PWM_Start+0x1e0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d018      	beq.n	8003bf8 <HAL_TIM_PWM_Start+0x194>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bce:	d013      	beq.n	8003bf8 <HAL_TIM_PWM_Start+0x194>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	@ (8003c58 <HAL_TIM_PWM_Start+0x1f4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_TIM_PWM_Start+0x194>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1f      	ldr	r2, [pc, #124]	@ (8003c5c <HAL_TIM_PWM_Start+0x1f8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d009      	beq.n	8003bf8 <HAL_TIM_PWM_Start+0x194>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a17      	ldr	r2, [pc, #92]	@ (8003c48 <HAL_TIM_PWM_Start+0x1e4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_TIM_PWM_Start+0x194>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a16      	ldr	r2, [pc, #88]	@ (8003c4c <HAL_TIM_PWM_Start+0x1e8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d115      	bne.n	8003c24 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	4b18      	ldr	r3, [pc, #96]	@ (8003c60 <HAL_TIM_PWM_Start+0x1fc>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b06      	cmp	r3, #6
 8003c08:	d015      	beq.n	8003c36 <HAL_TIM_PWM_Start+0x1d2>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c10:	d011      	beq.n	8003c36 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c22:	e008      	b.n	8003c36 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e000      	b.n	8003c38 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40013400 	.word	0x40013400
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40014400 	.word	0x40014400
 8003c54:	40014800 	.word	0x40014800
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800
 8003c60:	00010007 	.word	0x00010007

08003c64 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e049      	b.n	8003d0a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fd fbfc 	bl	8001488 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	f000 fd60 	bl	8004768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_IC_Start_IT+0x1e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	e023      	b.n	8003d7a <HAL_TIM_IC_Start_IT+0x66>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_IC_Start_IT+0x2e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	e01b      	b.n	8003d7a <HAL_TIM_IC_Start_IT+0x66>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d104      	bne.n	8003d52 <HAL_TIM_IC_Start_IT+0x3e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	e013      	b.n	8003d7a <HAL_TIM_IC_Start_IT+0x66>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b0c      	cmp	r3, #12
 8003d56:	d104      	bne.n	8003d62 <HAL_TIM_IC_Start_IT+0x4e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	e00b      	b.n	8003d7a <HAL_TIM_IC_Start_IT+0x66>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d104      	bne.n	8003d72 <HAL_TIM_IC_Start_IT+0x5e>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	e003      	b.n	8003d7a <HAL_TIM_IC_Start_IT+0x66>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d104      	bne.n	8003d8c <HAL_TIM_IC_Start_IT+0x78>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e013      	b.n	8003db4 <HAL_TIM_IC_Start_IT+0xa0>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d104      	bne.n	8003d9c <HAL_TIM_IC_Start_IT+0x88>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e00b      	b.n	8003db4 <HAL_TIM_IC_Start_IT+0xa0>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d104      	bne.n	8003dac <HAL_TIM_IC_Start_IT+0x98>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e003      	b.n	8003db4 <HAL_TIM_IC_Start_IT+0xa0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003db6:	7bbb      	ldrb	r3, [r7, #14]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d102      	bne.n	8003dc2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dbc:	7b7b      	ldrb	r3, [r7, #13]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d001      	beq.n	8003dc6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e0d8      	b.n	8003f78 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_IC_Start_IT+0xc2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dd4:	e023      	b.n	8003e1e <HAL_TIM_IC_Start_IT+0x10a>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d104      	bne.n	8003de6 <HAL_TIM_IC_Start_IT+0xd2>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003de4:	e01b      	b.n	8003e1e <HAL_TIM_IC_Start_IT+0x10a>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d104      	bne.n	8003df6 <HAL_TIM_IC_Start_IT+0xe2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003df4:	e013      	b.n	8003e1e <HAL_TIM_IC_Start_IT+0x10a>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b0c      	cmp	r3, #12
 8003dfa:	d104      	bne.n	8003e06 <HAL_TIM_IC_Start_IT+0xf2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e04:	e00b      	b.n	8003e1e <HAL_TIM_IC_Start_IT+0x10a>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d104      	bne.n	8003e16 <HAL_TIM_IC_Start_IT+0x102>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e14:	e003      	b.n	8003e1e <HAL_TIM_IC_Start_IT+0x10a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d104      	bne.n	8003e2e <HAL_TIM_IC_Start_IT+0x11a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e2c:	e013      	b.n	8003e56 <HAL_TIM_IC_Start_IT+0x142>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_IC_Start_IT+0x12a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e3c:	e00b      	b.n	8003e56 <HAL_TIM_IC_Start_IT+0x142>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_IC_Start_IT+0x13a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e4c:	e003      	b.n	8003e56 <HAL_TIM_IC_Start_IT+0x142>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d841      	bhi.n	8003ee0 <HAL_TIM_IC_Start_IT+0x1cc>
 8003e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <HAL_TIM_IC_Start_IT+0x150>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e99 	.word	0x08003e99
 8003e68:	08003ee1 	.word	0x08003ee1
 8003e6c:	08003ee1 	.word	0x08003ee1
 8003e70:	08003ee1 	.word	0x08003ee1
 8003e74:	08003eab 	.word	0x08003eab
 8003e78:	08003ee1 	.word	0x08003ee1
 8003e7c:	08003ee1 	.word	0x08003ee1
 8003e80:	08003ee1 	.word	0x08003ee1
 8003e84:	08003ebd 	.word	0x08003ebd
 8003e88:	08003ee1 	.word	0x08003ee1
 8003e8c:	08003ee1 	.word	0x08003ee1
 8003e90:	08003ee1 	.word	0x08003ee1
 8003e94:	08003ecf 	.word	0x08003ecf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0202 	orr.w	r2, r2, #2
 8003ea6:	60da      	str	r2, [r3, #12]
      break;
 8003ea8:	e01d      	b.n	8003ee6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0204 	orr.w	r2, r2, #4
 8003eb8:	60da      	str	r2, [r3, #12]
      break;
 8003eba:	e014      	b.n	8003ee6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0208 	orr.w	r2, r2, #8
 8003eca:	60da      	str	r2, [r3, #12]
      break;
 8003ecc:	e00b      	b.n	8003ee6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0210 	orr.w	r2, r2, #16
 8003edc:	60da      	str	r2, [r3, #12]
      break;
 8003ede:	e002      	b.n	8003ee6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d144      	bne.n	8003f76 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	6839      	ldr	r1, [r7, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 f961 	bl	80051bc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a20      	ldr	r2, [pc, #128]	@ (8003f80 <HAL_TIM_IC_Start_IT+0x26c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d018      	beq.n	8003f36 <HAL_TIM_IC_Start_IT+0x222>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0c:	d013      	beq.n	8003f36 <HAL_TIM_IC_Start_IT+0x222>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1c      	ldr	r2, [pc, #112]	@ (8003f84 <HAL_TIM_IC_Start_IT+0x270>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00e      	beq.n	8003f36 <HAL_TIM_IC_Start_IT+0x222>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003f88 <HAL_TIM_IC_Start_IT+0x274>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d009      	beq.n	8003f36 <HAL_TIM_IC_Start_IT+0x222>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a19      	ldr	r2, [pc, #100]	@ (8003f8c <HAL_TIM_IC_Start_IT+0x278>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <HAL_TIM_IC_Start_IT+0x222>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a17      	ldr	r2, [pc, #92]	@ (8003f90 <HAL_TIM_IC_Start_IT+0x27c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d115      	bne.n	8003f62 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	4b15      	ldr	r3, [pc, #84]	@ (8003f94 <HAL_TIM_IC_Start_IT+0x280>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b06      	cmp	r3, #6
 8003f46:	d015      	beq.n	8003f74 <HAL_TIM_IC_Start_IT+0x260>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f4e:	d011      	beq.n	8003f74 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f60:	e008      	b.n	8003f74 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0201 	orr.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e000      	b.n	8003f76 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f74:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40013400 	.word	0x40013400
 8003f90:	40014000 	.word	0x40014000
 8003f94:	00010007 	.word	0x00010007

08003f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d020      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0202 	mvn.w	r2, #2
 8003fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fc fd8a 	bl	8000afc <HAL_TIM_IC_CaptureCallback>
 8003fe8:	e005      	b.n	8003ff6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fb9e 	bl	800472c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fba5 	bl	8004740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d020      	beq.n	8004048 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01b      	beq.n	8004048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0204 	mvn.w	r2, #4
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2202      	movs	r2, #2
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fc fd64 	bl	8000afc <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fb78 	bl	800472c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fb7f 	bl	8004740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d020      	beq.n	8004094 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01b      	beq.n	8004094 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0208 	mvn.w	r2, #8
 8004064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2204      	movs	r2, #4
 800406a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fc fd3e 	bl	8000afc <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fb52 	bl	800472c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fb59 	bl	8004740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	d020      	beq.n	80040e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01b      	beq.n	80040e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0210 	mvn.w	r2, #16
 80040b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2208      	movs	r2, #8
 80040b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fc fd18 	bl	8000afc <HAL_TIM_IC_CaptureCallback>
 80040cc:	e005      	b.n	80040da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fb2c 	bl	800472c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fb33 	bl	8004740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00c      	beq.n	8004104 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d007      	beq.n	8004104 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0201 	mvn.w	r2, #1
 80040fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fb0a 	bl	8004718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00c      	beq.n	8004128 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f001 f8fa 	bl	800531c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00c      	beq.n	800414c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f001 f8f2 	bl	8005330 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00c      	beq.n	8004170 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 faf2 	bl	8004754 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00c      	beq.n	8004194 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0220 	mvn.w	r2, #32
 800418c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f001 f8ba 	bl	8005308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e088      	b.n	80042cc <HAL_TIM_IC_ConfigChannel+0x130>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d11b      	bne.n	8004200 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80041d8:	f000 fe38 	bl	8004e4c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 020c 	bic.w	r2, r2, #12
 80041ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6999      	ldr	r1, [r3, #24]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	619a      	str	r2, [r3, #24]
 80041fe:	e060      	b.n	80042c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b04      	cmp	r3, #4
 8004204:	d11c      	bne.n	8004240 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004216:	f000 feb0 	bl	8004f7a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699a      	ldr	r2, [r3, #24]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004228:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6999      	ldr	r1, [r3, #24]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	021a      	lsls	r2, r3, #8
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	619a      	str	r2, [r3, #24]
 800423e:	e040      	b.n	80042c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b08      	cmp	r3, #8
 8004244:	d11b      	bne.n	800427e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004256:	f000 fefd 	bl	8005054 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 020c 	bic.w	r2, r2, #12
 8004268:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69d9      	ldr	r1, [r3, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	61da      	str	r2, [r3, #28]
 800427c:	e021      	b.n	80042c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b0c      	cmp	r3, #12
 8004282:	d11c      	bne.n	80042be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004294:	f000 ff1a 	bl	80050cc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80042a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69d9      	ldr	r1, [r3, #28]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	021a      	lsls	r2, r3, #8
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	61da      	str	r2, [r3, #28]
 80042bc:	e001      	b.n	80042c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e0ff      	b.n	80044f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b14      	cmp	r3, #20
 80042fe:	f200 80f0 	bhi.w	80044e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004302:	a201      	add	r2, pc, #4	@ (adr r2, 8004308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	0800435d 	.word	0x0800435d
 800430c:	080044e3 	.word	0x080044e3
 8004310:	080044e3 	.word	0x080044e3
 8004314:	080044e3 	.word	0x080044e3
 8004318:	0800439d 	.word	0x0800439d
 800431c:	080044e3 	.word	0x080044e3
 8004320:	080044e3 	.word	0x080044e3
 8004324:	080044e3 	.word	0x080044e3
 8004328:	080043df 	.word	0x080043df
 800432c:	080044e3 	.word	0x080044e3
 8004330:	080044e3 	.word	0x080044e3
 8004334:	080044e3 	.word	0x080044e3
 8004338:	0800441f 	.word	0x0800441f
 800433c:	080044e3 	.word	0x080044e3
 8004340:	080044e3 	.word	0x080044e3
 8004344:	080044e3 	.word	0x080044e3
 8004348:	08004461 	.word	0x08004461
 800434c:	080044e3 	.word	0x080044e3
 8004350:	080044e3 	.word	0x080044e3
 8004354:	080044e3 	.word	0x080044e3
 8004358:	080044a1 	.word	0x080044a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fa9c 	bl	80048a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0208 	orr.w	r2, r2, #8
 8004376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0204 	bic.w	r2, r2, #4
 8004386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6999      	ldr	r1, [r3, #24]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	619a      	str	r2, [r3, #24]
      break;
 800439a:	e0a5      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fb0c 	bl	80049c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6999      	ldr	r1, [r3, #24]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	021a      	lsls	r2, r3, #8
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	619a      	str	r2, [r3, #24]
      break;
 80043dc:	e084      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fb75 	bl	8004ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0208 	orr.w	r2, r2, #8
 80043f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0204 	bic.w	r2, r2, #4
 8004408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69d9      	ldr	r1, [r3, #28]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	61da      	str	r2, [r3, #28]
      break;
 800441c:	e064      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fbdd 	bl	8004be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69d9      	ldr	r1, [r3, #28]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	021a      	lsls	r2, r3, #8
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	61da      	str	r2, [r3, #28]
      break;
 800445e:	e043      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fc26 	bl	8004cb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0208 	orr.w	r2, r2, #8
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0204 	bic.w	r2, r2, #4
 800448a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800449e:	e023      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fc6a 	bl	8004d80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	021a      	lsls	r2, r3, #8
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80044e0:	e002      	b.n	80044e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
      break;
 80044e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop

080044fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_TIM_ConfigClockSource+0x1c>
 8004514:	2302      	movs	r3, #2
 8004516:	e0b6      	b.n	8004686 <HAL_TIM_ConfigClockSource+0x18a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004536:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800453a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004554:	d03e      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0xd8>
 8004556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800455a:	f200 8087 	bhi.w	800466c <HAL_TIM_ConfigClockSource+0x170>
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004562:	f000 8086 	beq.w	8004672 <HAL_TIM_ConfigClockSource+0x176>
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456a:	d87f      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 800456c:	2b70      	cmp	r3, #112	@ 0x70
 800456e:	d01a      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0xaa>
 8004570:	2b70      	cmp	r3, #112	@ 0x70
 8004572:	d87b      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 8004574:	2b60      	cmp	r3, #96	@ 0x60
 8004576:	d050      	beq.n	800461a <HAL_TIM_ConfigClockSource+0x11e>
 8004578:	2b60      	cmp	r3, #96	@ 0x60
 800457a:	d877      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 800457c:	2b50      	cmp	r3, #80	@ 0x50
 800457e:	d03c      	beq.n	80045fa <HAL_TIM_ConfigClockSource+0xfe>
 8004580:	2b50      	cmp	r3, #80	@ 0x50
 8004582:	d873      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 8004584:	2b40      	cmp	r3, #64	@ 0x40
 8004586:	d058      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x13e>
 8004588:	2b40      	cmp	r3, #64	@ 0x40
 800458a:	d86f      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 800458c:	2b30      	cmp	r3, #48	@ 0x30
 800458e:	d064      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
 8004590:	2b30      	cmp	r3, #48	@ 0x30
 8004592:	d86b      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d060      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d867      	bhi.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d05c      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d05a      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
 80045a4:	e062      	b.n	800466c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045b6:	f000 fde1 	bl	800517c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	609a      	str	r2, [r3, #8]
      break;
 80045d2:	e04f      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045e4:	f000 fdca 	bl	800517c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045f6:	609a      	str	r2, [r3, #8]
      break;
 80045f8:	e03c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	461a      	mov	r2, r3
 8004608:	f000 fc88 	bl	8004f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2150      	movs	r1, #80	@ 0x50
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fd97 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004618:	e02c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004626:	461a      	mov	r2, r3
 8004628:	f000 fce4 	bl	8004ff4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2160      	movs	r1, #96	@ 0x60
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fd87 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004638:	e01c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	461a      	mov	r2, r3
 8004648:	f000 fc68 	bl	8004f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2140      	movs	r1, #64	@ 0x40
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fd77 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004658:	e00c      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f000 fd6e 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 800466a:	e003      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      break;
 8004670:	e000      	b.n	8004674 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d831      	bhi.n	8004708 <HAL_TIM_ReadCapturedValue+0x78>
 80046a4:	a201      	add	r2, pc, #4	@ (adr r2, 80046ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046e1 	.word	0x080046e1
 80046b0:	08004709 	.word	0x08004709
 80046b4:	08004709 	.word	0x08004709
 80046b8:	08004709 	.word	0x08004709
 80046bc:	080046eb 	.word	0x080046eb
 80046c0:	08004709 	.word	0x08004709
 80046c4:	08004709 	.word	0x08004709
 80046c8:	08004709 	.word	0x08004709
 80046cc:	080046f5 	.word	0x080046f5
 80046d0:	08004709 	.word	0x08004709
 80046d4:	08004709 	.word	0x08004709
 80046d8:	08004709 	.word	0x08004709
 80046dc:	080046ff 	.word	0x080046ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e6:	60fb      	str	r3, [r7, #12]

      break;
 80046e8:	e00f      	b.n	800470a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f0:	60fb      	str	r3, [r7, #12]

      break;
 80046f2:	e00a      	b.n	800470a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fa:	60fb      	str	r3, [r7, #12]

      break;
 80046fc:	e005      	b.n	800470a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004704:	60fb      	str	r3, [r7, #12]

      break;
 8004706:	e000      	b.n	800470a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004708:	bf00      	nop
  }

  return tmpreg;
 800470a:	68fb      	ldr	r3, [r7, #12]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a42      	ldr	r2, [pc, #264]	@ (8004884 <TIM_Base_SetConfig+0x11c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00f      	beq.n	80047a0 <TIM_Base_SetConfig+0x38>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004786:	d00b      	beq.n	80047a0 <TIM_Base_SetConfig+0x38>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a3f      	ldr	r2, [pc, #252]	@ (8004888 <TIM_Base_SetConfig+0x120>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d007      	beq.n	80047a0 <TIM_Base_SetConfig+0x38>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a3e      	ldr	r2, [pc, #248]	@ (800488c <TIM_Base_SetConfig+0x124>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_Base_SetConfig+0x38>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a3d      	ldr	r2, [pc, #244]	@ (8004890 <TIM_Base_SetConfig+0x128>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d108      	bne.n	80047b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a33      	ldr	r2, [pc, #204]	@ (8004884 <TIM_Base_SetConfig+0x11c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01b      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c0:	d017      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a30      	ldr	r2, [pc, #192]	@ (8004888 <TIM_Base_SetConfig+0x120>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a2f      	ldr	r2, [pc, #188]	@ (800488c <TIM_Base_SetConfig+0x124>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00f      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004890 <TIM_Base_SetConfig+0x128>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004894 <TIM_Base_SetConfig+0x12c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004898 <TIM_Base_SetConfig+0x130>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a2b      	ldr	r2, [pc, #172]	@ (800489c <TIM_Base_SetConfig+0x134>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d108      	bne.n	8004804 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a16      	ldr	r2, [pc, #88]	@ (8004884 <TIM_Base_SetConfig+0x11c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00f      	beq.n	8004850 <TIM_Base_SetConfig+0xe8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a17      	ldr	r2, [pc, #92]	@ (8004890 <TIM_Base_SetConfig+0x128>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00b      	beq.n	8004850 <TIM_Base_SetConfig+0xe8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a16      	ldr	r2, [pc, #88]	@ (8004894 <TIM_Base_SetConfig+0x12c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <TIM_Base_SetConfig+0xe8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a15      	ldr	r2, [pc, #84]	@ (8004898 <TIM_Base_SetConfig+0x130>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_Base_SetConfig+0xe8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a14      	ldr	r2, [pc, #80]	@ (800489c <TIM_Base_SetConfig+0x134>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d103      	bne.n	8004858 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d105      	bne.n	8004876 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f023 0201 	bic.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]
  }
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40012c00 	.word	0x40012c00
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800
 8004890:	40013400 	.word	0x40013400
 8004894:	40014000 	.word	0x40014000
 8004898:	40014400 	.word	0x40014400
 800489c:	40014800 	.word	0x40014800

080048a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f023 0201 	bic.w	r2, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0303 	bic.w	r3, r3, #3
 80048da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f023 0302 	bic.w	r3, r3, #2
 80048ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a2c      	ldr	r2, [pc, #176]	@ (80049ac <TIM_OC1_SetConfig+0x10c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00f      	beq.n	8004920 <TIM_OC1_SetConfig+0x80>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a2b      	ldr	r2, [pc, #172]	@ (80049b0 <TIM_OC1_SetConfig+0x110>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00b      	beq.n	8004920 <TIM_OC1_SetConfig+0x80>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a2a      	ldr	r2, [pc, #168]	@ (80049b4 <TIM_OC1_SetConfig+0x114>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d007      	beq.n	8004920 <TIM_OC1_SetConfig+0x80>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a29      	ldr	r2, [pc, #164]	@ (80049b8 <TIM_OC1_SetConfig+0x118>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_OC1_SetConfig+0x80>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a28      	ldr	r2, [pc, #160]	@ (80049bc <TIM_OC1_SetConfig+0x11c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10c      	bne.n	800493a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0308 	bic.w	r3, r3, #8
 8004926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f023 0304 	bic.w	r3, r3, #4
 8004938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1b      	ldr	r2, [pc, #108]	@ (80049ac <TIM_OC1_SetConfig+0x10c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00f      	beq.n	8004962 <TIM_OC1_SetConfig+0xc2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1a      	ldr	r2, [pc, #104]	@ (80049b0 <TIM_OC1_SetConfig+0x110>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00b      	beq.n	8004962 <TIM_OC1_SetConfig+0xc2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a19      	ldr	r2, [pc, #100]	@ (80049b4 <TIM_OC1_SetConfig+0x114>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <TIM_OC1_SetConfig+0xc2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a18      	ldr	r2, [pc, #96]	@ (80049b8 <TIM_OC1_SetConfig+0x118>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <TIM_OC1_SetConfig+0xc2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a17      	ldr	r2, [pc, #92]	@ (80049bc <TIM_OC1_SetConfig+0x11c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d111      	bne.n	8004986 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	621a      	str	r2, [r3, #32]
}
 80049a0:	bf00      	nop
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40013400 	.word	0x40013400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40014400 	.word	0x40014400
 80049bc:	40014800 	.word	0x40014800

080049c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f023 0210 	bic.w	r2, r3, #16
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0320 	bic.w	r3, r3, #32
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a28      	ldr	r2, [pc, #160]	@ (8004ac0 <TIM_OC2_SetConfig+0x100>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_OC2_SetConfig+0x6c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a27      	ldr	r2, [pc, #156]	@ (8004ac4 <TIM_OC2_SetConfig+0x104>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10d      	bne.n	8004a48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac0 <TIM_OC2_SetConfig+0x100>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00f      	beq.n	8004a70 <TIM_OC2_SetConfig+0xb0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac4 <TIM_OC2_SetConfig+0x104>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00b      	beq.n	8004a70 <TIM_OC2_SetConfig+0xb0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <TIM_OC2_SetConfig+0x108>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d007      	beq.n	8004a70 <TIM_OC2_SetConfig+0xb0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a1a      	ldr	r2, [pc, #104]	@ (8004acc <TIM_OC2_SetConfig+0x10c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_OC2_SetConfig+0xb0>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a19      	ldr	r2, [pc, #100]	@ (8004ad0 <TIM_OC2_SetConfig+0x110>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d113      	bne.n	8004a98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a76:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a7e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40013400 	.word	0x40013400
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40014400 	.word	0x40014400
 8004ad0:	40014800 	.word	0x40014800

08004ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a27      	ldr	r2, [pc, #156]	@ (8004bd0 <TIM_OC3_SetConfig+0xfc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_OC3_SetConfig+0x6a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a26      	ldr	r2, [pc, #152]	@ (8004bd4 <TIM_OC3_SetConfig+0x100>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10d      	bne.n	8004b5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b58:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd0 <TIM_OC3_SetConfig+0xfc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00f      	beq.n	8004b82 <TIM_OC3_SetConfig+0xae>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd4 <TIM_OC3_SetConfig+0x100>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00b      	beq.n	8004b82 <TIM_OC3_SetConfig+0xae>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd8 <TIM_OC3_SetConfig+0x104>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d007      	beq.n	8004b82 <TIM_OC3_SetConfig+0xae>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a19      	ldr	r2, [pc, #100]	@ (8004bdc <TIM_OC3_SetConfig+0x108>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d003      	beq.n	8004b82 <TIM_OC3_SetConfig+0xae>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a18      	ldr	r2, [pc, #96]	@ (8004be0 <TIM_OC3_SetConfig+0x10c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d113      	bne.n	8004baa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	621a      	str	r2, [r3, #32]
}
 8004bc4:	bf00      	nop
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800

08004be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	031b      	lsls	r3, r3, #12
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a18      	ldr	r2, [pc, #96]	@ (8004ca4 <TIM_OC4_SetConfig+0xc0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00f      	beq.n	8004c68 <TIM_OC4_SetConfig+0x84>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a17      	ldr	r2, [pc, #92]	@ (8004ca8 <TIM_OC4_SetConfig+0xc4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00b      	beq.n	8004c68 <TIM_OC4_SetConfig+0x84>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a16      	ldr	r2, [pc, #88]	@ (8004cac <TIM_OC4_SetConfig+0xc8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d007      	beq.n	8004c68 <TIM_OC4_SetConfig+0x84>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a15      	ldr	r2, [pc, #84]	@ (8004cb0 <TIM_OC4_SetConfig+0xcc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <TIM_OC4_SetConfig+0x84>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a14      	ldr	r2, [pc, #80]	@ (8004cb4 <TIM_OC4_SetConfig+0xd0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d109      	bne.n	8004c7c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	019b      	lsls	r3, r3, #6
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40012c00 	.word	0x40012c00
 8004ca8:	40013400 	.word	0x40013400
 8004cac:	40014000 	.word	0x40014000
 8004cb0:	40014400 	.word	0x40014400
 8004cb4:	40014800 	.word	0x40014800

08004cb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004cfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	041b      	lsls	r3, r3, #16
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a17      	ldr	r2, [pc, #92]	@ (8004d6c <TIM_OC5_SetConfig+0xb4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00f      	beq.n	8004d32 <TIM_OC5_SetConfig+0x7a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a16      	ldr	r2, [pc, #88]	@ (8004d70 <TIM_OC5_SetConfig+0xb8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00b      	beq.n	8004d32 <TIM_OC5_SetConfig+0x7a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a15      	ldr	r2, [pc, #84]	@ (8004d74 <TIM_OC5_SetConfig+0xbc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d007      	beq.n	8004d32 <TIM_OC5_SetConfig+0x7a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a14      	ldr	r2, [pc, #80]	@ (8004d78 <TIM_OC5_SetConfig+0xc0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d003      	beq.n	8004d32 <TIM_OC5_SetConfig+0x7a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a13      	ldr	r2, [pc, #76]	@ (8004d7c <TIM_OC5_SetConfig+0xc4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d109      	bne.n	8004d46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	621a      	str	r2, [r3, #32]
}
 8004d60:	bf00      	nop
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40013400 	.word	0x40013400
 8004d74:	40014000 	.word	0x40014000
 8004d78:	40014400 	.word	0x40014400
 8004d7c:	40014800 	.word	0x40014800

08004d80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	051b      	lsls	r3, r3, #20
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a18      	ldr	r2, [pc, #96]	@ (8004e38 <TIM_OC6_SetConfig+0xb8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00f      	beq.n	8004dfc <TIM_OC6_SetConfig+0x7c>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a17      	ldr	r2, [pc, #92]	@ (8004e3c <TIM_OC6_SetConfig+0xbc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d00b      	beq.n	8004dfc <TIM_OC6_SetConfig+0x7c>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a16      	ldr	r2, [pc, #88]	@ (8004e40 <TIM_OC6_SetConfig+0xc0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_OC6_SetConfig+0x7c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a15      	ldr	r2, [pc, #84]	@ (8004e44 <TIM_OC6_SetConfig+0xc4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_OC6_SetConfig+0x7c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a14      	ldr	r2, [pc, #80]	@ (8004e48 <TIM_OC6_SetConfig+0xc8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d109      	bne.n	8004e10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	029b      	lsls	r3, r3, #10
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40013400 	.word	0x40013400
 8004e40:	40014000 	.word	0x40014000
 8004e44:	40014400 	.word	0x40014400
 8004e48:	40014800 	.word	0x40014800

08004e4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f023 0201 	bic.w	r2, r3, #1
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a24      	ldr	r2, [pc, #144]	@ (8004f08 <TIM_TI1_SetConfig+0xbc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <TIM_TI1_SetConfig+0x56>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e80:	d00f      	beq.n	8004ea2 <TIM_TI1_SetConfig+0x56>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <TIM_TI1_SetConfig+0xc0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_TI1_SetConfig+0x56>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4a20      	ldr	r2, [pc, #128]	@ (8004f10 <TIM_TI1_SetConfig+0xc4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_TI1_SetConfig+0x56>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4a1f      	ldr	r2, [pc, #124]	@ (8004f14 <TIM_TI1_SetConfig+0xc8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_TI1_SetConfig+0x56>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004f18 <TIM_TI1_SetConfig+0xcc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <TIM_TI1_SetConfig+0x5a>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <TIM_TI1_SetConfig+0x5c>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	e003      	b.n	8004ec6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f023 030a 	bic.w	r3, r3, #10
 8004ee0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f003 030a 	and.w	r3, r3, #10
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800
 8004f14:	40013400 	.word	0x40013400
 8004f18:	40014000 	.word	0x40014000

08004f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f023 0201 	bic.w	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 030a 	bic.w	r3, r3, #10
 8004f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b087      	sub	sp, #28
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f023 0210 	bic.w	r2, r3, #16
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	031b      	lsls	r3, r3, #12
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	621a      	str	r2, [r3, #32]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f023 0210 	bic.w	r2, r3, #16
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800501e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	031b      	lsls	r3, r3, #12
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005030:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	621a      	str	r2, [r3, #32]
}
 8005048:	bf00      	nop
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f023 0303 	bic.w	r3, r3, #3
 8005080:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005090:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	b2db      	uxtb	r3, r3
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80050a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	621a      	str	r2, [r3, #32]
}
 80050c0:	bf00      	nop
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800510a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	031b      	lsls	r3, r3, #12
 8005110:	b29b      	uxth	r3, r3
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800511e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	031b      	lsls	r3, r3, #12
 8005124:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	f043 0307 	orr.w	r3, r3, #7
 8005168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	609a      	str	r2, [r3, #8]
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	021a      	lsls	r2, r3, #8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	431a      	orrs	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	2201      	movs	r2, #1
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1a      	ldr	r2, [r3, #32]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	43db      	mvns	r3, r3
 80051de:	401a      	ands	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	fa01 f303 	lsl.w	r3, r1, r3
 80051f4:	431a      	orrs	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800521c:	2302      	movs	r3, #2
 800521e:	e063      	b.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a2b      	ldr	r2, [pc, #172]	@ (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a2a      	ldr	r2, [pc, #168]	@ (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d108      	bne.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800525a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800526c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1b      	ldr	r2, [pc, #108]	@ (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d018      	beq.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005292:	d013      	beq.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a18      	ldr	r2, [pc, #96]	@ (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00e      	beq.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a17      	ldr	r2, [pc, #92]	@ (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d009      	beq.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a12      	ldr	r2, [pc, #72]	@ (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a13      	ldr	r2, [pc, #76]	@ (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10c      	bne.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800
 8005304:	40014000 	.word	0x40014000

08005308 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e040      	b.n	80053d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc f94c 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	@ 0x24
 8005370:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0201 	bic.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fd8c 	bl	8005ea8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fbb5 	bl	8005b00 <UART_SetConfig>
 8005396:	4603      	mov	r3, r0
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e01b      	b.n	80053d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fe0b 	bl	8005fec <UART_CheckIdleState>
 80053d6:	4603      	mov	r3, r0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	@ 0x28
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d177      	bne.n	80054e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <HAL_UART_Transmit+0x24>
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e070      	b.n	80054ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2221      	movs	r2, #33	@ 0x21
 8005414:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005416:	f7fc fa87 	bl	8001928 <HAL_GetTick>
 800541a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	88fa      	ldrh	r2, [r7, #6]
 8005420:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	88fa      	ldrh	r2, [r7, #6]
 8005428:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005434:	d108      	bne.n	8005448 <HAL_UART_Transmit+0x68>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	e003      	b.n	8005450 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005450:	e02f      	b.n	80054b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2200      	movs	r2, #0
 800545a:	2180      	movs	r1, #128	@ 0x80
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fe6d 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d004      	beq.n	8005472 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e03b      	b.n	80054ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	881a      	ldrh	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005484:	b292      	uxth	r2, r2
 8005486:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	3302      	adds	r3, #2
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	e007      	b.n	80054a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	781a      	ldrb	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3301      	adds	r3, #1
 800549e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1c9      	bne.n	8005452 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2200      	movs	r2, #0
 80054c6:	2140      	movs	r1, #64	@ 0x40
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fe37 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d004      	beq.n	80054de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e005      	b.n	80054ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e000      	b.n	80054ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
  }
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3720      	adds	r7, #32
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b0ba      	sub	sp, #232	@ 0xe8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800551a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800551e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005522:	4013      	ands	r3, r2
 8005524:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800552c:	2b00      	cmp	r3, #0
 800552e:	d115      	bne.n	800555c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00f      	beq.n	800555c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800553c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 82ab 	beq.w	8005aa8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
      }
      return;
 800555a:	e2a5      	b.n	8005aa8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800555c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8117 	beq.w	8005794 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005572:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005576:	4b85      	ldr	r3, [pc, #532]	@ (800578c <HAL_UART_IRQHandler+0x298>)
 8005578:	4013      	ands	r3, r2
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 810a 	beq.w	8005794 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d011      	beq.n	80055b0 <HAL_UART_IRQHandler+0xbc>
 800558c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2201      	movs	r2, #1
 800559e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055a6:	f043 0201 	orr.w	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d011      	beq.n	80055e0 <HAL_UART_IRQHandler+0xec>
 80055bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2202      	movs	r2, #2
 80055ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055d6:	f043 0204 	orr.w	r2, r3, #4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d011      	beq.n	8005610 <HAL_UART_IRQHandler+0x11c>
 80055ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2204      	movs	r2, #4
 80055fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005606:	f043 0202 	orr.w	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d017      	beq.n	800564c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800561c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d105      	bne.n	8005634 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800562c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2208      	movs	r2, #8
 800563a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005642:	f043 0208 	orr.w	r2, r3, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800564c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005654:	2b00      	cmp	r3, #0
 8005656:	d012      	beq.n	800567e <HAL_UART_IRQHandler+0x18a>
 8005658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800565c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00c      	beq.n	800567e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800566c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005674:	f043 0220 	orr.w	r2, r3, #32
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8211 	beq.w	8005aac <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00d      	beq.n	80056b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c6:	2b40      	cmp	r3, #64	@ 0x40
 80056c8:	d005      	beq.n	80056d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d04f      	beq.n	8005776 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fd9d 	bl	8006216 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e6:	2b40      	cmp	r3, #64	@ 0x40
 80056e8:	d141      	bne.n	800576e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005700:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3308      	adds	r3, #8
 8005712:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005716:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800571a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005722:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800572e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1d9      	bne.n	80056ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573a:	2b00      	cmp	r3, #0
 800573c:	d013      	beq.n	8005766 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005742:	4a13      	ldr	r2, [pc, #76]	@ (8005790 <HAL_UART_IRQHandler+0x29c>)
 8005744:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800574a:	4618      	mov	r0, r3
 800574c:	f7fc fa6b 	bl	8001c26 <HAL_DMA_Abort_IT>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d017      	beq.n	8005786 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800575a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005760:	4610      	mov	r0, r2
 8005762:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005764:	e00f      	b.n	8005786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f9b4 	bl	8005ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576c:	e00b      	b.n	8005786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f9b0 	bl	8005ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005774:	e007      	b.n	8005786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f9ac 	bl	8005ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005784:	e192      	b.n	8005aac <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005786:	bf00      	nop
    return;
 8005788:	e190      	b.n	8005aac <HAL_UART_IRQHandler+0x5b8>
 800578a:	bf00      	nop
 800578c:	04000120 	.word	0x04000120
 8005790:	080062df 	.word	0x080062df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005798:	2b01      	cmp	r3, #1
 800579a:	f040 814b 	bne.w	8005a34 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800579e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 8144 	beq.w	8005a34 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 813d 	beq.w	8005a34 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2210      	movs	r2, #16
 80057c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057cc:	2b40      	cmp	r3, #64	@ 0x40
 80057ce:	f040 80b5 	bne.w	800593c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 8164 	beq.w	8005ab0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057f2:	429a      	cmp	r2, r3
 80057f4:	f080 815c 	bcs.w	8005ab0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b20      	cmp	r3, #32
 800580a:	f000 8086 	beq.w	800591a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005822:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005826:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800582a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005838:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800583c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005844:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005850:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1da      	bne.n	800580e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3308      	adds	r3, #8
 800585e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005868:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800586a:	f023 0301 	bic.w	r3, r3, #1
 800586e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3308      	adds	r3, #8
 8005878:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800587c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005880:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005884:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800588e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e1      	bne.n	8005858 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80058a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3308      	adds	r3, #8
 80058b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80058b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80058ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80058be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80058c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e3      	bne.n	8005894 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ea:	f023 0310 	bic.w	r3, r3, #16
 80058ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058fe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005902:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800590a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e4      	bne.n	80058da <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005914:	4618      	mov	r0, r3
 8005916:	f7fc f948 	bl	8001baa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800592c:	b29b      	uxth	r3, r3
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	b29b      	uxth	r3, r3
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f8d7 	bl	8005ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800593a:	e0b9      	b.n	8005ab0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005948:	b29b      	uxth	r3, r3
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005956:	b29b      	uxth	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80ab 	beq.w	8005ab4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800595e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 80a6 	beq.w	8005ab4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800597c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800598a:	647b      	str	r3, [r7, #68]	@ 0x44
 800598c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005990:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e4      	bne.n	8005968 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3308      	adds	r3, #8
 80059a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	623b      	str	r3, [r7, #32]
   return(result);
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3308      	adds	r3, #8
 80059be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80059c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80059c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e3      	bne.n	800599e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0310 	bic.w	r3, r3, #16
 80059fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	69b9      	ldr	r1, [r7, #24]
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	617b      	str	r3, [r7, #20]
   return(result);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e4      	bne.n	80059ea <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f85b 	bl	8005ae8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a32:	e03f      	b.n	8005ab4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00e      	beq.n	8005a5e <HAL_UART_IRQHandler+0x56a>
 8005a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005a54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fc81 	bl	800635e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a5c:	e02d      	b.n	8005aba <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00e      	beq.n	8005a88 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d01c      	beq.n	8005ab8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
    }
    return;
 8005a86:	e017      	b.n	8005ab8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d012      	beq.n	8005aba <HAL_UART_IRQHandler+0x5c6>
 8005a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00c      	beq.n	8005aba <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fc32 	bl	800630a <UART_EndTransmit_IT>
    return;
 8005aa6:	e008      	b.n	8005aba <HAL_UART_IRQHandler+0x5c6>
      return;
 8005aa8:	bf00      	nop
 8005aaa:	e006      	b.n	8005aba <HAL_UART_IRQHandler+0x5c6>
    return;
 8005aac:	bf00      	nop
 8005aae:	e004      	b.n	8005aba <HAL_UART_IRQHandler+0x5c6>
      return;
 8005ab0:	bf00      	nop
 8005ab2:	e002      	b.n	8005aba <HAL_UART_IRQHandler+0x5c6>
      return;
 8005ab4:	bf00      	nop
 8005ab6:	e000      	b.n	8005aba <HAL_UART_IRQHandler+0x5c6>
    return;
 8005ab8:	bf00      	nop
  }

}
 8005aba:	37e8      	adds	r7, #232	@ 0xe8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005b2e:	f023 030c 	bic.w	r3, r3, #12
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	6979      	ldr	r1, [r7, #20]
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4aa7      	ldr	r2, [pc, #668]	@ (8005e18 <UART_SetConfig+0x318>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d120      	bne.n	8005bc2 <UART_SetConfig+0xc2>
 8005b80:	4ba6      	ldr	r3, [pc, #664]	@ (8005e1c <UART_SetConfig+0x31c>)
 8005b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d817      	bhi.n	8005bbc <UART_SetConfig+0xbc>
 8005b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <UART_SetConfig+0x94>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bb1 	.word	0x08005bb1
 8005b9c:	08005bb7 	.word	0x08005bb7
 8005ba0:	08005bab 	.word	0x08005bab
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	77fb      	strb	r3, [r7, #31]
 8005ba8:	e0b5      	b.n	8005d16 <UART_SetConfig+0x216>
 8005baa:	2302      	movs	r3, #2
 8005bac:	77fb      	strb	r3, [r7, #31]
 8005bae:	e0b2      	b.n	8005d16 <UART_SetConfig+0x216>
 8005bb0:	2304      	movs	r3, #4
 8005bb2:	77fb      	strb	r3, [r7, #31]
 8005bb4:	e0af      	b.n	8005d16 <UART_SetConfig+0x216>
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	77fb      	strb	r3, [r7, #31]
 8005bba:	e0ac      	b.n	8005d16 <UART_SetConfig+0x216>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e0a9      	b.n	8005d16 <UART_SetConfig+0x216>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a96      	ldr	r2, [pc, #600]	@ (8005e20 <UART_SetConfig+0x320>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d124      	bne.n	8005c16 <UART_SetConfig+0x116>
 8005bcc:	4b93      	ldr	r3, [pc, #588]	@ (8005e1c <UART_SetConfig+0x31c>)
 8005bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bd8:	d011      	beq.n	8005bfe <UART_SetConfig+0xfe>
 8005bda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bde:	d817      	bhi.n	8005c10 <UART_SetConfig+0x110>
 8005be0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005be4:	d011      	beq.n	8005c0a <UART_SetConfig+0x10a>
 8005be6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bea:	d811      	bhi.n	8005c10 <UART_SetConfig+0x110>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <UART_SetConfig+0xf8>
 8005bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bf4:	d006      	beq.n	8005c04 <UART_SetConfig+0x104>
 8005bf6:	e00b      	b.n	8005c10 <UART_SetConfig+0x110>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	77fb      	strb	r3, [r7, #31]
 8005bfc:	e08b      	b.n	8005d16 <UART_SetConfig+0x216>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	77fb      	strb	r3, [r7, #31]
 8005c02:	e088      	b.n	8005d16 <UART_SetConfig+0x216>
 8005c04:	2304      	movs	r3, #4
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e085      	b.n	8005d16 <UART_SetConfig+0x216>
 8005c0a:	2308      	movs	r3, #8
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e082      	b.n	8005d16 <UART_SetConfig+0x216>
 8005c10:	2310      	movs	r3, #16
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e07f      	b.n	8005d16 <UART_SetConfig+0x216>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a82      	ldr	r2, [pc, #520]	@ (8005e24 <UART_SetConfig+0x324>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d124      	bne.n	8005c6a <UART_SetConfig+0x16a>
 8005c20:	4b7e      	ldr	r3, [pc, #504]	@ (8005e1c <UART_SetConfig+0x31c>)
 8005c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c24:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005c28:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c2c:	d011      	beq.n	8005c52 <UART_SetConfig+0x152>
 8005c2e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c32:	d817      	bhi.n	8005c64 <UART_SetConfig+0x164>
 8005c34:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c38:	d011      	beq.n	8005c5e <UART_SetConfig+0x15e>
 8005c3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c3e:	d811      	bhi.n	8005c64 <UART_SetConfig+0x164>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <UART_SetConfig+0x14c>
 8005c44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c48:	d006      	beq.n	8005c58 <UART_SetConfig+0x158>
 8005c4a:	e00b      	b.n	8005c64 <UART_SetConfig+0x164>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e061      	b.n	8005d16 <UART_SetConfig+0x216>
 8005c52:	2302      	movs	r3, #2
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e05e      	b.n	8005d16 <UART_SetConfig+0x216>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e05b      	b.n	8005d16 <UART_SetConfig+0x216>
 8005c5e:	2308      	movs	r3, #8
 8005c60:	77fb      	strb	r3, [r7, #31]
 8005c62:	e058      	b.n	8005d16 <UART_SetConfig+0x216>
 8005c64:	2310      	movs	r3, #16
 8005c66:	77fb      	strb	r3, [r7, #31]
 8005c68:	e055      	b.n	8005d16 <UART_SetConfig+0x216>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a6e      	ldr	r2, [pc, #440]	@ (8005e28 <UART_SetConfig+0x328>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d124      	bne.n	8005cbe <UART_SetConfig+0x1be>
 8005c74:	4b69      	ldr	r3, [pc, #420]	@ (8005e1c <UART_SetConfig+0x31c>)
 8005c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c78:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005c7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c80:	d011      	beq.n	8005ca6 <UART_SetConfig+0x1a6>
 8005c82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c86:	d817      	bhi.n	8005cb8 <UART_SetConfig+0x1b8>
 8005c88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c8c:	d011      	beq.n	8005cb2 <UART_SetConfig+0x1b2>
 8005c8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c92:	d811      	bhi.n	8005cb8 <UART_SetConfig+0x1b8>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <UART_SetConfig+0x1a0>
 8005c98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c9c:	d006      	beq.n	8005cac <UART_SetConfig+0x1ac>
 8005c9e:	e00b      	b.n	8005cb8 <UART_SetConfig+0x1b8>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	e037      	b.n	8005d16 <UART_SetConfig+0x216>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	77fb      	strb	r3, [r7, #31]
 8005caa:	e034      	b.n	8005d16 <UART_SetConfig+0x216>
 8005cac:	2304      	movs	r3, #4
 8005cae:	77fb      	strb	r3, [r7, #31]
 8005cb0:	e031      	b.n	8005d16 <UART_SetConfig+0x216>
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	77fb      	strb	r3, [r7, #31]
 8005cb6:	e02e      	b.n	8005d16 <UART_SetConfig+0x216>
 8005cb8:	2310      	movs	r3, #16
 8005cba:	77fb      	strb	r3, [r7, #31]
 8005cbc:	e02b      	b.n	8005d16 <UART_SetConfig+0x216>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a5a      	ldr	r2, [pc, #360]	@ (8005e2c <UART_SetConfig+0x32c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d124      	bne.n	8005d12 <UART_SetConfig+0x212>
 8005cc8:	4b54      	ldr	r3, [pc, #336]	@ (8005e1c <UART_SetConfig+0x31c>)
 8005cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ccc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005cd0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005cd4:	d011      	beq.n	8005cfa <UART_SetConfig+0x1fa>
 8005cd6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005cda:	d817      	bhi.n	8005d0c <UART_SetConfig+0x20c>
 8005cdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ce0:	d011      	beq.n	8005d06 <UART_SetConfig+0x206>
 8005ce2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ce6:	d811      	bhi.n	8005d0c <UART_SetConfig+0x20c>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <UART_SetConfig+0x1f4>
 8005cec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cf0:	d006      	beq.n	8005d00 <UART_SetConfig+0x200>
 8005cf2:	e00b      	b.n	8005d0c <UART_SetConfig+0x20c>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e00d      	b.n	8005d16 <UART_SetConfig+0x216>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e00a      	b.n	8005d16 <UART_SetConfig+0x216>
 8005d00:	2304      	movs	r3, #4
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e007      	b.n	8005d16 <UART_SetConfig+0x216>
 8005d06:	2308      	movs	r3, #8
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e004      	b.n	8005d16 <UART_SetConfig+0x216>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	77fb      	strb	r3, [r7, #31]
 8005d10:	e001      	b.n	8005d16 <UART_SetConfig+0x216>
 8005d12:	2310      	movs	r3, #16
 8005d14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d1e:	d15b      	bne.n	8005dd8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005d20:	7ffb      	ldrb	r3, [r7, #31]
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d827      	bhi.n	8005d76 <UART_SetConfig+0x276>
 8005d26:	a201      	add	r2, pc, #4	@ (adr r2, 8005d2c <UART_SetConfig+0x22c>)
 8005d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2c:	08005d51 	.word	0x08005d51
 8005d30:	08005d59 	.word	0x08005d59
 8005d34:	08005d61 	.word	0x08005d61
 8005d38:	08005d77 	.word	0x08005d77
 8005d3c:	08005d67 	.word	0x08005d67
 8005d40:	08005d77 	.word	0x08005d77
 8005d44:	08005d77 	.word	0x08005d77
 8005d48:	08005d77 	.word	0x08005d77
 8005d4c:	08005d6f 	.word	0x08005d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d50:	f7fd fbde 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 8005d54:	61b8      	str	r0, [r7, #24]
        break;
 8005d56:	e013      	b.n	8005d80 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d58:	f7fd fbfc 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 8005d5c:	61b8      	str	r0, [r7, #24]
        break;
 8005d5e:	e00f      	b.n	8005d80 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d60:	4b33      	ldr	r3, [pc, #204]	@ (8005e30 <UART_SetConfig+0x330>)
 8005d62:	61bb      	str	r3, [r7, #24]
        break;
 8005d64:	e00c      	b.n	8005d80 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d66:	f7fd fb73 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8005d6a:	61b8      	str	r0, [r7, #24]
        break;
 8005d6c:	e008      	b.n	8005d80 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d72:	61bb      	str	r3, [r7, #24]
        break;
 8005d74:	e004      	b.n	8005d80 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 8082 	beq.w	8005e8c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	005a      	lsls	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	441a      	add	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b0f      	cmp	r3, #15
 8005da2:	d916      	bls.n	8005dd2 <UART_SetConfig+0x2d2>
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005daa:	d212      	bcs.n	8005dd2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f023 030f 	bic.w	r3, r3, #15
 8005db4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	89fb      	ldrh	r3, [r7, #14]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	89fa      	ldrh	r2, [r7, #14]
 8005dce:	60da      	str	r2, [r3, #12]
 8005dd0:	e05c      	b.n	8005e8c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	77bb      	strb	r3, [r7, #30]
 8005dd6:	e059      	b.n	8005e8c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dd8:	7ffb      	ldrb	r3, [r7, #31]
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d835      	bhi.n	8005e4a <UART_SetConfig+0x34a>
 8005dde:	a201      	add	r2, pc, #4	@ (adr r2, 8005de4 <UART_SetConfig+0x2e4>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005e09 	.word	0x08005e09
 8005de8:	08005e11 	.word	0x08005e11
 8005dec:	08005e35 	.word	0x08005e35
 8005df0:	08005e4b 	.word	0x08005e4b
 8005df4:	08005e3b 	.word	0x08005e3b
 8005df8:	08005e4b 	.word	0x08005e4b
 8005dfc:	08005e4b 	.word	0x08005e4b
 8005e00:	08005e4b 	.word	0x08005e4b
 8005e04:	08005e43 	.word	0x08005e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e08:	f7fd fb82 	bl	8003510 <HAL_RCC_GetPCLK1Freq>
 8005e0c:	61b8      	str	r0, [r7, #24]
        break;
 8005e0e:	e021      	b.n	8005e54 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e10:	f7fd fba0 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 8005e14:	61b8      	str	r0, [r7, #24]
        break;
 8005e16:	e01d      	b.n	8005e54 <UART_SetConfig+0x354>
 8005e18:	40013800 	.word	0x40013800
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	40004400 	.word	0x40004400
 8005e24:	40004800 	.word	0x40004800
 8005e28:	40004c00 	.word	0x40004c00
 8005e2c:	40005000 	.word	0x40005000
 8005e30:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e34:	4b1b      	ldr	r3, [pc, #108]	@ (8005ea4 <UART_SetConfig+0x3a4>)
 8005e36:	61bb      	str	r3, [r7, #24]
        break;
 8005e38:	e00c      	b.n	8005e54 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3a:	f7fd fb09 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 8005e3e:	61b8      	str	r0, [r7, #24]
        break;
 8005e40:	e008      	b.n	8005e54 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e46:	61bb      	str	r3, [r7, #24]
        break;
 8005e48:	e004      	b.n	8005e54 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	77bb      	strb	r3, [r7, #30]
        break;
 8005e52:	bf00      	nop
    }

    if (pclk != 0U)
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d018      	beq.n	8005e8c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	085a      	lsrs	r2, r3, #1
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	441a      	add	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b0f      	cmp	r3, #15
 8005e72:	d909      	bls.n	8005e88 <UART_SetConfig+0x388>
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e7a:	d205      	bcs.n	8005e88 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	60da      	str	r2, [r3, #12]
 8005e86:	e001      	b.n	8005e8c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e98:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	007a1200 	.word	0x007a1200

08005ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00a      	beq.n	8005f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01a      	beq.n	8005fbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fa6:	d10a      	bne.n	8005fbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	605a      	str	r2, [r3, #4]
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b098      	sub	sp, #96	@ 0x60
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ffc:	f7fb fc94 	bl	8001928 <HAL_GetTick>
 8006000:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b08      	cmp	r3, #8
 800600e:	d12e      	bne.n	800606e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006010:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006018:	2200      	movs	r2, #0
 800601a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f88c 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d021      	beq.n	800606e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800603e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006048:	647b      	str	r3, [r7, #68]	@ 0x44
 800604a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800604e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e6      	bne.n	800602a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e062      	b.n	8006134 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b04      	cmp	r3, #4
 800607a:	d149      	bne.n	8006110 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800607c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006084:	2200      	movs	r2, #0
 8006086:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f856 	bl	800613c <UART_WaitOnFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d03c      	beq.n	8006110 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	623b      	str	r3, [r7, #32]
   return(result);
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80060b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e6      	bne.n	8006096 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3308      	adds	r3, #8
 80060ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3308      	adds	r3, #8
 80060e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060e8:	61fa      	str	r2, [r7, #28]
 80060ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	69b9      	ldr	r1, [r7, #24]
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	617b      	str	r3, [r7, #20]
   return(result);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e5      	bne.n	80060c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e011      	b.n	8006134 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3758      	adds	r7, #88	@ 0x58
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800614c:	e04f      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d04b      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006156:	f7fb fbe7 	bl	8001928 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	429a      	cmp	r2, r3
 8006164:	d302      	bcc.n	800616c <UART_WaitOnFlagUntilTimeout+0x30>
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e04e      	b.n	800620e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b00      	cmp	r3, #0
 800617c:	d037      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b80      	cmp	r3, #128	@ 0x80
 8006182:	d034      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b40      	cmp	r3, #64	@ 0x40
 8006188:	d031      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b08      	cmp	r3, #8
 8006196:	d110      	bne.n	80061ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2208      	movs	r2, #8
 800619e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f838 	bl	8006216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2208      	movs	r2, #8
 80061aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e029      	b.n	800620e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061c8:	d111      	bne.n	80061ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f81e 	bl	8006216 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2220      	movs	r2, #32
 80061de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e00f      	b.n	800620e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4013      	ands	r3, r2
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	bf0c      	ite	eq
 80061fe:	2301      	moveq	r3, #1
 8006200:	2300      	movne	r3, #0
 8006202:	b2db      	uxtb	r3, r3
 8006204:	461a      	mov	r2, r3
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	429a      	cmp	r2, r3
 800620a:	d0a0      	beq.n	800614e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006216:	b480      	push	{r7}
 8006218:	b095      	sub	sp, #84	@ 0x54
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800623c:	643b      	str	r3, [r7, #64]	@ 0x40
 800623e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800624a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e6      	bne.n	800621e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3308      	adds	r3, #8
 8006256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f023 0301 	bic.w	r3, r3, #1
 8006266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3308      	adds	r3, #8
 800626e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006270:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006272:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e5      	bne.n	8006250 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006288:	2b01      	cmp	r3, #1
 800628a:	d118      	bne.n	80062be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	e853 3f00 	ldrex	r3, [r3]
 8006298:	60bb      	str	r3, [r7, #8]
   return(result);
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f023 0310 	bic.w	r3, r3, #16
 80062a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062aa:	61bb      	str	r3, [r7, #24]
 80062ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ae:	6979      	ldr	r1, [r7, #20]
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	613b      	str	r3, [r7, #16]
   return(result);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e6      	bne.n	800628c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80062d2:	bf00      	nop
 80062d4:	3754      	adds	r7, #84	@ 0x54
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f7ff fbe9 	bl	8005ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b088      	sub	sp, #32
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006326:	61fb      	str	r3, [r7, #28]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6979      	ldr	r1, [r7, #20]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	613b      	str	r3, [r7, #16]
   return(result);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e6      	bne.n	8006312 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff fbb5 	bl	8005ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006356:	bf00      	nop
 8006358:	3720      	adds	r7, #32
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800637a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800637e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	b29b      	uxth	r3, r3
 800638c:	43db      	mvns	r3, r3
 800638e:	b29b      	uxth	r3, r3
 8006390:	4013      	ands	r3, r2
 8006392:	b29a      	uxth	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	1d3b      	adds	r3, r7, #4
 80063b2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <swapfunc>:
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	b510      	push	{r4, lr}
 80063e8:	d00a      	beq.n	8006400 <swapfunc+0x1c>
 80063ea:	0892      	lsrs	r2, r2, #2
 80063ec:	3a01      	subs	r2, #1
 80063ee:	6803      	ldr	r3, [r0, #0]
 80063f0:	680c      	ldr	r4, [r1, #0]
 80063f2:	f840 4b04 	str.w	r4, [r0], #4
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	f841 3b04 	str.w	r3, [r1], #4
 80063fc:	dcf6      	bgt.n	80063ec <swapfunc+0x8>
 80063fe:	bd10      	pop	{r4, pc}
 8006400:	4402      	add	r2, r0
 8006402:	780c      	ldrb	r4, [r1, #0]
 8006404:	7803      	ldrb	r3, [r0, #0]
 8006406:	f800 4b01 	strb.w	r4, [r0], #1
 800640a:	f801 3b01 	strb.w	r3, [r1], #1
 800640e:	1a13      	subs	r3, r2, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	dcf6      	bgt.n	8006402 <swapfunc+0x1e>
 8006414:	e7f3      	b.n	80063fe <swapfunc+0x1a>

08006416 <med3.constprop.0>:
 8006416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006418:	460f      	mov	r7, r1
 800641a:	4616      	mov	r6, r2
 800641c:	4604      	mov	r4, r0
 800641e:	461d      	mov	r5, r3
 8006420:	4798      	blx	r3
 8006422:	2800      	cmp	r0, #0
 8006424:	4631      	mov	r1, r6
 8006426:	4638      	mov	r0, r7
 8006428:	da0c      	bge.n	8006444 <med3.constprop.0+0x2e>
 800642a:	47a8      	blx	r5
 800642c:	2800      	cmp	r0, #0
 800642e:	da02      	bge.n	8006436 <med3.constprop.0+0x20>
 8006430:	463c      	mov	r4, r7
 8006432:	4620      	mov	r0, r4
 8006434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006436:	4631      	mov	r1, r6
 8006438:	4620      	mov	r0, r4
 800643a:	47a8      	blx	r5
 800643c:	2800      	cmp	r0, #0
 800643e:	daf8      	bge.n	8006432 <med3.constprop.0+0x1c>
 8006440:	4634      	mov	r4, r6
 8006442:	e7f6      	b.n	8006432 <med3.constprop.0+0x1c>
 8006444:	47a8      	blx	r5
 8006446:	2800      	cmp	r0, #0
 8006448:	dcf2      	bgt.n	8006430 <med3.constprop.0+0x1a>
 800644a:	4631      	mov	r1, r6
 800644c:	4620      	mov	r0, r4
 800644e:	47a8      	blx	r5
 8006450:	2800      	cmp	r0, #0
 8006452:	daf5      	bge.n	8006440 <med3.constprop.0+0x2a>
 8006454:	e7ed      	b.n	8006432 <med3.constprop.0+0x1c>

08006456 <qsort>:
 8006456:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	b095      	sub	sp, #84	@ 0x54
 800645c:	4607      	mov	r7, r0
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	ea40 0302 	orr.w	r3, r0, r2
 8006464:	079b      	lsls	r3, r3, #30
 8006466:	4615      	mov	r5, r2
 8006468:	d118      	bne.n	800649c <qsort+0x46>
 800646a:	f1b2 0804 	subs.w	r8, r2, #4
 800646e:	bf18      	it	ne
 8006470:	f04f 0801 	movne.w	r8, #1
 8006474:	2300      	movs	r3, #0
 8006476:	9301      	str	r3, [sp, #4]
 8006478:	fb05 f401 	mul.w	r4, r5, r1
 800647c:	193b      	adds	r3, r7, r4
 800647e:	2906      	cmp	r1, #6
 8006480:	eb07 0b05 	add.w	fp, r7, r5
 8006484:	9302      	str	r3, [sp, #8]
 8006486:	d828      	bhi.n	80064da <qsort+0x84>
 8006488:	9b02      	ldr	r3, [sp, #8]
 800648a:	459b      	cmp	fp, r3
 800648c:	d310      	bcc.n	80064b0 <qsort+0x5a>
 800648e:	9b01      	ldr	r3, [sp, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 8117 	bne.w	80066c4 <qsort+0x26e>
 8006496:	b015      	add	sp, #84	@ 0x54
 8006498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649c:	f04f 0802 	mov.w	r8, #2
 80064a0:	e7e8      	b.n	8006474 <qsort+0x1e>
 80064a2:	4643      	mov	r3, r8
 80064a4:	462a      	mov	r2, r5
 80064a6:	4631      	mov	r1, r6
 80064a8:	4620      	mov	r0, r4
 80064aa:	f7ff ff9b 	bl	80063e4 <swapfunc>
 80064ae:	e00f      	b.n	80064d0 <qsort+0x7a>
 80064b0:	465c      	mov	r4, fp
 80064b2:	e00e      	b.n	80064d2 <qsort+0x7c>
 80064b4:	1b66      	subs	r6, r4, r5
 80064b6:	9b00      	ldr	r3, [sp, #0]
 80064b8:	4621      	mov	r1, r4
 80064ba:	4630      	mov	r0, r6
 80064bc:	4798      	blx	r3
 80064be:	2800      	cmp	r0, #0
 80064c0:	dd09      	ble.n	80064d6 <qsort+0x80>
 80064c2:	f1b8 0f00 	cmp.w	r8, #0
 80064c6:	d1ec      	bne.n	80064a2 <qsort+0x4c>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	6832      	ldr	r2, [r6, #0]
 80064cc:	6022      	str	r2, [r4, #0]
 80064ce:	6033      	str	r3, [r6, #0]
 80064d0:	4634      	mov	r4, r6
 80064d2:	42a7      	cmp	r7, r4
 80064d4:	d3ee      	bcc.n	80064b4 <qsort+0x5e>
 80064d6:	44ab      	add	fp, r5
 80064d8:	e7d6      	b.n	8006488 <qsort+0x32>
 80064da:	ea4f 0951 	mov.w	r9, r1, lsr #1
 80064de:	1b64      	subs	r4, r4, r5
 80064e0:	2907      	cmp	r1, #7
 80064e2:	fb05 7909 	mla	r9, r5, r9, r7
 80064e6:	443c      	add	r4, r7
 80064e8:	d021      	beq.n	800652e <qsort+0xd8>
 80064ea:	2928      	cmp	r1, #40	@ 0x28
 80064ec:	d944      	bls.n	8006578 <qsort+0x122>
 80064ee:	08ce      	lsrs	r6, r1, #3
 80064f0:	436e      	muls	r6, r5
 80064f2:	9b00      	ldr	r3, [sp, #0]
 80064f4:	eb07 0246 	add.w	r2, r7, r6, lsl #1
 80064f8:	19b9      	adds	r1, r7, r6
 80064fa:	4638      	mov	r0, r7
 80064fc:	f7ff ff8b 	bl	8006416 <med3.constprop.0>
 8006500:	4649      	mov	r1, r9
 8006502:	eb09 0206 	add.w	r2, r9, r6
 8006506:	9b00      	ldr	r3, [sp, #0]
 8006508:	4682      	mov	sl, r0
 800650a:	1b88      	subs	r0, r1, r6
 800650c:	f7ff ff83 	bl	8006416 <med3.constprop.0>
 8006510:	4622      	mov	r2, r4
 8006512:	9b00      	ldr	r3, [sp, #0]
 8006514:	4681      	mov	r9, r0
 8006516:	1ba1      	subs	r1, r4, r6
 8006518:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
 800651c:	f7ff ff7b 	bl	8006416 <med3.constprop.0>
 8006520:	4602      	mov	r2, r0
 8006522:	4649      	mov	r1, r9
 8006524:	9b00      	ldr	r3, [sp, #0]
 8006526:	4650      	mov	r0, sl
 8006528:	f7ff ff75 	bl	8006416 <med3.constprop.0>
 800652c:	4681      	mov	r9, r0
 800652e:	f1b8 0f00 	cmp.w	r8, #0
 8006532:	d124      	bne.n	800657e <qsort+0x128>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	f8d9 2000 	ldr.w	r2, [r9]
 800653a:	603a      	str	r2, [r7, #0]
 800653c:	f8c9 3000 	str.w	r3, [r9]
 8006540:	46d9      	mov	r9, fp
 8006542:	46a2      	mov	sl, r4
 8006544:	465e      	mov	r6, fp
 8006546:	2300      	movs	r3, #0
 8006548:	45a1      	cmp	r9, r4
 800654a:	d836      	bhi.n	80065ba <qsort+0x164>
 800654c:	9303      	str	r3, [sp, #12]
 800654e:	4639      	mov	r1, r7
 8006550:	9b00      	ldr	r3, [sp, #0]
 8006552:	4648      	mov	r0, r9
 8006554:	4798      	blx	r3
 8006556:	2800      	cmp	r0, #0
 8006558:	9b03      	ldr	r3, [sp, #12]
 800655a:	dc2c      	bgt.n	80065b6 <qsort+0x160>
 800655c:	d10a      	bne.n	8006574 <qsort+0x11e>
 800655e:	f1b8 0f00 	cmp.w	r8, #0
 8006562:	d113      	bne.n	800658c <qsort+0x136>
 8006564:	6833      	ldr	r3, [r6, #0]
 8006566:	f8d9 2000 	ldr.w	r2, [r9]
 800656a:	6032      	str	r2, [r6, #0]
 800656c:	f8c9 3000 	str.w	r3, [r9]
 8006570:	442e      	add	r6, r5
 8006572:	2301      	movs	r3, #1
 8006574:	44a9      	add	r9, r5
 8006576:	e7e7      	b.n	8006548 <qsort+0xf2>
 8006578:	4622      	mov	r2, r4
 800657a:	46ba      	mov	sl, r7
 800657c:	e7d1      	b.n	8006522 <qsort+0xcc>
 800657e:	4643      	mov	r3, r8
 8006580:	462a      	mov	r2, r5
 8006582:	4649      	mov	r1, r9
 8006584:	4638      	mov	r0, r7
 8006586:	f7ff ff2d 	bl	80063e4 <swapfunc>
 800658a:	e7d9      	b.n	8006540 <qsort+0xea>
 800658c:	4643      	mov	r3, r8
 800658e:	462a      	mov	r2, r5
 8006590:	4649      	mov	r1, r9
 8006592:	4630      	mov	r0, r6
 8006594:	f7ff ff26 	bl	80063e4 <swapfunc>
 8006598:	e7ea      	b.n	8006570 <qsort+0x11a>
 800659a:	d10b      	bne.n	80065b4 <qsort+0x15e>
 800659c:	f1b8 0f00 	cmp.w	r8, #0
 80065a0:	d113      	bne.n	80065ca <qsort+0x174>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	f8da 2000 	ldr.w	r2, [sl]
 80065a8:	6022      	str	r2, [r4, #0]
 80065aa:	f8ca 3000 	str.w	r3, [sl]
 80065ae:	ebaa 0a05 	sub.w	sl, sl, r5
 80065b2:	2301      	movs	r3, #1
 80065b4:	1b64      	subs	r4, r4, r5
 80065b6:	45a1      	cmp	r9, r4
 80065b8:	d90e      	bls.n	80065d8 <qsort+0x182>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d140      	bne.n	8006640 <qsort+0x1ea>
 80065be:	9b02      	ldr	r3, [sp, #8]
 80065c0:	459b      	cmp	fp, r3
 80065c2:	f4bf af64 	bcs.w	800648e <qsort+0x38>
 80065c6:	465c      	mov	r4, fp
 80065c8:	e036      	b.n	8006638 <qsort+0x1e2>
 80065ca:	4643      	mov	r3, r8
 80065cc:	462a      	mov	r2, r5
 80065ce:	4651      	mov	r1, sl
 80065d0:	4620      	mov	r0, r4
 80065d2:	f7ff ff07 	bl	80063e4 <swapfunc>
 80065d6:	e7ea      	b.n	80065ae <qsort+0x158>
 80065d8:	9303      	str	r3, [sp, #12]
 80065da:	4639      	mov	r1, r7
 80065dc:	9b00      	ldr	r3, [sp, #0]
 80065de:	4620      	mov	r0, r4
 80065e0:	4798      	blx	r3
 80065e2:	2800      	cmp	r0, #0
 80065e4:	9b03      	ldr	r3, [sp, #12]
 80065e6:	dad8      	bge.n	800659a <qsort+0x144>
 80065e8:	f1b8 0f00 	cmp.w	r8, #0
 80065ec:	d107      	bne.n	80065fe <qsort+0x1a8>
 80065ee:	f8d9 3000 	ldr.w	r3, [r9]
 80065f2:	6822      	ldr	r2, [r4, #0]
 80065f4:	f8c9 2000 	str.w	r2, [r9]
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	1b64      	subs	r4, r4, r5
 80065fc:	e7b9      	b.n	8006572 <qsort+0x11c>
 80065fe:	4643      	mov	r3, r8
 8006600:	462a      	mov	r2, r5
 8006602:	4621      	mov	r1, r4
 8006604:	4648      	mov	r0, r9
 8006606:	f7ff feed 	bl	80063e4 <swapfunc>
 800660a:	e7f6      	b.n	80065fa <qsort+0x1a4>
 800660c:	4643      	mov	r3, r8
 800660e:	462a      	mov	r2, r5
 8006610:	4631      	mov	r1, r6
 8006612:	4620      	mov	r0, r4
 8006614:	f7ff fee6 	bl	80063e4 <swapfunc>
 8006618:	e00d      	b.n	8006636 <qsort+0x1e0>
 800661a:	1b66      	subs	r6, r4, r5
 800661c:	9b00      	ldr	r3, [sp, #0]
 800661e:	4621      	mov	r1, r4
 8006620:	4630      	mov	r0, r6
 8006622:	4798      	blx	r3
 8006624:	2800      	cmp	r0, #0
 8006626:	dd09      	ble.n	800663c <qsort+0x1e6>
 8006628:	f1b8 0f00 	cmp.w	r8, #0
 800662c:	d1ee      	bne.n	800660c <qsort+0x1b6>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	6832      	ldr	r2, [r6, #0]
 8006632:	6022      	str	r2, [r4, #0]
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	4634      	mov	r4, r6
 8006638:	42a7      	cmp	r7, r4
 800663a:	d3ee      	bcc.n	800661a <qsort+0x1c4>
 800663c:	44ab      	add	fp, r5
 800663e:	e7be      	b.n	80065be <qsort+0x168>
 8006640:	eba9 0b06 	sub.w	fp, r9, r6
 8006644:	1bf2      	subs	r2, r6, r7
 8006646:	455a      	cmp	r2, fp
 8006648:	bfa8      	it	ge
 800664a:	465a      	movge	r2, fp
 800664c:	b12a      	cbz	r2, 800665a <qsort+0x204>
 800664e:	4643      	mov	r3, r8
 8006650:	eba9 0102 	sub.w	r1, r9, r2
 8006654:	4638      	mov	r0, r7
 8006656:	f7ff fec5 	bl	80063e4 <swapfunc>
 800665a:	9b02      	ldr	r3, [sp, #8]
 800665c:	eba3 020a 	sub.w	r2, r3, sl
 8006660:	ebaa 0404 	sub.w	r4, sl, r4
 8006664:	1b52      	subs	r2, r2, r5
 8006666:	42a2      	cmp	r2, r4
 8006668:	bf28      	it	cs
 800666a:	4622      	movcs	r2, r4
 800666c:	b12a      	cbz	r2, 800667a <qsort+0x224>
 800666e:	9902      	ldr	r1, [sp, #8]
 8006670:	4643      	mov	r3, r8
 8006672:	1a89      	subs	r1, r1, r2
 8006674:	4648      	mov	r0, r9
 8006676:	f7ff feb5 	bl	80063e4 <swapfunc>
 800667a:	9b02      	ldr	r3, [sp, #8]
 800667c:	455c      	cmp	r4, fp
 800667e:	eba3 0604 	sub.w	r6, r3, r4
 8006682:	d805      	bhi.n	8006690 <qsort+0x23a>
 8006684:	4623      	mov	r3, r4
 8006686:	465c      	mov	r4, fp
 8006688:	469b      	mov	fp, r3
 800668a:	4633      	mov	r3, r6
 800668c:	463e      	mov	r6, r7
 800668e:	461f      	mov	r7, r3
 8006690:	45ab      	cmp	fp, r5
 8006692:	d920      	bls.n	80066d6 <qsort+0x280>
 8006694:	fbbb f1f5 	udiv	r1, fp, r5
 8006698:	9b01      	ldr	r3, [sp, #4]
 800669a:	2b07      	cmp	r3, #7
 800669c:	d80b      	bhi.n	80066b6 <qsort+0x260>
 800669e:	fbb4 f4f5 	udiv	r4, r4, r5
 80066a2:	aa14      	add	r2, sp, #80	@ 0x50
 80066a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066a8:	f843 6c40 	str.w	r6, [r3, #-64]
 80066ac:	f843 4c3c 	str.w	r4, [r3, #-60]
 80066b0:	9b01      	ldr	r3, [sp, #4]
 80066b2:	3301      	adds	r3, #1
 80066b4:	e6df      	b.n	8006476 <qsort+0x20>
 80066b6:	9b00      	ldr	r3, [sp, #0]
 80066b8:	462a      	mov	r2, r5
 80066ba:	4638      	mov	r0, r7
 80066bc:	f7ff fecb 	bl	8006456 <qsort>
 80066c0:	42ac      	cmp	r4, r5
 80066c2:	d80b      	bhi.n	80066dc <qsort+0x286>
 80066c4:	9b01      	ldr	r3, [sp, #4]
 80066c6:	aa14      	add	r2, sp, #80	@ 0x50
 80066c8:	3b01      	subs	r3, #1
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066d0:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
 80066d4:	e6d0      	b.n	8006478 <qsort+0x22>
 80066d6:	42ac      	cmp	r4, r5
 80066d8:	f67f aed9 	bls.w	800648e <qsort+0x38>
 80066dc:	fbb4 f1f5 	udiv	r1, r4, r5
 80066e0:	4637      	mov	r7, r6
 80066e2:	e6c9      	b.n	8006478 <qsort+0x22>

080066e4 <memset>:
 80066e4:	4402      	add	r2, r0
 80066e6:	4603      	mov	r3, r0
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d100      	bne.n	80066ee <memset+0xa>
 80066ec:	4770      	bx	lr
 80066ee:	f803 1b01 	strb.w	r1, [r3], #1
 80066f2:	e7f9      	b.n	80066e8 <memset+0x4>

080066f4 <__libc_init_array>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	4d0d      	ldr	r5, [pc, #52]	@ (800672c <__libc_init_array+0x38>)
 80066f8:	4c0d      	ldr	r4, [pc, #52]	@ (8006730 <__libc_init_array+0x3c>)
 80066fa:	1b64      	subs	r4, r4, r5
 80066fc:	10a4      	asrs	r4, r4, #2
 80066fe:	2600      	movs	r6, #0
 8006700:	42a6      	cmp	r6, r4
 8006702:	d109      	bne.n	8006718 <__libc_init_array+0x24>
 8006704:	4d0b      	ldr	r5, [pc, #44]	@ (8006734 <__libc_init_array+0x40>)
 8006706:	4c0c      	ldr	r4, [pc, #48]	@ (8006738 <__libc_init_array+0x44>)
 8006708:	f000 f826 	bl	8006758 <_init>
 800670c:	1b64      	subs	r4, r4, r5
 800670e:	10a4      	asrs	r4, r4, #2
 8006710:	2600      	movs	r6, #0
 8006712:	42a6      	cmp	r6, r4
 8006714:	d105      	bne.n	8006722 <__libc_init_array+0x2e>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	f855 3b04 	ldr.w	r3, [r5], #4
 800671c:	4798      	blx	r3
 800671e:	3601      	adds	r6, #1
 8006720:	e7ee      	b.n	8006700 <__libc_init_array+0xc>
 8006722:	f855 3b04 	ldr.w	r3, [r5], #4
 8006726:	4798      	blx	r3
 8006728:	3601      	adds	r6, #1
 800672a:	e7f2      	b.n	8006712 <__libc_init_array+0x1e>
 800672c:	080067a8 	.word	0x080067a8
 8006730:	080067a8 	.word	0x080067a8
 8006734:	080067a8 	.word	0x080067a8
 8006738:	080067ac 	.word	0x080067ac

0800673c <memcpy>:
 800673c:	440a      	add	r2, r1
 800673e:	4291      	cmp	r1, r2
 8006740:	f100 33ff 	add.w	r3, r0, #4294967295
 8006744:	d100      	bne.n	8006748 <memcpy+0xc>
 8006746:	4770      	bx	lr
 8006748:	b510      	push	{r4, lr}
 800674a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800674e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006752:	4291      	cmp	r1, r2
 8006754:	d1f9      	bne.n	800674a <memcpy+0xe>
 8006756:	bd10      	pop	{r4, pc}

08006758 <_init>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr

08006764 <_fini>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr
